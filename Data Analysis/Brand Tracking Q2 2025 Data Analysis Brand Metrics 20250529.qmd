---
title: "Brand Tracking Q1 2025 Brand Metric Measures"
author: "Graham Albert"
toc: true
number-sections: true
toc-location: left
format:
  pdf:
    documentclass: report
    keep-tex: true
    toc: true
    toc-depth: 5
    number-sections: true
    colorlinks: true
    highlight-style: github
execute:
  echo: false
  warning: true
  fig-width: 10
  fig-height: 4.5
  fig-format: png
  fig-asp: 900
editor: visual
cache: true
---

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| include: false
# install_and_load_packages_from_file.R
install_and_load_packages_from_file <- function(file_path) {
  # Read the list of packages from the specified text file
  listOfPackages <- scan(file_path, character(), quote = "")
  
  # Install and load packages
  for (pkg in listOfPackages) {
    if (!pkg %in% installed.packages()) {
      install.packages(pkg, dependencies = TRUE)
    }
    tryCatch({
      library(pkg, character.only = TRUE)
      cat(paste("Loaded package: ", pkg, "\n"))
    }, error = function(e) {
      cat(paste("Error loading package: ", pkg, "\n"))
      cat(paste("Error message: ", conditionMessage(e), "\n"))
    })
  }
}

# Call the function with the file path
install_and_load_packages_from_file("~/git/Cross-Sell/Functions/required_packages.txt")
runScriptsInCurrentDirectory <- function(directory = "Functions", skipScripts = character(0)) {
  # Get the list of R script files in the specified directory
  scriptFiles <- list.files(directory, pattern = ".R$", full.names = TRUE)
  
  # Check if there are any script files
  if (length(scriptFiles) == 0) {
    cat(paste("No R script files found in the '", directory, "' directory.\n", sep = ""))
    return(NULL)
  }
  
  # Iterate through the script files and run each one
  for (scriptFile in scriptFiles) {
    # Check if the script should be skipped
    if (basename(scriptFile) %in% skipScripts) {
      cat("Skipping script:", scriptFile, "\n")
      next
    }
    
    cat("Running script:", scriptFile, "\n")
    
    # Use tryCatch to run the script with a 15-second timeout
    tryCatch({
      system.time({
        source(scriptFile, local = TRUE)
      })$elapsed
    }, error = function(e) {
      cat("Script", scriptFile, "was not run (timed out).\n")
    })
    
    cat("Script", scriptFile, "completed.\n")
  }
}


# Specify the scripts to skip (replace with your script filenames)
scriptsToSkip <- c("create_summary_table.R","runScriptsInCurrentDirectory.R")

# Call the function to run scripts in the current directory, skipping specified scripts
runScriptsInCurrentDirectory(directory = "Functions",skipScripts = scriptsToSkip)

library(tidyr)
library(dplyr)
library(reshape2)
# This processing pipeline combines three functions to transform and process data.
# 1. It starts by converting the data from wide to long format using the to_long function.
# 2. Then it replaces NAs in the resulting dataframe with a specified default value.
# 3. Next, it factors all columns in the dataframe using the factorize_column function.
# 4. Finally, it calculates counts and percentages by grouping the last two columns (variable and value)
#    using the calculate_count_and_percentage function.
# Function to transform data from wide to long format with multiple id.vars
to_long <- function(dataframe, id.vars, variable.name, value.name) {
  if (!is.character(id.vars)) {
    stop("id.vars must be a character vector.")
  }
  
  melted_data <- reshape2::melt(dataframe, id.vars = id.vars, variable.name = variable.name, value.name = value.name)
  
  return(melted_data)
}

# Function to factorize all columns in a dataframe
factorize_column <- function(dataframe, columns = NULL) {
  if (is.null(columns)) {
    columns <- names(dataframe)
  }
  
  for (col in columns) {
    if (is.factor(dataframe[[col]])) {
      next
    }
    
    dataframe[[col]] <- as.factor(dataframe[[col]])
  }
  
  return(data.frame(dataframe))
}

# Function to calculate counts and percentages by grouping columns
calculate_count_and_percentage <- function(dataframe, group_columns = NULL) {
  if (is.null(group_columns)) {
    group_columns <- names(dataframe)[c(length(dataframe) - 1, length(dataframe))]
  }
  
  result <- dataframe %>%
    group_by(!!!syms(group_columns)) %>%
    summarise(count = n()) %>%
    mutate(perc = count / sum(count))
    
  return(data.frame(result))
}

# Updated process_data_pipeline function without total_rows
process_data_pipeline_single_column<- function(dataframe, id.var = NULL, default_value = 0, group_column = NULL) {
  df_long_data <- to_long(dataframe, id.vars = id.var, variable.name = "variable", value.name = "value")
  df_long_data <- replace(df_long_data, is.na(df_long_data), default_value)
  df_long_data <- factorize_column(df_long_data)
  df_long_data <- data.frame(df_long_data)
  result <- calculate_count_and_percentage(df_long_data, group_columns = group_column)
  result <- result[result$value != default_value, ]
  return(result)
}
library(extrafont)
library(magick)
library(jtools)
library(ggplot2)
library(reshape2)
library(scales)

#The bar_plot_percent function creates a bar plot with percentages. It takes a dataframe,
#dataframe, and the names of the x-axis variable, x_var, the y-axis variable, y_var, and 
#the fill variable, fill_var. Additional optional arguments include plot_name, facet_var, main_title
#, x_axis_label, y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.

# Function to create a bar plot with percentages
bar_plot_percent <- function(dataframe, x_var, y_var = "perc", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(!!as.name(x_var), desc(!!as.name(y_var))), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
  print(p)
}



#The function bar_plot_percent_ordered creates a bar plot with percentages, where 
#the bars are ordered by the values of the y-variable. It takes a dataframe, dataframe, 
#and the names of the x-axis variable, x_var, the y-axis variable, y_var, and the fill variable, 
#fill_var. It also accepts additional optional arguments such as plot_name, facet_var, main_title, x_axis_label,
#y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.


# Updated function to create a bar plot with percentages, bars ordered by y values

# Updated function to create a bar plot with percentages, bars ordered by y values
bar_plot_percent_ordered <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 5), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 12, height = 4.5, dpi = 1800)
  return(p) 
  print(p)
}


library(ggplot2)
library(scales)

# Function definition
bar_plot_percent <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Convert x_var to factor with ordered levels
  dataframe[[x_var]] <- factor(dataframe[[x_var]], levels = unique(dataframe[[x_var]]))
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = !!as.name(x_var), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 12, height = 4.5, dpi = 1800)
  return(p)
}

#This function takes x,y and fill variables and generates a bar plot using theme
# and color pallette for presentations at Acrisure.



#The create_bar_chart function generates a bar plot using themes and a color palette 
#for presentations at Acrisure, taking as inputs data (the dataframe), x_var (the x-axis variable), 
#fill_var (the variable for fill), and facet_var (optional variable for facets).
#The function also has parameters for plot_name (output plot filename), percentage
#(whether to display percentages or counts), and main_title (title for the plot)

create_bar_chart <- function(data, x_var, fill_var = x_var, facet_var = NULL, plot_name = "defaultplot.png", percentage = FALSE, main_title = NULL) {
  # Load required packages
  library(extrafont)
  library(magick)
  library(jtools)
  library(ggplot2)
  library(reshape2)
  library(scales)
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#313131")
  
  # Define the common theme
  apatheme <- theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 4, family = 'sans'),
      legend.title = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.position = "none",
      axis.text.x = element_text(angle = 55, vjust = 1, hjust = 1)
    )
  
  # Create a ggplot
  p <- ggplot(data, aes(x = !!as.name(x_var), fill = !!as.name(fill_var))) +
    geom_bar(stat = ifelse(percentage, "identity", "count")) +
    apatheme +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(data[[fill_var]]))) +
    labs(title = ifelse(!is.null(main_title), main_title, plot_name), y = ifelse(percentage, "Pct. Selected", "Count"), x = NULL)
  
  # Add facet_wrap if facet_var is not NULL
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Calculate and add percentage or count labels to y-axis based on the 'percentage' argument
  if (percentage) {
    p <- p + geom_text(stat = 'identity', aes(label = paste0(round(100 * count / sum(count)), "%")), vjust = 1, size = 3, colour = "white")
  } else {
    p <- p + geom_text(stat = 'count', aes(label = after_stat(count)), vjust = 1, size = 3, colour = "white") # Set label text color to white
  }
  
  # Display the plot
  print(p)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
}


# Updated function to create a bar plot with percentages and bars ordered by y values
create_bar_chart_ordered <- function(dataframe, x_var, y_var, fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Count", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(!!as.name(x_var), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = sprintf("%.2f", !!as.name(y_var))), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display numbers rounded to two decimals
  p <- p + scale_y_continuous()
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}




#The bar_chart_count function generates a bar chart with counts, considering inputs such as dataframe (the dataframe),
#x_var (the x-axis variable), fill_var (the variable for fill), plot_name (output plot filename), main_title (title for the plot), 
#x_axis_label (label for the x-axis), and y_axis_label (label for the y-axis).

# Updated function to create a bar chart with counts
bar_chart_count <- function(dataframe, x_var, fill_var, facet_var = NULL, plot_name = "default_plot.png", main_title = NULL, x_axis_label = NULL, y_axis_label = "Count") {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = factor(!!as.name(x_var)), fill = factor(!!as.name(fill_var)))) +
    geom_bar() +
    scale_fill_manual(values = custom_palette) +
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}




library(ggplot2)
bar_chart_count_with_error <- function(dataframe, x_var, y_var, fill_var, facet_var = NULL, plot_name = "default_plot.png", main_title = NULL, x_axis_label = NULL, y_axis_label = "Count") {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = factor(!!as.name(x_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity") +
    geom_errorbar(
      aes(x = factor(!!as.name(x_var)), ymin = !!as.name(y_var) - sd, ymax = !!as.name(y_var) + sd),
      width = 0.2, colour = "black"
    ) +
    scale_fill_manual(values = custom_palette) +
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}

library(tidyr)
library(dplyr)
library(reshape2)

# Function to transform data from wide to long format with multiple id.vars
#to_long takes a dataframe and transforms it from wide to long format using the reshape2 package. 
#It takes dataframe as input and outputs the transformed data melted_data.
to_long <- function(dataframe, id.vars, variable.name, value.name) {
  if (!is.character(id.vars)) {
    stop("id.vars must be a character vector.")
  }
  melted_data <- reshape2::melt(dataframe, id.vars = id.vars, variable.name = variable.name, value.name = value.name)
  return(melted_data)
}

# Function to factorize all columns in a dataframe

#factorize_column converts all columns in the dataframe into factors, ensuring
#that each column is a factor variable. It takes dataframe as input and outputs
#the dataframe with all columns converted to factors.
# Function to factorize columns while maintaining the order of the levels
# Function to factorize columns while maintaining the original levels order
factorize_column <- function(dataframe, columns = NULL, levels = NULL) {
  if (is.null(columns)) {
    columns <- names(dataframe)
  }
  for (col in columns) {
    if (is.factor(dataframe[[col]])) {
      next
    }
    if (is.null(levels)) {
      dataframe[[col]] <- as.factor(dataframe[[col]])
    } else {
      dataframe[[col]] <- factor(dataframe[[col]], levels = unique(dataframe[[col]]))
    }
  }
  return(dataframe)
}


# Function to calculate counts and percentages by grouping columns
# Updated calculate_count_and_percentage function to calculate counts and percentages within each level of group_columns

#calculate_count_and_percentage calculates counts and percentages by grouping columns 
#specified in group_columns. It groups the dataframe, calculates the count and percentage within each group, 
#and then ungroups the data. It takes dataframe as input and outputs the resulting calculated counts and percentages.

calculate_count_and_percentage <- function(dataframe, group_columns = NULL) {
  if (is.null(group_columns)) {
    group_columns <- names(dataframe)[c(length(dataframe) - 1, length(dataframe))]
  }
  
  result <- dataframe %>%
    group_by(!!!syms(group_columns)) %>%
    summarise(count = n()) %>%
    mutate(perc = count / sum(count)) %>%
    ungroup()  # Remove grouping
  
  return(result)
}

#new_percent calculates new percentages by multiplying the existing percentage (perc) 
#in the dataframe with the difference between total_columns and the length of id_vars. 
#It takes dataframe as input and outputs the dataframe with the new percentage added.

# Function to calculate new percentages
new_percent <- function(dataframe, id_vars, total_columns) {
  require(dplyr)
  difference <- total_columns - length(id_vars)
  dataframe <- dataframe %>%
    mutate(new_perc = perc * difference)
  return(dataframe)
}

# Updated process_data_pipeline function without total_rows argument
#process_data_pipeline_multiple_columns is an updated version of the data processing pipeline function. 
#It performs the following steps: transforming data from wide to long format, replacing NAs with a default value, 
#converting all columns to factors, ensuring the data is in a dataframe, calculating count and percentage, 
#removing rows where the value column equals 0, and finally calculating new percentages. 
#It takes dataframe as input and outputs the processed data.

process_data_pipeline_multiple_columns <- function(dataframe, id.var = NULL, default_value = 0, group_column = NULL) {
  # Step 1: Transform data from wide to long format using to_long
  df_long_data <- to_long(dataframe, id.vars = id.var, variable.name = "variable", value.name = "value")
  
  # Step 2: Replace NAs with default_value
  df_long_data <- replace(df_long_data, is.na(df_long_data), default_value)
  
  # Step 3: Factorize all columns
  df_long_data <- factorize_column(df_long_data)
  
  # Step 4: Ensure the data is in a data.frame
  df_long_data <- data.frame(df_long_data)
  
  # Step 5: Calculate count and percentage with the specified group_column
  result <- calculate_count_and_percentage(df_long_data, group_columns = group_column)
  
  # Step 6: Remove rows where value column equals 0
  result <- result[result$value != default_value, ]
  
  # Step 7: Calculate new percentages
  result <- new_percent(result, id_vars = id.var, total_columns = ncol(dataframe))
  
  return(result)
}

#| include: false
#The compute_mean_and_se function computes the mean and standard error for all columns
#except the first two (ID and Name) in a dataframe, taking dataframe as an input and an 
#optional column_names parameter for specific columns.

#The compute_mean_and_se_grouped function, which utilizes the dplyr package, computes 
#the mean and standard error grouped by a categorical variable, taking dataframe as an 
#input and optional parameters such as column_names for specific columns and groupby for the grouping variable. 
#This function also checks for numeric columns and skips non-numeric ones.


#Compute mean and SE for all columns except the first two (ID and Name)
compute_mean_and_se <- function(dataframe, column_names = NULL) {
  # If column_names is not specified, select all columns except the first two
  if (is.null(column_names)) {
    column_names <- names(dataframe)[3:length(dataframe)]
  }
  
  # Initialize an empty dataframe to store the results
  result_df <- data.frame(Column = character(0), Mean = numeric(0), SE = numeric(0))
  
  # Loop through the specified column names
  for (col_name in column_names) {
    # Check if the column is a factor
    if (is.factor(dataframe[[col_name]])) {
      # Convert factor to numeric
      dataframe[[col_name]] <- as.numeric(dataframe[[col_name]])
    }
    
    # Subset the dataframe to exclude NA values in the current column
    subset_df <- dataframe[!is.na(dataframe[[col_name]]), ]
    
    # Compute the mean and standard error
    mean_val <- mean(subset_df[[col_name]])
    se_val <- sd(subset_df[[col_name]]) / sqrt(length(subset_df[[col_name]]))
    
    # Create a new row for the result dataframe
    result_row <- data.frame(Column = col_name, Mean = mean_val, SE = se_val)
    
    # Append the result row to the result dataframe
    result_df <- rbind(result_df, result_row)
  }
  
  return(result_df)
}


#Compute mean and se grouped by a categorical variab;le
library(dplyr)

compute_mean_and_se_grouped <- function(dataframe, column_names = NULL, groupby = NULL) {
  # If column_names is not specified, select all columns except the first two
  if (is.null(column_names)) {
    column_names <- names(dataframe)[3:length(dataframe)]
  }
  
  # Initialize an empty dataframe to store the results
  result_df <- data.frame(Column = character(0), Group = character(0), Mean = numeric(0), SE = numeric(0))
  
  # Loop through the specified column names
  for (col_name in column_names) {
    # Check if the column is numeric
    if (is.numeric(dataframe[[col_name]])) {
      # If groupby is specified, calculate mean and SE within each group using dplyr
      if (!is.null(groupby)) {
        grouped_data <- dataframe %>%
          group_by_at(vars(all_of(groupby))) %>%
          summarise(Mean = mean(.data[[col_name]], na.rm = TRUE),
                    SE = sd(.data[[col_name]], na.rm = TRUE) / sqrt(n())) %>%
          mutate(Column = col_name)
        
        result_df <- bind_rows(result_df, grouped_data)
      } else {
        # Subset the dataframe to exclude NA values in the current column
        subset_df <- dataframe[!is.na(dataframe[[col_name]]), ]
        
        # Compute the mean and standard error
        mean_val <- mean(subset_df[[col_name]])
        se_val <- sd(subset_df[[col_name]]) / sqrt(length(subset_df[[col_name]]))
        
        # Create a new row for the result dataframe
        result_row <- data.frame(Column = col_name, Group = "Overall", Mean = mean_val, SE = se_val)
        
        # Append the result row to the result dataframe
        result_df <- bind_rows(result_df, result_row)
      }
    } else {
      cat("Column", col_name, "is not numeric. Skipping...\n")
    }
  }
  
  return(result_df)
}

library(wordcloud)
library(tm)
library(RColorBrewer)

# List of common stop words in English
stop_words <- c("i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves",
                "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their",
                "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was",
                "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and",
                "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between",
                "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off",
                "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any",
                "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so",
                "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "d", "ll", "m", "o", "re", "ve", "y",
                "ain", "aren", "couldn", "didn", "doesn", "hadn", "hasn", "haven", "isn", "ma", "mightn", "mustn", "needn", "shan",
                "shouldn", "wasn", "weren", "won", "wouldn")

generate_wordcloud <- function(dataframe, text_column, output_filename) {
  # Parameter validation
  if (!text_column %in% colnames(dataframe)) {
    stop("The specified text column does not exist in the dataframe.")
  }
  if (nrow(dataframe) == 0) {
    stop("The dataframe is empty.")
  }
  
  tryCatch({
    # Create a Corpus from the text_column
    corpus <- Corpus(VectorSource(dataframe[[text_column]]))
    
    # Convert to lowercase and remove punctuation
    corpus <- tm_map(corpus, content_transformer(tolower))
    corpus <- tm_map(corpus, removePunctuation)
    
    # Remove common stop words
    corpus <- tm_map(corpus, removeWords, stop_words)
    
    # Create a Document-Term Matrix
    dtm <- DocumentTermMatrix(corpus)
    
    # Convert the Document-Term Matrix to a matrix
    word_freq_matrix <- as.matrix(dtm)
    
    # Calculate word frequencies
    word_freqs <- colSums(word_freq_matrix)
    
    # Create a data frame of word frequencies
    word_freq_df <- data.frame(word = names(word_freqs), freq = word_freqs)
    
    # Filter out words that are two letters or shorter
    word_freq_df <- word_freq_df[nchar(as.character(word_freq_df$word)) > 2, ]
    
    # Set up the word cloud plot dimensions
    par(mar = rep(1, 4))  # Adjust the margins as needed
    
    # Create a word cloud with the specified color palette and white background
    wordcloud(
      words = word_freq_df$word,
      freq = word_freq_df$freq,
      scale = c(3, 0.5),
      min.freq = 1,
      colors = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131"),  # Specified color palette
      bg = "white"
    )
    
    # Save the word cloud as a PNG file
    png(filename = paste0(output_filename, ".png"), width = 800, height = 600, res = 100) # Adjust width, height, and res as needed
    print(wordcloud(words = word_freq_df$word, freq = word_freq_df$freq, scale = c(3, 0.5), min.freq = 1, 
                    colors = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131"), bg = "white"))
    dev.off() # Close the PNG device
  }, error = function(e) {
    cat("An error occurred: ", conditionMessage(e), "\n")
  })
}


library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() +  # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}
library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() +  # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}



# Explanation of the Custom Horizontal Bar Plot Function:
# This function takes a dataframe and several customizable parameters to create a horizontal bar plot using ggplot2.
# Users can specify the x-axis variable, y-axis variable, fill variable, plot name, facet variable for faceted plots,
# main title, x-axis label, y-axis label, and y-axis limits.
# Load required libraries
library(tidyverse)
library(scales)

# Custom color palette
library(ggplot2)

# Function to create a customizable horizontal bar plot
create_horizontal_bar_plot <- function(
    dataframe,
    x_var,
    y_var = "perc",
    fill_var,
    plot_name = "default_plot.png",
    main_title = NULL,
    x_axis_label = NULL,
    y_axis_label = "Pct Selected",
    y_limits = c(0, 1)
) {
  p <- ggplot(dataframe, aes(x = {{x_var}}, y = {{y_var}}, fill = {{fill_var}})) +
    geom_col() +
    geom_text(aes(label = scales::percent({{y_var}})),
              position = position_stack(vjust = 0.5),
              color = "white",
              size = 2.5) +
    coord_flip() +
    scale_x_discrete() +
    scale_fill_manual(values = custom_palette) +
    labs(
      title = ifelse(is.null(main_title), "", main_title),
      x = ifelse(is.null(x_axis_label), "", x_axis_label),
      y = ifelse(is.null(y_axis_label), "", y_axis_label)
    ) +
    theme_minimal() +
    ylim(y_limits)
  
  ggsave(plot_name, plot = p, width = 10, height = 6, dpi = 300)
  return(p)
}

# Example usage:
set.seed(123)
test_df <- data.frame(
  Category = rep(c("A", "B", "C"), each = 3),
  Value = runif(9),
  Group = rep(c("Group1", "Group2", "Group3"), times = 3)
)

custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")

create_horizontal_bar_plot(
  dataframe = test_df,
  x_var = Category,
  y_var = Value,
  fill_var = Group,
  plot_name = "custom_plot.png",
  main_title = "Custom Plot",
  x_axis_label = "X-Axis Label",
  y_axis_label = "Custom Y-Axis Label",
  y_limits = c(0, 1)
)


library(tidyverse)
library(scales)
library(reshape2)


# Main pipeline function
custom_pipeline <- function(
    dataframe,
    variable_columns,
    Rating
) {
  dataframe %>%
    pivot_longer(cols = all_of(variable_columns), names_to = "Variable", values_to = "Value") %>%
    group_by(Variable, Value) %>%
    summarise(Count = n()) %>%
    ungroup() %>%
    mutate(
      Proportion = if_else(
        Value %in% Rating,
        Count / sum(Count),
        NA_real_
      ),
      Percentage = scales::percent(Proportion, accuracy = 1)
    ) %>%
    arrange(Variable)
}

# Example usage of the custom_pipeline function
set.seed(123)
test_df <- data.frame(
  response_id = 1:100,
  q1 = sample(c("A", "B", "C", "D"), 100, replace = TRUE),
  q2 = sample(c("X", "Y", "Z"), 100, replace = TRUE),
  q3 = sample(c("Yes", "No"), 100, replace = TRUE)
)

custom_result <- custom_pipeline(
  dataframe = test_df,
  variable_columns = c("q1", "q2", "q3"),
  Rating = c("A", "X", "Yes")
)

print(custom_result)


library(extrafont)
library(magick)
library(jtools)
library(ggplot2)
library(reshape2)
library(scales)

#The bar_plot_percent function creates a bar plot with percentages. It takes a dataframe,
#dataframe, and the names of the x-axis variable, x_var, the y-axis variable, y_var, and 
#the fill variable, fill_var. Additional optional arguments include plot_name, facet_var, main_title
#, x_axis_label, y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.

# Function to create a bar plot with percentages
bar_plot_percent <- function(dataframe, x_var, y_var = "perc", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 15), desc(!!as.name(y_var))), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust=0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
  print(p)
}



#The function bar_plot_percent_ordered creates a bar plot with percentages, where 
#the bars are ordered by the values of the y-variable. It takes a dataframe, dataframe, 
#and the names of the x-axis variable, x_var, the y-axis variable, y_var, and the fill variable, 
#fill_var. It also accepts additional optional arguments such as plot_name, facet_var, main_title, x_axis_label,
#y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.


# Updated function to create a bar plot with percentages, bars ordered by y values
bar_plot_percent_ordered <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 15), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p) 
  print(p)
}

# Example usage:
data_df <- data.frame(
  Category = rep(c("A", "B", "C", "D"), each = 4),
  Percentage = runif(16, min = 0, max = 100)
  
)

bar_plot_percent(
  dataframe = data_df,
  x_var = "Category",        # Use quotes for variable names
  y_var = "Percentage",      # Use quotes for variable names
  fill_var = "Category",  # Use quotes for variable names
  plot_name = "bar_plot_percentage.png",
  main_title = "Bar Plot Example",
  x_axis_label = "Categories",
  y_axis_label = "Percentage"
)


library(ggplot2)
library(scales)

# Sample dataframe for testing
data_df <- data.frame(
  Category = as.factor(c(1, 2, 3, 4, 5, 4, 1, 3, 2, 5)),
  Percentage = runif(10, min = 0, max = 100),
  Group = rep(c("A", "B"), each = 5)
)

# Function definition
bar_plot_percent <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Convert x_var to factor with ordered levels
  dataframe[[x_var]] <- factor(dataframe[[x_var]], levels = unique(dataframe[[x_var]]))
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(stringr::str_wrap(!!as.name(x_var), 15), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 0, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust=0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}

# Test the function
bar_plot_percent(data_df, "Category", "Percentage", "Group", "bar_plot_ordered.png", main_title = "Bar Plot Example", x_axis_label = "Categories", y_axis_label = "Percentage")



##############################################################################
#1 load_survey_data() takes the necessary parameters (API key, base URL, survey 
#ID, and output filename) and calls the other helper functions.
#2	load_libraries(): This function loads the required R packages:qualtRics, sjlabelled, tidyverse, janitor, and skimr.
#3	set_api_credentials(): This function sets the Qualtrics API credentials using the provided API key and base URL.
#4	fetch_survey_data(): This function fetches the survey data from Qualtrics using the provided survey ID.
#5	save_survey_responses(): This function saves the survey data as a CSV file with the given filename.
#6	read_csv_and_get_colnames(): This function reads the CSV file, gets the column names, and returns the column names and the raw data.
#7	main(): This is the main function that orchestrates the entire process. It calls the helper functions in the correct order to load the survey data, save it as a CSV file, and print the column names.
##############################################################################

load_survey_data <- function(api_key = NULL, base_url = NULL, surveyID) {
  # Load necessary libraries
  load_libraries <- function() {
    library(qualtRics)
    library(sjlabelled)
    library(tidyverse)
    library(janitor)
    library(skimr)
    library(magrittr)
  }
  
  # Set API credentials
  set_api_credentials <- function(api_key, base_url) {
    qualtrics_api_credentials(api_key = api_key,
                              base_url = base_url,
                              overwrite = TRUE,
                              install = TRUE)
  }
  
  # Fetch survey data
  fetch_survey_data <- function(surveyID) {
    tryCatch(
      {
        fetch_survey(surveyID = surveyID, force_request = TRUE)
      },
      error = function(e) {
        message("Error fetching survey data: ", e$message)
        message("Please check your API key and base URL.")
        stop("Qualtrics API authentication error")
      }
    )
  }
  
  # Save survey responses as a CSV file
  save_survey_responses <- function(data, filename) {
    write.csv(data, file = filename, row.names = FALSE)
  }
  
  # Read CSV file and get column names
  read_csv_and_get_colnames <- function(filename, skip_rows = 3) {
    col_names <- colnames(readr::read_csv(filename, n_max = 0))
    raw_data <- readr::read_csv(filename, col_names = col_names, skip = skip_rows)
    list(col_names = col_names, raw_data = raw_data)
  }
  
  # Define columns to remove
  cols_to_remove <- c(
    "StartDate", "EndDate", "Status", "IPAddress", "Progress", "Duration (in seconds)",
    "Finished", "RecordedDate", "RecipientLastName", "RecipientFirstName", "RecipientEmail",
    "ExternalReference", "LocationLatitude", "LocationLongitude", "DistributionChannel",
    "UserLanguage", "Q_RecaptchaScore", "Q_RelevantIDDuplicate", "Q_RelevantIDDuplicateScore",
    "Q_RelevantIDFraudScore", "Q_RelevantIDLastStartDate", "SC0", "opp", "Q_TotalDuration",
    "RISN", "rid", "LS", "V", "CMRID", "Q_CHL", "Q_BallotBoxStuffing", "Redix", "tg", "wave",
    "transaction_id", "SVID", "PS", "ResponseID", "PID", "psid", "K2", "med", "orderNumber",
    "gc", "term", "pureSpectrumRedirectUrl", "pureSpectrumSignatureValue"
  )
  
  # Load API key and base URL from .Renviron file
  readRenviron("~/.Renviron")
  
  # Set API credentials
  if (is.null(api_key) || is.null(base_url)) {
    api_key <- Sys.getenv("QUALTRICS_API_KEY")
    base_url <- Sys.getenv("QUALTRICS_BASE_URL")
  }
  set_api_credentials(api_key, base_url)
  
  # Fetch survey data
  survey_data <- fetch_survey_data(surveyID)
  
  # Save survey responses as a CSV file
  save_survey_responses(survey_data, "datafile.csv")
  
  # Check overlap with actual column names in data file
  load_libraries()
  csv_info <- read_csv_and_get_colnames("datafile.csv")
  col_names <- csv_info$col_names
  cols_to_remove_id <- col_names %in% cols_to_remove
  cols_to_remove <- col_names[cols_to_remove_id]
  
  # Remove the unwanted Qualtrics columns
  raw_data <- csv_info$raw_data
  raw_data <- dplyr::select(raw_data, !all_of(cols_to_remove))
  
  # Initial cleaning: Convert column names to tidyverse style guide and remove empty rows and columns
  cleaned_data <- janitor::clean_names(raw_data)
  dplyr::glimpse(cleaned_data)
  
  # Define function to delete columns with substring and retain
  delete_columns_with_substring_and_retain <- function(df, substring_to_delete, substring_to_retain) {
    deleted_columns <- vector("character", length = 0)
    for (col in names(df)) {
      if (grepl(substring_to_delete, col) && !grepl(substring_to_retain, col)) {
        df <- df[, !(names(df) %in% col)]
        deleted_columns <- c(deleted_columns, col)
      }
    }
    cat("Deleted columns:", paste(deleted_columns, collapse = ", "), "\n")
    return(df)
  }
  
  # Delete columns with substring 'DO' and retain columns with 'DO_DO'
  cleaned_data <- delete_columns_with_substring_and_retain(cleaned_data, '_do_', '_do_do_')
  
  # Delete columns with substring 'ADO' and retain columns with 'ADO_ADO'
  cleaned_data <- delete_columns_with_substring_and_retain(cleaned_data, '_ado_', '_ado_ado_')
  
  return(cleaned_data)
}





```

#### Load new and updated functions

```{r}
#| include: false
library(ggplot2)
library(dplyr)

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 2, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)


# create_regression_plot function takes a dataframe and creates a regression plot
# with options to display data points. It plots the relationship between the
# variables specified by x_var and y_var with a linear regression line.
# Additional customization options include setting the main_title, y_axis_label,
# x_axis_label, line_color, and whether to display data points using geom_point.
# The inputs for this function are dataframe (the input dataframe), x_var and y_var (the variables to be plotted).

# The function create_regression_plot generates a regression plot, and the example
# provided demonstrates how to use the function with sample data.

# Note this graph creates a regression plot
create_regression_plot <- function(dataframe, x_var, y_var, main_title = NULL, y_axis_label = NULL, x_axis_label = NULL, line_color = "#002A4E", plot_name = NULL) {
  # Check for missing values
  if (any(sapply(dataframe, function(x) any(is.na(x))))) {
    stop("The input dataframe contains missing values. Please handle them before using this function.")
  }
  
  # Check if the input arguments are valid
  stopifnot(
    x_var %in% names(dataframe),
    y_var %in% names(dataframe)
  )
  
  # Create a base plot with a linear regression line
  plot <- ggplot(dataframe, aes(x = !!rlang::sym(x_var), y = !!rlang::sym(y_var))) +
    geom_smooth(method = "lm", se = TRUE, color = line_color) +
    geom_point(size = 2, color = "#36749D") +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      plot.title = element_text(hjust = 0.5), # Center the title
      plot.margin = margin(20, 20, 20, 20) # Add margin to the plot
    ) +
    labs(
      title = ifelse(!is.null(main_title), main_title, NULL),
      x = ifelse(!is.null(x_axis_label), x_axis_label, x_var),
      y = ifelse(!is.null(y_axis_label), y_axis_label, y_var)
    )
  
  # Save the plot as a PNG file if plot_name is provided
  if (!is.null(plot_name)) {
    ggsave(filename = plot_name, plot = plot, width = 10, height = 4.5, dpi = 1800)
  }
  
  return(plot)
}

# Example usage for a regression plot with points
set.seed(123)
data_df <- data.frame(
  X = rnorm(100),
  Y = rnorm(100)
)

plot_object <- create_regression_plot(
  data_df, x_var = "X", y_var = "Y",
  main_title = "Regression Plot",
  y_axis_label = "Y-Axis Label",
  x_axis_label = "X-Axis Label",
  line_color = "#002A4E",
  plot_name = "regression_plot.png"
)
print(plot_object)



library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Check if the input dataframe and column_name are valid
  if (!is.data.frame(dataframe) || !is.character(column_name) || !column_name %in% names(dataframe)) {
    stop("Invalid input dataframe or column_name.")
  }
  
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() + # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}

generate_multiple_phrase_barcharts <- function(dataframe) {
  for (column_name in names(dataframe)) {
    if (is.character(dataframe[[column_name]])) {
      plot_name <- paste0(column_name, "_phrases_barchart.png")
      plot_top_phrases(dataframe, column_name, plot_name)
    } else {
      message("Column '", column_name, "' is not a text column. Skipping this column.")
    }
  }
}

# Create a sample dataframe
sample_data <- data.frame(
  ID = 1:10,
  question1 = c("apple", "banana", "apple", "cherry", "banana", "apple", "banana", "cherry", "date", "apple"),
  question2 = c("orange", "pear", "orange", "kiwi", "pear", "orange", "pear", "kiwi", "mango", "orange"),
  numeric_column = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
)

# Generate multiple phrase barcharts
generate_multiple_phrase_barcharts(sample_data)




#The generate_wordcloud function takes a dataframe, a text column, and an output filename as inputs. 
#It creates a word cloud plot from the text data in the specified column using the wordcloud function
#from the wordcloud package. It calculates the word frequencies, 
#sets up the plot dimensions, and saves the resulting word cloud as a PNG file with a fixed dark blue color and white background

# Example of how to call the function to save the word cloud plot


library(wordcloud)
library(tm)
library(RColorBrewer)

# List of common stop words in English
stop_words <- c("i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves",
                "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their",
                "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was",
                "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and",
                "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between",
                "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off",
                "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any",
                "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so",
                "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "d", "ll", "m", "o", "re", "ve", "y",
                "ain", "aren", "couldn", "didn", "doesn", "hadn", "hasn", "haven", "isn", "ma", "mightn", "mustn", "needn", "shan",
                "shouldn", "wasn", "weren", "won", "wouldn")

generate_wordcloud <- function(dataframe, text_column, output_filename, color_palette = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131")) {
  # Parameter validation
  if (is.null(dataframe) || is.null(text_column) || is.null(output_filename)) {
    stop("All parameters must be provided.")
  }
  
  if (!text_column %in% colnames(dataframe)) {
    stop("The specified text column does not exist in the dataframe.")
  }
  
  if (nrow(dataframe) == 0) {
    message("The dataframe is empty. No word cloud can be generated.")
    return(invisible())
  }
  
  tryCatch({
    # Create a Corpus from the text_column
    corpus <- Corpus(VectorSource(dataframe[[text_column]]))
    
    # Convert to lowercase and remove punctuation
    corpus <- tm_map(corpus, content_transformer(tolower))
    corpus <- tm_map(corpus, removePunctuation)
    
    # Remove common stop words
    corpus <- tm_map(corpus, removeWords, stop_words)
    
    # Create a Document-Term Matrix
    dtm <- DocumentTermMatrix(corpus)
    
    # Convert the Document-Term Matrix to a matrix
    word_freq_matrix <- as.matrix(dtm)
    
    # Calculate word frequencies
    word_freqs <- colSums(word_freq_matrix)
    
    # Create a data frame of word frequencies
    word_freq_df <- data.frame(word = names(word_freqs), freq = word_freqs)
    
    # Filter out words that are two letters or shorter
    word_freq_df <- word_freq_df[nchar(as.character(word_freq_df$word)) > 2, ]
    
    # Set up the word cloud plot dimensions
    par(mar = rep(1, 4)) # Adjust the margins as needed
    
    # Create a word cloud with the specified color palette and white background
    word_cloud <- wordcloud(
      words = word_freq_df$word,
      freq = word_freq_df$freq,
      scale = c(3, 0.5),
      min.freq = 1,
      colors = color_palette,
      bg = "white"
    )
    
    # Save the word cloud as a PNG file
    png(filename = paste0(output_filename, ".png"), width = 800, height = 600, res = 100) # Adjust width, height, and res as needed
    print(word_cloud)
    dev.off() # Close the PNG device
    
    return(word_cloud)
  }, error = function(e) {
    cat("An error occurred: ", conditionMessage(e), "\n")
  })
}

set.seed(123)
sample_data <- data.frame(
  text_column = c(
    "This is a sample text for the word cloud.",
    "Another example text to be included.",
    "Testing the word cloud function.",
    "Final text sample for the word cloud."
  )
)


generate_wordcloud(sample_data, "text_column", "sample_wordcloud")

word_cloud_object <- generate_wordcloud(sample_data, "text_column", "sample_wordcloud")

custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131")
word_cloud_object <- generate_wordcloud(sample_data, "text_column", "sample_wordcloud", color_palette = custom_palette)






##Newest version 20240516

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = value_labels)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 2, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = custom_palette[1:length(value_labels)], 
                      breaks = rev(levels(reduced_df_long_perc$Value))) +  # Reverse the order of labels in the legend
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, value labels, and a custom color palette.
#'
#'@param df The input dataframe.
#'@param file_name The name of the output file to be saved.
#'@param question_names A vector of column names to be used for the chart.
#'@param var_labels A vector of variable labels to be used for the x-axis.
#'@param value_labels A vector of value labels to be used for the legend.
#'@param custom_palette A vector of custom colors to be used for the bars.
#'
#'@return The function saves the generated chart as a PNG file.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.6) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete() +
    scale_fill_manual(values = setNames(custom_palette[1:length(value_labels)], value_labels)) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D","#85714D", "#004F51", "#000000",  "#95174C","#DDE9F0")

generate_horizontal_bar_chart(
  sample_df,
  "sample_output.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)






library(ggplot2)
library(dplyr)

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.


generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object
  return(plot)
}


# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D", "#85714D","#004F51", "#000000",  "#95174C","#DDE9F0")

plot_object <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3","q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 1", "Variable 2", "Variable 3", "Variable 4", "Variable 5", "Variable 6", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)






generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output2.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 1", "Variable 2", "Variable 3", "Variable 4", "Variable 5", "Variable 6", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)

# Access the plot object and the data frame
plot_object <- result$plot
reduced_df_long_perc <- result$data




generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}


result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)



generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  reduced_df <- dplyr::select(df, response_id, all_of(question_names))
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order using forcats::fct_relevel()
  reduced_df_long$Variable <- forcats::fct_relevel(reduced_df_long$Variable, bar_order)
  
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(
      axis.text.x = element_blank(),
      axis.title.x = element_blank(),
      panel.grid = element_blank(),
      text = element_text(size = 12, family = 'sans'),
      legend.position = "top"
    )
  
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  return(list(plot = plot, data = reduced_df_long_perc))
}


result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)


##Newest version 20240516

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = value_labels)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = custom_palette[1:length(value_labels)], 
                      breaks = rev(levels(reduced_df_long_perc$Value))) +  # Reverse the order of labels in the legend
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 12, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)

```

# Brand Tracking Q3 2024

## **Summary**


## Methods

### Study Purpose

The primary purpose of this study was to continue to track brand awareness of Acrisure and its competitors. This will inform the decisions of the Innovation team and AGM. Secondary purposes of this study included:

1.  Tracking respondents future purchase consideration of insurance products, employee benefits (commercial lines only), and financial services products.

2.  Tracking respondents awareness of and sentiment towards Acrisure and other insurance providers.

3.  Tracking respondents awareness of and sentiment towards Acrisures new brand ambassdor, Lionel Richie, along with their awareness of and sentiment towards other insurance brand ambassadors.

4.  Determining what factors cause customers to churn from an insurance provider.

5.  Measuring respondents perception of their agent and how they feel when their agent tries to cross-sell to them.

### **Recruitment**

Participants were recruited via Qualtrics. Data collection occurred between...

### **Questions**

The survey was programmed in Qualtrics. For the Commercial Lines survey there were a total of X questions and the median completion time was 15 minutes. The IR for the personal lines sample was X%.

For the Personal Lines survey there were a total of X questions and the median completion time was X minutes. The IR for the personal lines sample was XX%.

### **New Questions**

## **Sample**

The sample was a stratified sample. We collected a PL Sample and a CL Sample. A total of 616 PL and 404 CL respondents completed the survey. The IR for the CL sample was 6.7%. The IR for PL sample was XX%?

### **Screening**

For both samples all individuals were required to be US adults. For the Personal Lines sample individuals must represent Acrisures target customers, that is they must either have owned a home or a car and hold a home or auto policy, or both. For the Commercial Lines sample individuals were required to either be small business owners, equity partners in a business or individuals who are involved in insurance and/or employee benefit decision making. 

### Load Data Files

```{r}
BTQ2<- read.csv("/Users/grahamalbert/git/Brand-Tracking-Q2-2025/BTQ2_DF_MERGED_DF_INCREASED.csv")
```


```{r}
# Required packages
library(dplyr)

# Define the target levels and labels
likert_levels <- c(
  "Not at all likely",
  " Somewhat likely ",
  "Likely",
  "Very likely",
  "Extremely likely"
)

# Convert specified columns to factor
BTQ2 <- BTQ2 |>
  mutate(across(
    .cols = q43_shared_1:q43_shared_8,
    .fns = ~ factor(.x, levels = likert_levels, ordered = TRUE)
  ))
summary(BTQ2$q43_shared_1)
```



```{r}
BTQ2$RESPONDENT_TYPE<-factor(BTQ2$RESPONDENT_TYPE,
  levels = c(1,2),
  labels = c("PL","CL")
)
BTQ2
```

```{r}
# Define the breaks for age categories
breaks <- c(18, 30, 40, 50, 60, 70, 80)

# Create age categories using cut()
BTQ2$age_categories <- cut(BTQ2$q3_shared, breaks = breaks, labels = c("18-30", "30-40", "40-50", "50-60", "60-70", "70+"), include.lowest = TRUE, right = FALSE)
```

```{r}
#Lets create a staff size variable.

# Define the breaks
breaks <- seq(0, 500, by = 50)

# Define the labels for the bins
labels <- c('0-50', '51-100', '101-150', '151-200', '201-250', '251-300', '301-350', '351-400','401-450','451-500')

# Convert the numeric variable to a categorical variable
BTQ2_CL$company_size <- cut(BTQ2_CL$q25_cl, breaks = breaks, labels = labels, include.lowest = TRUE)

# Print the result
BTQ2_CL$company_size
require(vtable)
COMPANY_SIZE_TAB<-st(BTQ2_CL,vars = "company_size",out="csv",file="company_size.csv")
COMPANY_SIZE_TAB
```

### Commercial Lines

```{r}
BTQ2_CL<-subset(BTQ2,RESPONDENT_TYPE=="CL")
summary(BTQ2_CL$q43_shared_1)

```

### Personal Lines

```{r}
BTQ2_PL<-subset(BTQ2,RESPONDENT_TYPE=="PL")
summary(BTQ2_PL$q43_shared_1)

```

```{r}
# Specify the columns

 columns <- c("q75_shared_1", "q75_shared_2", "q75_shared_3","q75_shared_4","q75_shared_5","q75_shared_6","q75_shared_7","q75_shared_8")
# Subset the dataframe to include only the specified columns
subset_df <- BTQ2[, columns]

# Check if all values in each row of the subset dataframe are NA
na_rows <- apply(subset_df, 1, function(row) all(is.na(row)))

# Count the number of rows where all specified columns are NA
count <- sum(na_rows)

# Print the result
print(count)
```



```{r}
require(vtable)
BTQ2_CL$q4_shared<-factor(BTQ2_CL$q4_shared,
                             levels=c("$24,999 or less","$25,000 - $49,999","$50,000 - $74,999","$75,000 – $99,999","$100,000 - $149,999","$150,000 - $199,999","$200,000 - $249,999","$250,000 or more","Prefer not to say"))

INCOME_GROUP_CL<-st(BTQ2_CL,vars = "q4_shared",out="csv",file="INCOME_GROUP_CL.csv")
print(INCOME_GROUP_CL)
```

### Brokerage Brand Awareness

Q75: Which, if any, of the following brands have you heard of? Select all that apply.

Lets look at respondents awareness of all surveyed companies.

##### Brand Awareness Brokerage by state

```{r}
require(vtable)
result <- replace_NA_with_value(BTQ2, columns = c("q75_shared_1"), replace_value = 0)
Awareness_By_State<-st(result,vars="q75_shared_1",group="q16_shared",out="csv",file="Awareness_By_State.csv")
print(Awareness_By_State)

```

Lets look at respondents awareness of the 8 brokerages.

```{r}
#| label: fig-Brand-Awareness-Brokerage-Combined
#| fig-cap: Percentage of respondents across line type who report awareness of each insurance brokerage
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of respondents are awaere of each insurance brokerage

BROKERAGE_BRAND_AWARENESS_DF<-dplyr::select(BTQ2,response_id,q75_shared_1,q75_shared_2,q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6
,q75_shared_7,q75_shared_8)
BROKERAGE_BRAND_AWARENESS_DF
BROKERAGE_BRAND_AWARENESS_DF_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_BRAND_AWARENESS_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
BROKERAGE_BRAND_AWARENESS_DF_PERC
bar_plot_percent_ordered(BROKERAGE_BRAND_AWARENESS_DF_PERC, "value", "new_perc", "value", "BROKERAGE_BRAND_AWARENESS_COMBINED.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```

@fig-Brand-Awareness-Brokerage-Combined shows that Acrisure brand awareness sits at \[15\]%. Respondents' awareness of Aon and Hub International is exceeding %.

Lets look at **Personal Lines Respondents Awareness** of the 8 brokerages

```{r}
#| label: fig-Brand-Awareness-Personal-Lines
#| fig-cap: Percentage of personal lines respondents who report awareness of each insurance brokerage
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of personal respondents are aware of each insurance brokerage
BROKERAGE_BRAND_AWARENESS_DF_PL<-dplyr::select(BTQ2_PL,response_id,q75_shared_1,q75_shared_2,q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6
,q75_shared_7,q75_shared_8)
BROKERAGE_BRAND_AWARENESS_DF_PL_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_BRAND_AWARENESS_DF_PL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BROKERAGE_BRAND_AWARENESS_DF_PL_PERC, "value", "new_perc", "value", "BROKERAGE_BRAND_AWARENESS_PL.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.1))
```

@fig-Brand-Awareness-Personal-Lines shows that 3% of PL Acrisure brand awareness sits at \[3\]%. Respondents' awareness of Aon \[11\]% and Marsh McLennan sits at \[7\]%.  is exceeding %.

```{r}
require(dplyr)
D2C_AWARENESS_DF_PL<-dplyr::select(BTQ2_PL,response_id,q75_shared_9,q75_shared_10,q75_shared_11)
D2C_AWARENESS_DF_PL_PERC <- process_data_pipeline_multiple_columns(D2C_AWARENESS_DF_PL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
D2C_AWARENESS_DF_PL_PERC$new_perc<-D2C_AWARENESS_DF_PL_PERC$new_perc*2
D2C_AWARENESS_DF_PL_PERC

D2C_AWARENESS_DF_PL_PERC<-as.data.frame(D2C_AWARENESS_DF_PL_PERC)
D2C_AWARENESS_DF_PL_PERC
ACRISURE_AWARENESS_DF_PL<-dplyr::select(BTQ2_PL,response_id,q75_shared_1)
ACRISURE_AWARENESS_DF_PL_PERC <- process_data_pipeline_multiple_columns(ACRISURE_AWARENESS_DF_PL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
ACRISURE_AWARENESS_DF_PL_PERC<-as.data.frame(ACRISURE_AWARENESS_DF_PL_PERC)
D2C_AWARENESS_DF_PL_PERC <- rbind(D2C_AWARENESS_DF_PL_PERC, ACRISURE_AWARENESS_DF_PL_PERC)
D2C_AWARENESS_DF_PL_PERC$new_perc<-round(D2C_AWARENESS_DF_PL_PERC$new_perc,2)
print(D2C_AWARENESS_DF_PL_PERC)
bar_plot_percent_ordered(D2C_AWARENESS_DF_PL_PERC, "value", "new_perc", "value", "D2C_AWARENESS_DF_PL_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))

```
Lemonade is the most popular consumer D2C brand with \[52\]% reporting awareness.


Lets look at **Commercial Lines Respondents** Awareness of the 8 brokerages.

##### Commercial Lines Respondents Awareness of 8 National Brokerages

```{r}
#| label: fig-Brand-Awareness-Commercial-Lines
#| fig-cap: Percentage of commercial lines respondents who report awareness of each insurance brokerage
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of commercial respondents are aware of each insurance brokerage
require(dplyr)
BROKERAGE_BRAND_AWARENESS_DF_CL<-dplyr::select(BTQ2_CL,response_id,q75_shared_1,q75_shared_2,q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6,q75_shared_7,q75_shared_8)
BROKERAGE_BRAND_AWARENESS_DF_CL_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_BRAND_AWARENESS_DF_CL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
BROKERAGE_BRAND_AWARENESS_DF_CL_PERC
bar_plot_percent_ordered(BROKERAGE_BRAND_AWARENESS_DF_CL_PERC, "value", "new_perc", "value", "BROKERAGE_BRAND_AWARENESS_DF_CL_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```

@fig-Brand-Awareness-Commercial-Lines shows that \[33\]% of commercial lines respondents report being aware of Acrisure. \[45\]% report awareness of hub international and \[41\]% reprt awareness of Aon.

@fig-Brand-Awareness-Personal-Lines shows that X% of personal lines respondents report being aware of Acrisure.

#### D2C awareness

Commercial lines

1.  SoFi
2.  Insureon
3.  Hiscox
4.  Intuit Quickbooks

```{r}

D2C_AWARENESS_DF_CL<-dplyr::select(BTQ2_CL,response_id,q75_shared_13,q75_shared_14)
D2C_AWARENESS_DF_CL_PERC <- process_data_pipeline_multiple_columns(D2C_AWARENESS_DF_CL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
D2C_AWARENESS_DF_CL_PERC$new_perc<-D2C_AWARENESS_DF_CL_PERC$new_perc*2
D2C_AWARENESS_DF_CL_PERC

D2C_AWARENESS_DF_CL_PERC<-as.data.frame(D2C_AWARENESS_DF_CL_PERC)
D2C_AWARENESS_DF_CL_PERC
ACRISURE_AWARENESS_DF_CL<-dplyr::select(BTQ2_CL,response_id,q75_shared_1)
ACRISURE_AWARENESS_DF_CL_PERC <- process_data_pipeline_multiple_columns(ACRISURE_AWARENESS_DF_CL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
ACRISURE_AWARENESS_DF_CL_PERC<-as.data.frame(ACRISURE_AWARENESS_DF_CL_PERC)
D2C_AWARENESS_DF_CL_PERC <- rbind(D2C_AWARENESS_DF_CL_PERC, ACRISURE_AWARENESS_DF_CL_PERC)
D2C_AWARENESS_DF_CL_PERC$new_perc<-round(D2C_AWARENESS_DF_CL_PERC$new_perc,2)
print(D2C_AWARENESS_DF_CL_PERC)
bar_plot_percent_ordered(D2C_AWARENESS_DF_CL_PERC, "value", "new_perc", "value", "D2C_AWARENESS_DF_CL_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))

```


### Brand Metrics

```{r}

require(dplyr)
BTQ2_REVISED_REDUCED_FIGS <-dplyr::select(BTQ2,response_id,RESPONDENT_TYPE,q75_shared_1,q75_shared_2,
                                                       q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6
,q75_shared_7,q75_shared_8,q40_shared_1,q40_shared_2,q40_shared_3,q40_shared_4,q40_shared_5, q40_shared_6,q40_shared_7,q40_shared_8,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)
  
  

BTQ2_REVISED_REDUCED_FIGS_factorized <- lapply(BTQ2_REVISED_REDUCED_FIGS, function(x) as.factor(as.character(x)))
BTQ2_REVISED_REDUCED_FIGS_factorized<-data.frame(BTQ2_REVISED_REDUCED_FIGS_factorized) 


q40_correct_levels <- c('Not likely to consider', 
                    'Somewhat likely to consider', 
                    'Likely to consider', 
                    'Very likely to consider', 
                    'Extremely likely to consider')

# Use lapply to apply the same transformation to all q40_shared variables
BTQ2_REVISED_REDUCED_FIGS_factorized[paste0("q40_shared_", 1:8)] <- lapply(BTQ2_REVISED_REDUCED_FIGS_factorized[paste0("q40_shared_", 1:8)], function(x) {
  factor(x, levels = q40_correct_levels, labels = q40_correct_levels, ordered = TRUE)
})

q43_correct_levels <- c('Not at all likely', 
                    'Somewhat likely', 
                    'Likely', 
                    'Very likely', 
                    'Extremely likely')



BTQ2_REVISED_REDUCED_FIGS_factorized[paste0("q43_shared_", 1:8)] <- lapply(BTQ2_REVISED_REDUCED_FIGS_factorized[paste0("q43_shared_", 1:8)], function(x) {
  factor(x, levels = q43_correct_levels, labels = q43_correct_levels, ordered = TRUE)
})



likert_map <- c(
  "Not at all likely" = 1,
  "Somewhat likely"   = 2,
  "Likely"            = 3,
  "Very likely"       = 4,
  "Extremely likely"  = 5
)

# Get all relevant column names
shared_cols <- grep("^q43_shared_", names(BTQ2_REVISED_REDUCED_FIGS_factorized), value = TRUE)

# Apply the mapping safely
for (col in shared_cols) {
  BTQ2_REVISED_REDUCED_FIGS_factorized[[col]] <- as.numeric(likert_map[as.character(BTQ2_REVISED_REDUCED_FIGS_factorized[[col]])])
}
BTQ2_REVISED_REDUCED_FIGS_factorized


```

```{r}


# Replace NA values in columns A and B with 999
BTQ2_REVISED_REDUCED_FIGS_factorized_replaced <- replace_NA_with_value(BTQ2_REVISED_REDUCED_FIGS_factorized, columns = c("q75_shared_1","q75_shared_2",  "q75_shared_3","q75_shared_4","q75_shared_5","q75_shared_6"
,"q75_shared_7","q75_shared_8"), replace_value = 0)

# Print the result dataframe
BTQ2_REVISED_REDUCED_FIGS_factorized


BTQ2_REVISED_REDUCED_FIGS_factorized_replaced$response_id <- BTQ2_REVISED_REDUCED_FIGS_factorized_replaced$response_id

# View the updated df2
BTQ2_REVISED_REDUCED_FIGS_factorized_replaced$response_id<-as.factor(BTQ2_REVISED_REDUCED_FIGS_factorized_replaced$response_id)
BTQ2_REVISED_REDUCED_FIGS_factorized_replaced
```

This code will print the number of rows where all the specified columns have the target value. Let me know if you need any further assistance!


####Create reduced dataframe
```{r}
require(dplyr)
#Awareness
BRAND_AWARE_DF<-dplyr::select(BTQ2_REVISED_REDUCED_FIGS_factorized_replaced,response_id,q75_shared_1,q75_shared_2,
                                                       q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6,q75_shared_7,q75_shared_8)
BRAND_AWARE_DF


library(dplyr)

library(dplyr)

BRAND_AWARE_DF <- BRAND_AWARE_DF |>
  mutate(across(
    .cols = q75_shared_1:q75_shared_8,
    .fns = \(x) {
      x_num <- as.numeric(as.character(x))
      ifelse(x_num == 0, 0, 1)
    }
  ))
BRAND_AWARE_DF <- replace_NA_with_value(BRAND_AWARE_DF, columns = c("q75_shared_1","q75_shared_2",
                                                       "q75_shared_3","q75_shared_4","q75_shared_5","q75_shared_6","q75_shared_7","q75_shared_8"), replace_value = 1)
BRAND_AWARE_DF
#Future Consideration
BRAND_FUTURE_CON_DF<-dplyr::select(BTQ2_REVISED_REDUCED_FIGS_factorized_replaced,response_id,q40_shared_1,q40_shared_2,q40_shared_3,q40_shared_4,q40_shared_5, q40_shared_6,q40_shared_7,q40_shared_8)
BRAND_FUTURE_CON_DF

#NPS
BRAND_NPS_DF<-dplyr::select(BTQ2_REVISED_REDUCED_FIGS_factorized_replaced,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)
BRAND_NPS_DF
```



```{r}
require(reshape2)
require(dplyr)
# Awareness
df_long_brand_ambassador_aware <- reshape2::melt(BRAND_AWARE_DF, id.vars = "response_id", variable.name = "Brand", value.name = "Awareness")
df_long_brand_ambassador_aware

#future consideration
df_long_brand_ambassador_FutureCon<- reshape2::melt(BRAND_FUTURE_CON_DF, id.vars = "response_id", variable.name = "Brand", value.name = "Future_Con")
df_long_brand_ambassador_FutureCon

# NPS
df_long_brand_ambassador_NPS<- reshape2::melt(BRAND_NPS_DF, id.vars = "response_id", variable.name = "Brand", value.name = "NPS")
df_long_brand_ambassador_NPS

```

```{r}
combined_brand_df <- cbind(df_long_brand_ambassador_aware, df_long_brand_ambassador_FutureCon, df_long_brand_ambassador_NPS)
combined_brand_df
combined_brand_df<-combined_brand_df[-c(4,5,7,8)]
combined_brand_df
```

```{r}
#relabel cases
combined_brand_df$Brand <- gsub("75_shared_1", "Acrisure", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_2", "Aon", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_3", "AJG", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_4", "B & B", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_5", "Hub International", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_6", "Lockton", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_7", "M & M", combined_brand_df$Brand)
combined_brand_df$Brand <- gsub("75_shared_8", "WTW", combined_brand_df$Brand)
```

```{r}
combined_brand_df$Brand<-as.factor(combined_brand_df$Brand)
summary(combined_brand_df$Brand)
```


```{r}
levels(combined_brand_df$Brand) <- gsub("^q", "", levels(combined_brand_df$Brand))

# View the updated dataframe
combined_brand_df$Brand<-as.factor(combined_brand_df$Brand) 
combined_brand_df
```

Make variables numeric

```{r}
combined_brand_df$Future_Con<-as.numeric(as.factor(combined_brand_df$Future_Con)) 
combined_brand_df$NPS<-as.numeric(as.factor(combined_brand_df$NPS))
combined_brand_df

# Load necessary library
library(dplyr)

# Group the data by Ambassador and calculate the means for the specified columns
mean_data_brand_data <- combined_brand_df %>%
  group_by(Brand) %>%
  summarise(
    mean_awareness = mean(Awareness, na.rm = TRUE),
    mean_future_con = mean(Future_Con, na.rm = TRUE),
    mean_NPS = mean(NPS, na.rm = TRUE)
  )

# View the resulting new dataframe
print(mean_data_brand_data)
mean_data_brand_data$mean_awareness<-mean_data_brand_data$mean_awareness*100
mean_data_brand_data$mean_awareness<-round(mean_data_brand_data$mean_awareness,digits=0)
mean_data_brand_data$mean_NPS<-round(mean_data_brand_data$mean_NPS,digits=1)
mean_data_brand_data$mean_future_con<-round(mean_data_brand_data$mean_future_con,digits=1)
write.csv(mean_data_brand_data,"mean_data_brand_data.csv")
mean_data_brand_data
```

#### Create bubble plots for brand awareness by net promoter score and future consideration

```{r}

create_bubble_plot_jitter(mean_data_brand_data,
                   x_variable = "mean_awareness",
                   y_variable = "mean_NPS", 
                   size_variable = "mean_future_con",
                   fill_var = "Brand",
                   label_variable = "mean_awareness", 
                   output_filename = "Brand-Metric-Awareness-Future-Con-NPS-3.png",
                   x_label = "% Awareness",
                   y_label = "Mean NPS",
                   x_min = 0, x_max = 25,  # Changed to 0.20 for 20%
                   y_min = 1, y_max = 5,
                   label_symbol = "%",
                   legend_title = "Mean Future Consideration",
                   jitter_amount = 1)  

median(mean_data_brand_data$mean_NPS)
median(mean_data_brand_data$mean_awareness)
print(mean_data_brand_data)



```

# Brand awareness block.



```{r}
require(dplyr)

BTQ2_REVISED_REDUCED_LOB<-dplyr::select(BTQ2,response_id,RESPONDENT_TYPE,q75_shared_1,q75_shared_2,
                                                       q75_shared_3,q75_shared_4,q75_shared_5,q75_shared_6
,q75_shared_7,q75_shared_8,q38_shared_1,q38_shared_2,q38_shared_3,q38_shared_4,q38_shared_5,q38_shared_6,q38_shared_7,q38_shared_8,q40_shared_1,q40_shared_2,q40_shared_3,q40_shared_4,q40_shared_5, q40_shared_6,q40_shared_7,q40_shared_8,q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)
  
  

BTQ2_REVISED_REDUCED_LOB_factorized <- lapply(BTQ2_REVISED_REDUCED_LOB, function(x) as.factor(as.character(x)))
BTQ2_REVISED_REDUCED_LOB_factorized<-data.frame(BTQ2_REVISED_REDUCED_LOB_factorized) 
BTQ2_REVISED_REDUCED_LOB_factorized

q38_correct_levels <- c('Not at all positive', 
                    'Somewhat positive', 
                    'Positive', 
                    'Very positive', 
                    'Extremely positive')

# Use lapply to apply the same transformation to all q38_shared variables
BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q38_shared_", 1:8)] <- lapply(BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q38_shared_", 1:8)], function(x) {
  factor(x, levels = q38_correct_levels, labels = q38_correct_levels, ordered = TRUE)
})



likert_map <- c(
  "Not at all positive"        = 1,
  "Somewhat positive"   = 2,
  "Positive"            = 3,
  "Very positive"       = 4,
  "Extremely positive"   = 5
)

# Get all relevant column names
shared_cols <- grep("^q38_shared_", names(BTQ2_REVISED_REDUCED_LOB_factorized), value = TRUE)

# Apply the mapping safely
for (col in shared_cols) {
  BTQ2_REVISED_REDUCED_LOB_factorized[[col]] <- as.numeric(likert_map[as.character(BTQ2_REVISED_REDUCED_LOB_factorized[[col]])])
}
BTQ2_REVISED_REDUCED_LOB_factorized

q40_correct_levels <- c('Not likely to consider', 
                    'Somewhat likely to consider', 
                    'Likely to consider', 
                    'Very likely to consider', 
                    'Extremely likely to consider')

# Use lapply to apply the same transformation to all q40_shared variables
BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q40_shared_", 1:8)] <- lapply(BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q40_shared_", 1:8)], function(x) {
  factor(x, levels = q40_correct_levels, labels = q40_correct_levels, ordered = TRUE)
})


likert_map <- c(
  "Not likely to consider"        = 1,
  "Somewhat likely to consider"   = 2,
  "Likely to consider"            = 3,
  "Very likely to consider"       = 4,
  "Extremely likely to conside"   = 5
)

# Get all relevant column names
shared_cols <- grep("^q40_shared_", names(BTQ2_REVISED_REDUCED_LOB_factorized), value = TRUE)

# Apply the mapping safely
for (col in shared_cols) {
  BTQ2_REVISED_REDUCED_LOB_factorized[[col]] <- as.numeric(likert_map[as.character(BTQ2_REVISED_REDUCED_LOB_factorized[[col]])])
}
BTQ2_REVISED_REDUCED_LOB_factorized

q43_correct_levels <- c('Not at all likely', 
                    'Somewhat likely', 
                    'Likely', 
                    'Very likely', 
                    'Extremely likely')



BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q43_shared_", 1:8)] <- lapply(BTQ2_REVISED_REDUCED_LOB_factorized[paste0("q43_shared_", 1:8)], function(x) {
  factor(x, levels = q43_correct_levels, labels = q43_correct_levels, ordered = TRUE)
})

BTQ2_REVISED_REDUCED_LOB_factorized

likert_map <- c(
  "Not at all likely" = 1,
  "Somewhat likely"   = 2,
  "Likely"            = 3,
  "Very likely"       = 4,
  "Extremely likely"  = 5
)

# Get all relevant column names
shared_cols <- grep("^q43_shared_", names(BTQ2_REVISED_REDUCED_LOB_factorized), value = TRUE)

# Apply the mapping safely
for (col in shared_cols) {
  BTQ2_REVISED_REDUCED_LOB_factorized[[col]] <- as.numeric(likert_map[as.character(BTQ2_REVISED_REDUCED_LOB_factorized[[col]])])
}
BTQ2_REVISED_REDUCED_LOB_factorized



library(dplyr)

BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con <- BTQ2_REVISED_REDUCED_LOB_factorized |>
  mutate(across(
    .cols = q75_shared_1:q75_shared_8,
    .fns = \(x) ifelse(as.numeric(as.character(x)) == 0, 0, 1)
  )) |>
  mutate(across(
    .cols = q41_shared_1:q41_shared_8,
    .fns = \(x) ifelse(as.numeric(as.character(x)) == 0, 0, 1)
  ))

BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con

BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace <- replace_NA_with_value(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con, columns = c("q75_shared_1","q75_shared_2",
                                                       "q75_shared_3","q75_shared_4","q75_shared_5","q75_shared_6","q75_shared_7","q75_shared_8","41_shared_1","41_shared_2",
                                                       "41_shared_3","41_shared_4","41_shared_5","41_shared_6","41_shared_7","q41_shared_8"), replace_value = 1)
BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace
```



ill factor respondent id and respondent type

```{r}
BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$response_id<-as.factor(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$response_id)
BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$RESPONDENT_TYPE<-as.factor(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$RESPONDENT_TYPE)
```




### Commercial Lines

```{r}
BTQ2_REVISED_REDUCED_FIGS_factorized_CL<-subset(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace,RESPONDENT_TYPE=="CL")
BTQ2_REVISED_REDUCED_FIGS_factorized_CL
```


### Personal Lines

```{r}
BTQ2_REVISED_REDUCED_FIGS_factorized_PL<-subset(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace,RESPONDENT_TYPE=="PL")
BTQ2_REVISED_REDUCED_FIGS_factorized_PL
```

#### Variable creation

```{r}
#Mean Awareness
#Acrisure
  ACRISURE_AWARE_MEAN_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_1,na.rm=TRUE)/nrow(BTQ2))*100
  ACRISURE_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_1,na.rm=TRUE)/nrow(BTQ2_CL))*100
  ACRISURE_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_1,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Aon
  AON_AWARE_MEAN_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_2,na.rm=TRUE)/nrow(BTQ2))*100
  AON_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_2,na.rm=TRUE)/nrow(BTQ2_CL))*100
  AON_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_2,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #AJG
  AJG_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_3,na.rm=TRUE)/nrow(BTQ2))*100
  AJG_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_3,na.rm=TRUE)/nrow(BTQ2_CL))*100
  AJG_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_3,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Brown & Brown
  BROWN_BROWN_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_4,na.rm=TRUE)/nrow(BTQ2))*100
  BROWN_BROWN_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_4,na.rm=TRUE)/nrow(BTQ2_CL))*100
  BROWN_BROWN_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_4,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Hub International
  HUB_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_5,na.rm=TRUE)/nrow(BTQ2))*100
  HUB_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_5,na.rm=TRUE)/nrow(BTQ2_CL))*100
  HUB_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_5,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Lockton and Companies
  LOCKTON_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_6,na.rm=TRUE)/nrow(BTQ2))*100
  LOCKTON_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_6,na.rm=TRUE)/nrow(BTQ2_CL))*100
  LOCKTON_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_6,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Marsh McLennan
  MM_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_7,na.rm=TRUE)/nrow(BTQ2))*100
  MM_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_7,na.rm=TRUE)/nrow(BTQ2_CL))*100
  MM_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_7,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #WTW
  WTW_AWARE_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q75_shared_8,na.rm=TRUE)/nrow(BTQ2))*100
  WTW_AWARE_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q75_shared_8,na.rm=TRUE)/nrow(BTQ2_CL))*100
  WTW_AWARE_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q75_shared_8,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Mean customer experience
  #Acrisure
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_1,na.rm=TRUE)
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_1,na.rm=TRUE)
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_1,na.rm=TRUE)
  #Aon
  AON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_2,na.rm=TRUE)
  AON_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_2,na.rm=TRUE)
  AON_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_2,na.rm=TRUE)
  #AJG
  AJG_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_3,na.rm=TRUE)
  AJG_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_3,na.rm=TRUE)
  AJG_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_3,na.rm=TRUE)
  #Brown & Brown
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_4,na.rm=TRUE)
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_4,na.rm=TRUE)
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_4,na.rm=TRUE)
  #Hub International
  HUB_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_5,na.rm=TRUE)
  HUB_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_5,na.rm=TRUE)
  HUB_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_5,na.rm=TRUE)
  #Lockton and Companies
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_6,na.rm=TRUE)
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_6,na.rm=TRUE)
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_6,na.rm=TRUE)
  #Marsh McLenna
  MM_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_7,na.rm=TRUE)
  MM_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_7,na.rm=TRUE)
  MM_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_7,na.rm=TRUE)
  #WTW
  WTW_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q38_shared_8,na.rm=TRUE)
  WTW_CUSTOMER_EXPERIENCE_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q38_shared_8,na.rm=TRUE)
  WTW_CUSTOMER_EXPERIENCE_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q38_shared_8,na.rm=TRUE)
  #Mean future consideration
  #Acrisure
  ACRISURE_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_1,na.rm=TRUE)
  ACRISURE_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_1,na.rm=TRUE)
  ACRISURE_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_1,na.rm=TRUE)
  #Aon
  AON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_2,na.rm=TRUE)
  AON_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_2,na.rm=TRUE)
  AON_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_2,na.rm=TRUE)
  #AJG
  AJG_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_3,na.rm=TRUE)
  AJG_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_3,na.rm=TRUE)
  AJG_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_3,na.rm=TRUE)
  #Brown & Brown
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_4,na.rm=TRUE)
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_4,na.rm=TRUE)
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_4,na.rm=TRUE)
  #Hub International
  HUB_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_5,na.rm=TRUE)
  HUB_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_5,na.rm=TRUE)
  HUB_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_5,na.rm=TRUE)
  #Lockton and Companies
  LOCKTON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_6,na.rm=TRUE)
  LOCKTON_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_6,na.rm=TRUE)
  LOCKTON_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_6,na.rm=TRUE)
  #Marsh McLennan
  MM_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_7,na.rm=TRUE)
  MM_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_7,na.rm=TRUE)
  MM_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_7,na.rm=TRUE)
  #WTW
  WTW_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q40_shared_8,na.rm=TRUE)
  WTW_FUTURE_CONSIDERATION_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q40_shared_8,na.rm=TRUE)
  WTW_FUTURE_CONSIDERATION_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q40_shared_8,na.rm=TRUE)
  ###Ad Exposure
  #Acrisure
  ACRISURE_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_1,na.rm=TRUE)/nrow(BTQ2))*100
  ACRISURE_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_1,na.rm=TRUE)/nrow(BTQ2_CL))*100
  ACRISURE_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_1,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Aon
  AON_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_2,na.rm=TRUE)/nrow(BTQ2))*100
  AON_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_2,na.rm=TRUE)/nrow(BTQ2_CL))*100
  AON_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_2,na.rm=TRUE)/nrow(BTQ2_PL))*10
  #AJG
  AJG_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_3,na.rm=TRUE)/nrow(BTQ2))*100
  AJG_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_3,na.rm=TRUE)/nrow(BTQ2_CL))*100
  AJG_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_3,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Brown & Brown
  BROWN_BROWN_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_4,na.rm=TRUE)/nrow(BTQ2))*100
  BROWN_BROWN_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_4,na.rm=TRUE)/nrow(BTQ2_CL))*100
  BROWN_BROWN_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_4,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Hub International
  HUB_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_5,na.rm=TRUE)/nrow(BTQ2))*100
  HUB_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_5,na.rm=TRUE)/nrow(BTQ2_CL))*100
  HUB_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_5,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Lockton and Companies
  LOCKTON_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_6,na.rm=TRUE)/nrow(BTQ2))*100
  LOCKTON_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_6,na.rm=TRUE)/nrow(BTQ2_CL))*100
  LOCKTON_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_6,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #Marsh McLennan
  MM_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_7,na.rm=TRUE)/nrow(BTQ2))*100
  MM_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_7,na.rm=TRUE)/nrow(BTQ2_CL))*100
  MM_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_7,na.rm=TRUE)/nrow(BTQ2_PL))*100
  #WTW
  WTW_Ad_Exposure_MEAN_SUM_COMPOSITE<-(sum(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q41_shared_8,na.rm=TRUE)/nrow(BTQ2))*100
  WTW_Ad_Exposure_MEAN_CL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q41_shared_8,na.rm=TRUE)/nrow(BTQ2_CL))*100
  WTW_Ad_Exposure_MEAN_PL<-(sum(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q41_shared_8,na.rm=TRUE)/nrow(BTQ2_PL))*100
  
  ###Mean NPS
  #Acrisure
  ACRISURE_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_1,na.rm=TRUE)
  ACRISURE_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_1,na.rm=TRUE)
  ACRISURE_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_1,na.rm=TRUE)
  #Aon
  AON_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_2,na.rm=TRUE)
  AON_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_2,na.rm=TRUE)
  AON_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_2,na.rm=TRUE)
  #AJG
  AJG_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_3,na.rm=TRUE)
  AJG_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_3,na.rm=TRUE)
  AJG_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_3,na.rm=TRUE)
  #Brown & Brown
  BROWN_BROWN_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_4,na.rm=TRUE)
  BROWN_BROWN_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_4,na.rm=TRUE)
  BROWN_BROWN_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_4,na.rm=TRUE)
  #Hub International
  HUB_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_5,na.rm=TRUE)
  HUB_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_5,na.rm=TRUE)
  HUB_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_5,na.rm=TRUE)
  #Lockton and Companies
  LOCKTON_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_6,na.rm=TRUE)
  LOCKTON_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_6,na.rm=TRUE)
  LOCKTON_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_6,na.rm=TRUE)
  #Marsh McLennan
  MM_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_7,na.rm=TRUE)
  MM_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_7,na.rm=TRUE)
  MM_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_7,na.rm=TRUE)
  #WTW
  WTW_NPS_MEAN_SUM_COMPOSITE<-mean(BTQ2_REVISED_REDUCED_LOB_factorized_numeric_con_replace$q43_shared_8,na.rm=TRUE)
  WTW_NPS_MEAN_CL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_CL$q43_shared_8,na.rm=TRUE)
  WTW_NPS_MEAN_PL<-mean(BTQ2_REVISED_REDUCED_FIGS_factorized_PL$q43_shared_8,na.rm=TRUE)
```


Create sum variable

```{r}
Master_Broker_Rating_df<-data.frame(
  #Acrisure
  ACRISURE_AWARE_MEAN_COMPOSITE,
  ACRISURE_AWARE_MEAN_CL,
  ACRISURE_AWARE_MEAN_PL,
  #Aon
  AON_AWARE_MEAN_COMPOSITE,
  AON_AWARE_MEAN_CL,
  AON_AWARE_MEAN_PL,
  #AJG
  AJG_AWARE_MEAN_SUM_COMPOSITE,
  AJG_AWARE_MEAN_CL,
  AJG_AWARE_MEAN_PL,
  #Brown & Brown
  BROWN_BROWN_AWARE_MEAN_SUM_COMPOSITE,
  BROWN_BROWN_AWARE_MEAN_CL,
  BROWN_BROWN_AWARE_MEAN_PL,
  #Hub International
  HUB_AWARE_MEAN_SUM_COMPOSITE,
  HUB_AWARE_MEAN_CL,
  HUB_AWARE_MEAN_PL,
  #Lockton and Companies
  LOCKTON_AWARE_MEAN_SUM_COMPOSITE,
  LOCKTON_AWARE_MEAN_CL,
  LOCKTON_AWARE_MEAN_PL,
  #Marsh McLennan
  MM_AWARE_MEAN_SUM_COMPOSITE,
  MM_AWARE_MEAN_CL,
  MM_AWARE_MEAN_PL,
  #WTW
  WTW_AWARE_MEAN_SUM_COMPOSITE,
  WTW_AWARE_MEAN_CL,
  WTW_AWARE_MEAN_PL,
  #Mean customer experience
  #Acrisure
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_CL,
  ACRISURE_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Aon
  AON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  AON_CUSTOMER_EXPERIENCE_MEAN_CL,
  AON_CUSTOMER_EXPERIENCE_MEAN_PL,
  #AJG
  AJG_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  AJG_CUSTOMER_EXPERIENCE_MEAN_CL,
  AJG_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Brown & Brown
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_CL,
  BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Hub International
  HUB_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  HUB_CUSTOMER_EXPERIENCE_MEAN_CL,
  HUB_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Lockton and Companies
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_CL,
  LOCKTON_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Marsh McLenna
  MM_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  MM_CUSTOMER_EXPERIENCE_MEAN_CL,
  MM_CUSTOMER_EXPERIENCE_MEAN_PL,
  #WTW
  WTW_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,
  WTW_CUSTOMER_EXPERIENCE_MEAN_CL,
  WTW_CUSTOMER_EXPERIENCE_MEAN_PL,
  #Mean future consideration
  #Acrisure
  ACRISURE_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  ACRISURE_FUTURE_CONSIDERATION_MEAN_CL,
  ACRISURE_FUTURE_CONSIDERATION_MEAN_PL,
  #Aon
  AON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  AON_FUTURE_CONSIDERATION_MEAN_CL,
  AON_FUTURE_CONSIDERATION_MEAN_PL,
  #AJG
  AJG_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  AJG_FUTURE_CONSIDERATION_MEAN_CL,
  AJG_FUTURE_CONSIDERATION_MEAN_PL,
  #Brown & Brown
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_CL,
  BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_PL,
  #Hub International
  HUB_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  HUB_FUTURE_CONSIDERATION_MEAN_CL,
  HUB_FUTURE_CONSIDERATION_MEAN_PL,
  #Lockton and Companies
  LOCKTON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  LOCKTON_FUTURE_CONSIDERATION_MEAN_CL,
  LOCKTON_FUTURE_CONSIDERATION_MEAN_PL,
  #Marsh McLennan
  MM_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  MM_FUTURE_CONSIDERATION_MEAN_CL,
  MM_FUTURE_CONSIDERATION_MEAN_PL,
  #WTW
  WTW_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,
  WTW_FUTURE_CONSIDERATION_MEAN_CL,
  WTW_FUTURE_CONSIDERATION_MEAN_PL,
  ###Ad Exposure
  #Acrisure
  ACRISURE_Ad_Exposure_MEAN_SUM_COMPOSITE,
  ACRISURE_Ad_Exposure_MEAN_CL,
  ACRISURE_Ad_Exposure_MEAN_PL,
  #Aon
  AON_Ad_Exposure_MEAN_SUM_COMPOSITE,
  AON_Ad_Exposure_MEAN_CL,
  AON_Ad_Exposure_MEAN_PL,
  #AJG
  AJG_Ad_Exposure_MEAN_SUM_COMPOSITE,
  AJG_Ad_Exposure_MEAN_CL,
  AJG_Ad_Exposure_MEAN_PL,
  #Brown & Brown
  BROWN_BROWN_Ad_Exposure_MEAN_SUM_COMPOSITE,
  BROWN_BROWN_Ad_Exposure_MEAN_CL,
  BROWN_BROWN_Ad_Exposure_MEAN_PL,
  #Hub International
  HUB_Ad_Exposure_MEAN_SUM_COMPOSITE,
  HUB_Ad_Exposure_MEAN_CL,
  HUB_Ad_Exposure_MEAN_PL,
  #Lockton and Companies
  LOCKTON_Ad_Exposure_MEAN_SUM_COMPOSITE,
  LOCKTON_Ad_Exposure_MEAN_CL,
  LOCKTON_Ad_Exposure_MEAN_PL,
  #Marsh McLennan
  MM_Ad_Exposure_MEAN_SUM_COMPOSITE,
  MM_Ad_Exposure_MEAN_CL,
  MM_Ad_Exposure_MEAN_PL,
  #WTW
  WTW_Ad_Exposure_MEAN_SUM_COMPOSITE,
  WTW_Ad_Exposure_MEAN_CL,
  WTW_Ad_Exposure_MEAN_PL,
  ###Mean NPS
  #Acrisure
  ACRISURE_NPS_MEAN_SUM_COMPOSITE,
  ACRISURE_NPS_MEAN_CL,
  ACRISURE_NPS_MEAN_PL,
  #Aon
  AON_NPS_MEAN_SUM_COMPOSITE,
  AON_NPS_MEAN_CL,
  AON_NPS_MEAN_PL,
  #AJG
  AJG_NPS_MEAN_SUM_COMPOSITE,
  AJG_NPS_MEAN_CL,
  AJG_NPS_MEAN_PL,
  #Brown & Brown
  BROWN_BROWN_NPS_MEAN_SUM_COMPOSITE,
  BROWN_BROWN_NPS_MEAN_CL,
  BROWN_BROWN_NPS_MEAN_PL,
  #Hub International
  HUB_NPS_MEAN_SUM_COMPOSITE,
  HUB_NPS_MEAN_CL,
  HUB_NPS_MEAN_PL,
  #Lockton and Companies
  LOCKTON_NPS_MEAN_SUM_COMPOSITE,
  LOCKTON_NPS_MEAN_CL,
  LOCKTON_NPS_MEAN_PL,
  #Marsh McLennan
  MM_NPS_MEAN_SUM_COMPOSITE,
  MM_NPS_MEAN_CL,
  MM_NPS_MEAN_PL,
  #WTW
  WTW_NPS_MEAN_SUM_COMPOSITE,
  WTW_NPS_MEAN_CL,
  WTW_NPS_MEAN_PL)
Master_Broker_Rating_df
```

Compute mean ratings across the 7 competing brokerages by line type.

```{r}
require(dplyr)
#Overall awareness
Master_Broker_Rating_df$AWARENESS_COMPETITOR_COMPOSITE<-(AON_AWARE_MEAN_COMPOSITE+AJG_AWARE_MEAN_SUM_COMPOSITE+BROWN_BROWN_AWARE_MEAN_SUM_COMPOSITE+HUB_AWARE_MEAN_SUM_COMPOSITE+LOCKTON_AWARE_MEAN_SUM_COMPOSITE+MM_AWARE_MEAN_SUM_COMPOSITE+WTW_AWARE_MEAN_SUM_COMPOSITE)/7
#CL Awareness
Master_Broker_Rating_df$AWARENESS_COMPETITOR_CL<-(AON_AWARE_MEAN_CL+AJG_AWARE_MEAN_CL+BROWN_BROWN_AWARE_MEAN_CL+HUB_AWARE_MEAN_CL+LOCKTON_AWARE_MEAN_CL+MM_AWARE_MEAN_CL+WTW_AWARE_MEAN_CL)/7
#PL Awareness
Master_Broker_Rating_df$AWARENESS_COMPETITOR_PL<-(AON_AWARE_MEAN_PL+AJG_AWARE_MEAN_PL+
BROWN_BROWN_AWARE_MEAN_PL+HUB_AWARE_MEAN_PL+LOCKTON_AWARE_MEAN_PL+MM_AWARE_MEAN_PL+WTW_AWARE_MEAN_PL)/7
#Overall customer experience
Master_Broker_Rating_df$COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE<-(AON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+AJG_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+HUB_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+LOCKTON_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+MM_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE+WTW_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE)/7
#CL Customer Experience
Master_Broker_Rating_df$COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_CL<-(AON_CUSTOMER_EXPERIENCE_MEAN_CL+AJG_CUSTOMER_EXPERIENCE_MEAN_CL+BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_CL+HUB_CUSTOMER_EXPERIENCE_MEAN_CL+LOCKTON_CUSTOMER_EXPERIENCE_MEAN_CL+MM_CUSTOMER_EXPERIENCE_MEAN_CL+WTW_CUSTOMER_EXPERIENCE_MEAN_CL)/7
#PL Customer Experience
Master_Broker_Rating_df$COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_PL<-(AON_CUSTOMER_EXPERIENCE_MEAN_PL+AJG_CUSTOMER_EXPERIENCE_MEAN_PL+BROWN_BROWN_CUSTOMER_EXPERIENCE_MEAN_PL+HUB_CUSTOMER_EXPERIENCE_MEAN_PL+LOCKTON_CUSTOMER_EXPERIENCE_MEAN_PL+MM_CUSTOMER_EXPERIENCE_MEAN_PL+WTW_CUSTOMER_EXPERIENCE_MEAN_PL)/7

#Overall future consideration 
Master_Broker_Rating_df$COMPETITOR_FUTURE_CONSIDFERATION_MEAN_SUM_COMPOSITE<-(AON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+AJG_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+HUB_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+LOCKTON_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+MM_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE+WTW_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE)/7
#CL future consideration
Master_Broker_Rating_df$COMPETITOR_FUTURE_CONSIDFERATION_MEAN_CL<-(AON_FUTURE_CONSIDERATION_MEAN_CL+AJG_FUTURE_CONSIDERATION_MEAN_CL+BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_CL+HUB_FUTURE_CONSIDERATION_MEAN_CL+LOCKTON_FUTURE_CONSIDERATION_MEAN_CL+MM_FUTURE_CONSIDERATION_MEAN_CL+WTW_FUTURE_CONSIDERATION_MEAN_CL)/7
#PL future consideration
Master_Broker_Rating_df$COMPETITOR_FUTURE_CONSIDFERATION_MEAN_PL<-(AON_FUTURE_CONSIDERATION_MEAN_PL+AJG_FUTURE_CONSIDERATION_MEAN_PL+BROWN_BROWN_FUTURE_CONSIDERATION_MEAN_PL+HUB_FUTURE_CONSIDERATION_MEAN_PL+LOCKTON_FUTURE_CONSIDERATION_MEAN_PL+MM_FUTURE_CONSIDERATION_MEAN_PL+WTW_FUTURE_CONSIDERATION_MEAN_PL)/7
#Overall Ad exposure
Master_Broker_Rating_df$COMPETITOR_AD_EXPOSURE_MEAN_SUM_COMPOSITE<-(AON_Ad_Exposure_MEAN_SUM_COMPOSITE+AJG_Ad_Exposure_MEAN_SUM_COMPOSITE+BROWN_BROWN_Ad_Exposure_MEAN_SUM_COMPOSITE+HUB_Ad_Exposure_MEAN_SUM_COMPOSITE+LOCKTON_Ad_Exposure_MEAN_SUM_COMPOSITE+MM_Ad_Exposure_MEAN_SUM_COMPOSITE+WTW_Ad_Exposure_MEAN_SUM_COMPOSITE)/7
#CL Ad exposure
Master_Broker_Rating_df$COMPETITOR_AD_EXPOSURE_MEAN_CL<-(AON_Ad_Exposure_MEAN_CL+AJG_Ad_Exposure_MEAN_CL+BROWN_BROWN_Ad_Exposure_MEAN_CL+HUB_Ad_Exposure_MEAN_CL+LOCKTON_Ad_Exposure_MEAN_CL+MM_Ad_Exposure_MEAN_CL+WTW_Ad_Exposure_MEAN_CL)/7
#PL Ad exposure
Master_Broker_Rating_df$COMPETITOR_AD_EXPOSURE_MEAN_PL<-(AON_Ad_Exposure_MEAN_PL+AJG_Ad_Exposure_MEAN_PL+BROWN_BROWN_Ad_Exposure_MEAN_PL+HUB_Ad_Exposure_MEAN_PL+LOCKTON_Ad_Exposure_MEAN_PL+MM_Ad_Exposure_MEAN_PL+WTW_Ad_Exposure_MEAN_PL)/7

#Overall NPS
Master_Broker_Rating_df$COMPETITOR_NPS_MEAN_SUM_COMPOSITE<-(AON_NPS_MEAN_SUM_COMPOSITE+AJG_NPS_MEAN_SUM_COMPOSITE+BROWN_BROWN_NPS_MEAN_SUM_COMPOSITE+HUB_NPS_MEAN_SUM_COMPOSITE+LOCKTON_NPS_MEAN_SUM_COMPOSITE+MM_NPS_MEAN_SUM_COMPOSITE+WTW_NPS_MEAN_SUM_COMPOSITE)/7
#CL NPS
Master_Broker_Rating_df$COMPETITOR_NPS_MEAN_CL<-(AON_NPS_MEAN_CL+AJG_NPS_MEAN_CL+BROWN_BROWN_NPS_MEAN_CL+HUB_NPS_MEAN_CL+LOCKTON_NPS_MEAN_CL+MM_NPS_MEAN_CL+WTW_NPS_MEAN_CL)/7
#PL NPS
Master_Broker_Rating_df$COMPETITOR_NPS_MEAN_PL<-(AON_NPS_MEAN_PL+AJG_NPS_MEAN_PL+BROWN_BROWN_NPS_MEAN_PL+HUB_NPS_MEAN_PL+LOCKTON_NPS_MEAN_PL+MM_NPS_MEAN_PL+WTW_NPS_MEAN_PL)/7
```


Awareness Dataframe

```{r}
Awareness_df<-dplyr::select(Master_Broker_Rating_df,ACRISURE_AWARE_MEAN_COMPOSITE,
  ACRISURE_AWARE_MEAN_CL,ACRISURE_AWARE_MEAN_PL,AWARENESS_COMPETITOR_COMPOSITE,AWARENESS_COMPETITOR_CL,AWARENESS_COMPETITOR_PL)
Awareness_df
```

```{r}
require(reshape)
# Melt the data frame from 1x6 to 6x1
Aware_df_melted <- melt(Awareness_df, variable.name = "variable", value.name = "value")
Aware_df_melted
Aware_df_melted$Line_Type<-c("Composite Sample","Businesses","Individuals","Composite Sample","Businesses","Individuals")
Aware_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark")
Aware_df_melted<-Aware_df_melted[c(1,3,4,2)]
names(Aware_df_melted)[names(Aware_df_melted) == "value"] <- "Awareness"
Aware_df_melted
```


#### Brand Awareness visual

```{r}
#| label: fig-Brand-Awareness-Acrisure-v-Bench-Mark
#| fig-cap: Percentage of respondents who are aware Acrisure by LOB across composites
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p<-create_grouped_bar_plot(
  data = Aware_df_melted, 
  x_var = "Line_Type", 
  y_var = "Awareness", 
  fill_var = "Company", 
  plot_name = "brokerage-brand-awareness-reduced-new-plot", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Self Reported Brand Awareness (%)",
  y_lim = c(0,50),
  legend_position = c(0.95, 0.95),
  decimals = 0 # Set number of decimal places
)
p


# Call the function with horizontal bar plot adjustments
p2<-create_grouped_horizontal_bar_plot(
  data = Aware_df_melted, 
  x_var = "Company", 
  y_var = "Awareness", 
  fill_var = "Line_Type", 
  plot_name = "brokerage-brand-awareness-reduced-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Self Reported Brand Awareness (%)",
  y_lim = c(0, 50),
  legend_position = c(0.95, 0.95),
  decimals = 0 # Set number of decimal places
)
p2
```

@fig-Brand-Awareness-Acrisure-v-Bench-Mark awareness of Acrisure among businesses 33% is higher than awareness of the benchmark. 
Awareness of Acrisure across LOB is 15% . Awareness of Acrisure for individuals is lower 3% compared to the benchmark.

Customer Experience Dataframe

```{r}
Customer_Experience_df<-dplyr::select(Master_Broker_Rating_df,ACRISURE_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,ACRISURE_CUSTOMER_EXPERIENCE_MEAN_CL,ACRISURE_CUSTOMER_EXPERIENCE_MEAN_PL,COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_SUM_COMPOSITE,COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_CL,COMPETITOR_CUSTOMER_EXPERIENCE_MEAN_PL)
Customer_Experience_df
```


```{r}
require(reshape)
# Melt the data frame from 1x6 to 6x1
Customer_Experience_df_melted <- melt(Customer_Experience_df, variable.name = "variable", value.name = "value")
Customer_Experience_df_melted
Customer_Experience_df_melted$Line_Type<-c("Composite Sample","Businesses","Individuals","Composite Sample","Businesses","Individuals")
Customer_Experience_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark")
Customer_Experience_df_melted<-Customer_Experience_df_melted[c(1,3,4,2)]
names(Customer_Experience_df_melted)[names(Customer_Experience_df_melted) == "value"] <- "Customer_Experience"
Customer_Experience_df_melted
```

#### Customer Experience

```{r}
#| label: fig-Brand-Customer-Sat-Acrisure-v-Bench-Mark
#| fig-cap: Customer satisfaction with Acrisure v. Benchmark
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p3<-create_grouped_bar_plot(
  data = Customer_Experience_df_melted, 
  x_var = "Line_Type", 
  y_var = "Customer_Experience", 
  fill_var = "Company", 
  plot_name = "brokerage-brand-current-customer-experience-reduced-plot", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean Customer Experience (1-5)",
  y_lim = c(0,6),
  legend_position = c(1,1),
  decimals = 1 # Set number of decimal places
)
p3


# Call the function with horizontal bar plot adjustments
p4<-create_grouped_horizontal_bar_plot(
  data = Customer_Experience_df_melted, 
  x_var = "Company", 
  y_var = "Customer_Experience", 
  fill_var = "Line_Type", 
  plot_name = "brokerage-brand-current-customer-experience-reduced-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean Customer Experience (1-5)",
  y_lim = c(0, 6),
  legend_position = c(1,1),
  decimals = 1 # Set number of decimal places
)
p4
```

@fig-Brand-Customer-Sat-Acrisure-v-Bench-Mark businesses report high satisfication with their last customer experience with Acrisure.


Future Consideration Dataframe

```{r}
Future_Consider_df<-dplyr::select(Master_Broker_Rating_df,ACRISURE_FUTURE_CONSIDERATION_MEAN_SUM_COMPOSITE,ACRISURE_FUTURE_CONSIDERATION_MEAN_CL,ACRISURE_FUTURE_CONSIDERATION_MEAN_PL,COMPETITOR_FUTURE_CONSIDFERATION_MEAN_SUM_COMPOSITE,COMPETITOR_FUTURE_CONSIDFERATION_MEAN_CL,COMPETITOR_FUTURE_CONSIDFERATION_MEAN_PL)
Future_Consider_df
```

```{r}
require(reshape)
# Melt the data frame from 1x6 to 6x1
Future_Consider_df_melted <- melt(Future_Consider_df, variable.name = "variable", value.name = "value")
Future_Consider_df_melted
Future_Consider_df_melted$Line_Type<-c("Composite Sample","Businesses","Individuals","Composite Sample","Businesses","Individuals")
Future_Consider_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark")
Future_Consider_df_melted<-Future_Consider_df_melted[c(1,3,4,2)]
names(Future_Consider_df_melted)[names(Future_Consider_df_melted) == "value"] <- "Future_Consideration"
Future_Consider_df_melted
```


#### Future Consideration

```{r}
#| label: fig-Brand-Future-Consideration-Acrisure-v-Bench-Mark
#| fig-cap: Future consider  with Acrisure v. Benchmark
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p5<-create_grouped_bar_plot(
  data = Future_Consider_df_melted, 
  x_var = "Line_Type", 
  y_var = "Future_Consideration", 
  fill_var = "Company", 
  plot_name = "brokerage-brand-future-consideration-experience-reduced-plot", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean Future Consideration (1-5)",
  y_lim = c(0,6),
  legend_position = c(1,1),
  decimals = 1
)
p5


# Call the function with horizontal bar plot adjustments
p6<-create_grouped_horizontal_bar_plot(
  data = Future_Consider_df_melted, 
  x_var = "Company", 
  y_var = "Future_Consideration", 
  fill_var = "Line_Type", 
  plot_name = "brokerage-brand-future-consideration-experience-reduced-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean Future Consideration (1-5)",
  y_lim = c(0, 6),
  legend_position = c(1,1),
  decimals = 1
)
p6


```

@fig-Brand-Future-Consideration-Acrisure-v-Bench-Mark businesses and individuals report higher future purchase consideration of Acrisure than benchmark.

#### Ad exposure Dataframe

```{r}
Ad_Exposure_df<-dplyr::select(Master_Broker_Rating_df,  ACRISURE_Ad_Exposure_MEAN_SUM_COMPOSITE,ACRISURE_Ad_Exposure_MEAN_CL,ACRISURE_Ad_Exposure_MEAN_PL,COMPETITOR_AD_EXPOSURE_MEAN_SUM_COMPOSITE,COMPETITOR_AD_EXPOSURE_MEAN_CL,COMPETITOR_AD_EXPOSURE_MEAN_PL)
Ad_Exposure_df
```


```{r}
require(reshape)
# Melt the data frame from 1x6 to 6x1
Ad_Exposure_df_melted <- melt(Ad_Exposure_df, variable.name = "variable", value.name = "value")
Ad_Exposure_df_melted
Ad_Exposure_df_melted$Line_Type<-c("Composite Sample","Businesses","Individuals","Composite Sample","Businesses","Individuals")
Ad_Exposure_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark")
Ad_Exposure_df_melted<-Ad_Exposure_df_melted[c(1,3,4,2)]
names(Ad_Exposure_df_melted)[names(Ad_Exposure_df_melted) == "value"] <- "Ad_Exposure"
Ad_Exposure_df_melted
```

#### Ad Exposure

#### Ad exposure by line type

```{r}
#| label: fig-Brand-Ad-Exposure-Acrisure-v-Bench-Mark
#| fig-cap: Ad Exposure with Acrisure v. Benchmark
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p7<-create_grouped_bar_plot(
  data = Ad_Exposure_df_melted, 
  x_var = "Line_Type", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "brokerage-brand-Ad-Exposure-experience-reduced-plot", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Self Reported Ad Exposure (%)",
  y_lim = c(0,20),
  legend_position = c(1,1),
  decimals = 0
)
p7


# Call the function with horizontal bar plot adjustments
p8<-create_grouped_horizontal_bar_plot(
  data = Ad_Exposure_df_melted, 
  x_var = "Company", 
  y_var = "Ad_Exposure", 
  fill_var = "Line_Type", 
  plot_name = "brokerage-brand-Ad-Exposure-reduced-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Self Reported Ad Exposure (%)",
  y_lim = c(0, 20),
  legend_position = c(1,1),
 decimals = 0
)
p8


```
@fig-Brand-Ad-Exposure-Acrisure-v-Bench-Mark shows that 17% of businesses report seeing an ad for Acrisure vs. 13% compared to the benchmark. 2% of individuals report seeing an ad for Acrisure.



#### NPS

```{r}
require(dplyr)
NPS_df<-dplyr::select(Master_Broker_Rating_df,  ACRISURE_NPS_MEAN_SUM_COMPOSITE,ACRISURE_NPS_MEAN_CL,ACRISURE_NPS_MEAN_PL,COMPETITOR_NPS_MEAN_SUM_COMPOSITE,COMPETITOR_NPS_MEAN_CL,COMPETITOR_NPS_MEAN_PL)
NPS_df
```

```{r}
require(reshape)
# Melt the data frame from 1x6 to 6x1
NPS_df_melted <- melt(NPS_df, variable.name = "variable", value.name = "value")
NPS_df_melted
NPS_df_melted$Line_Type<-c("Composite Sample","Businesses","Individuals","Composite Sample","Businesses","Individuals")
NPS_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark")
NPS_df_melted<-NPS_df_melted[c(1,3,4,2)]
names(NPS_df_melted)[names(NPS_df_melted) == "value"] <- "NPS"
NPS_df_melted
```


#### NPS

```{r}
#| label: fig-Brand-NPS-Acrisure-v-Bench-Mark
#| fig-cap: Net Promoter Score Acrisure v. Benchmark
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p7<-create_grouped_bar_plot(
  data = NPS_df_melted, 
  x_var = "Line_Type", 
  y_var = "NPS", 
  fill_var = "Company", 
  plot_name = "brokerage-NPS-reduced-plot", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean NPS Score (1-5)",
  y_lim = c(0,6),
  legend_position = c(1,1),
  decimals=1
)
p7


# Call the function with horizontal bar plot adjustments
p8<-create_grouped_horizontal_bar_plot(
  data = NPS_df_melted, 
  x_var = "Company", 
  y_var = "NPS", 
  fill_var = "Line_Type", 
  plot_name = "brokerage-NPS-reduced-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Mean NPS Score (1-5)",
  y_lim = c(0, 6),
  legend_position = c(1,1),
  decimals=1
)
p8


```

### PL/CL Acrisure Awareness by Factors

1.  Gender - q11_shared

2.  SES - q4_shared

3.  Age categories

4.  Education - q18_shared

5.  Use Broker

##### Gender Aware Acrisure

```{r}
#| label: tab-Awareness-Acrisure-Gender
#| tab-cap: Acrisure awareness by Gender
#| warning: false
require(vtable)
Aware_Acrisure_By_Gender <- st(BTQ2,vars = c("q11_shared"),group = ("q75_shared_1"), out="csv",file="Aware_Acrisure_By_Gender.csv")
Aware_Acrisure_By_Gender

Gender_Table <- st(BTQ2,vars = c("q11_shared"), out="csv",file="Gender_Table.csv")
Gender_Table
```
@fig-Brand-NPS-Acrisure-v-Bench-Mark of those aware of Acrisure - 153 - 77% are males and 23% are females.

@tab-Awareness-Acrisure-Gender men report greater awareness of Acrisure than do men.

```{r}
BTQ2$q4_shared<-as.factor(BTQ2$q4_shared)
BTQ2$q4_shared<-factor(BTQ2$q4_shared,
                       levels=c("$24,999 or less","$25,000 - $49,999","$50,000 - $74,999","$75,000 – $99,999","$100,000 - $149,999","$150,000 - $199,999","$200,000 - $249,999","$250,000 or more","Prefer not to say"))
```

##### HHI Aware Acrisure

```{r}
#| label: tab-Awareness-Acrisure-HHI
#| tab-cap: Acrisure awareness by HHI
#| warning: false
require(vtable)

Aware_Acrisure_By_SES<- st(BTQ2,vars = c("q4_shared"),group = ("q75_shared_1"), out="csv",file="Aware_Acrisure_By_SES.csv"  )
Aware_Acrisure_By_SES

```

@tab-Awareness-Acrisure-HHI shows that greater than of those aware of Acrisure 24% have an income range `$100,000 - $149,999`.

##### Age categories

```{r}
#| label: tab-Awareness-Acrisure-Age-Category
#| tab-cap: Acrisure awareness by age category
#| warning: false
require(vtable)
Aware_Acrisure_By_Age_Categories<- st(BTQ2,vars = c("age_categories"),group = ("q75_shared_1"), out="csv",file="Aware_Acrisure_By_Age_Categories.csv"  )
Aware_Acrisure_By_Age_Categories
```

@tab-Awareness-Acrisure-Age-Category shows that the greatest proportion of those aware of Acrisure 43% is between 30-40.

##### Education

```{r}
#| label: tab-Awareness-Acrisure-Education-Level
#| tab-cap: Acrisure awareness by education level
#| warning: false
require(vtable)
Aware_Acrisure_By_Education<- st(BTQ2,vars = c("q18_shared"),group = ("q75_shared_1"), out="csv",file="Aware_Acrisure_By_Educatioin.csv"  )
Aware_Acrisure_By_Education
```
@tab-Awareness-Acrisure-Education-Level shows that those with bachelors degrees make up the largest proportion of those aware of Acrisure.


Those with bachelor degrees are most likely to report an awareness of Acrisure.

Use broker

```{r}
#| label: tab-Awareness-Acrisure-Use-Broker
#| tab-cap: Acrisure awareness by use broker
#| warning: false
require(vtable)
require(dplyr)
BTQ2$q94_shared<-as.factor(BTQ2$q94_shared)
BTQ2$q75_shared_1<-as.factor(BTQ2$q75_shared_1)
AWARENESS_ACRISURE_USE_BROKER<-st(BTQ2, vars="q94_shared",group="q75_shared_1",out='csv',file='AWARENESS_ACRISURE_USE_BROKER.csv',group.test = TRUE)
AWARENESS_ACRISURE_USE_BROKER
```


@tab-Awareness-Acrisure-Use-Broker shows that those with a preference to purchase insurance digitally are those most likely to be aware of Acrisure.
 

#### CL Acrisure Awareness by Factors

1.  COM insurance decision maker

2.  EB insurance decision maker

3.  Use Broker

4.  Understand Broker

5.  Net worth

##### COM insurance decision maker

```{r}

BTQ2_CL <- replace_NA_with_value(BTQ2_CL, columns = c("q75_shared_1"), replace_value = 0)
BTQ2_CL$q75_shared_1

BTQ2_CL$q75_shared_1<-factor(BTQ2_CL$q75_shared_1,
                             labels=c("Not Aware of Acrisure","Acrisure"))

```

```{r}
BTQ2_PL <- replace_NA_with_value(BTQ2_PL, columns = c("q75_shared_1"), replace_value = 0)
BTQ2_PL$q75_shared_1

BTQ2_PL$q75_shared_1<-factor(BTQ2_PL$q75_shared_1,
                             labels=c("Not Aware of Acrisure","Acrisure"))
```

```{r}
BTQ2 <- replace_NA_with_value(BTQ2, columns = c("q75_shared_1"), replace_value = 0)
BTQ2$q75_shared_1

BTQ2$q75_shared_1<-factor(BTQ2$q75_shared_1,
                             labels=c("Not Aware of Acrisure","Acrisure"))
```

```{r}
#| label: tab-Awareness-Acrisure-COM-Decision-Maker
#| tab-cap: CL respondents awareness of Acrisure by COM decision maker status
#| warning: false
require(vtable)
require(dplyr)
BTQ2_CL$q8_cl<-as.factor(BTQ2_CL$q8_cl)
BTQ2_CL$q75_shared_1<-as.factor(BTQ2_CL$q75_shared_1)
AWARENESS_ACRISURE_COM_DECISION_MAKER<-st(BTQ2_CL, vars="q8_cl",group="q75_shared_1",out='csv',file='AWARENESS_ACRISURE_COM_DECISION_MAKER.csv',group.test = TRUE)
kable(AWARENESS_ACRISURE_COM_DECISION_MAKER)
```

@tab-Awareness-Acrisure-COM-Decision-Maker shows that 85% of those aware of Acrisure are also COM insurance decision makers.

##### EB insurance decision maker

```{r}
#| label: tab-Awareness-Acrisure-EB-Decision-Maker
#| tab-cap: CL respondents awareness of Acrisure by EB decision maker status
#| warning: false
require(vtable)
require(dplyr)
BTQ2_CL$q7_cl<-as.factor(BTQ2_CL$q7_cl)
BTQ2_CL$q75_shared_1<-as.factor(BTQ2_CL$q75_shared_1)
AWARENESS_ACRISURE_EB_DECISION_MAKER<-st(BTQ2_CL, vars="q7_cl",group="q75_shared_1",out='csv',file='AWARENESS_ACRISURE_EB_DECISION_MAKER.csv',group.test = TRUE)
kable(AWARENESS_ACRISURE_EB_DECISION_MAKER)
```

@tab-Awareness-Acrisure-EB-Decision-Maker shows that 80% of those aware of Acrisure are also EB decision makers.


##### Use Broker

```{r}
#| label: tab-Awareness-Acrisure-Use-Broker
#| tab-cap: Acrisure awareness by use broker
#| warning: false
require(vtable)
require(dplyr)
BTQ2$q94_shared<-as.factor(BTQ2$q94_shared)
BTQ2$q75_shared_1<-as.factor(BTQ2$q75_shared_1)
AWARENESS_ACRISURE_USE_BROKER<-st(BTQ2, vars="q94_shared",group="q75_shared_1",out='csv',file='AWARENESS_ACRISURE_USE_BROKER.csv',group.test = TRUE)
kable(AWARENESS_ACRISURE_USE_BROKER)
```

@tab-Awareness-Acrisure-Use-Broker shows that whether a respondent purchases insurance from a broker or directly from a carrier does not affect their awareness of Acrisure

@tab-Awareness-Acrisure-Understand-Broker shows correctly classifying broker did not affect awareness of Acrisure.

#### Current Customer Status

Q37: Are you currently a customer of any of the brand(s) listed below? Please select all that apply.

If you are not sure, you may proceed without answering this question.

```{r}

#| label: fig-Brand-Current-Customer-Combined
#| fig-cap: Percentage of respondents across line type who are current customers of each insurance brokerage
#| warning: false
require(ggplot2)
BROKERAGE_CURRENT_CUSTOMER_BROKER_DF<-dplyr::select(BTQ2,response_id,q37_shared_1,q37_shared_2,q37_shared_3,q37_shared_4,q37_shared_5,q37_shared_6,q37_shared_7,q37_shared_8)
BROKERAGE_CURRENT_CUSTOMER_BROKER_DF_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_CURRENT_CUSTOMER_BROKER_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
BROKERAGE_CURRENT_CUSTOMER_BROKER_DF_PERC
bar_plot_percent_ordered(BROKERAGE_CURRENT_CUSTOMER_BROKER_DF_PERC, "value", "new_perc", "value", "BROKERAGE_CURRENT_CUSTOMER_BROKER_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.05))  
```

@fig-Brand-Current-Customer-Combined shows that \[7\]% of all respondents report being Acrisure customers. Few respondents report being a current customers of the \[10\]% report being a customer of Aon and \[9\]% report being a customer of Hub International.


##### Brokerage Brands Current Customer Status PL

Lets look at **Personal Lines Respondents** Current Customer Status of the 8 brokerages.

```{r}
#| label: fig-Brokerage-Brand-Current-Customer-Personal-Lines
#| fig-cap: Percentage of personal lines respondents  who are current customers of each insurance brokerage
#| warning: false

BROKERAGE_BRAND_CURRENT_CUSTOMER_PL_DF<-dplyr::select(BTQ2_PL,response_id,q37_shared_1,q37_shared_2,q37_shared_3,q37_shared_4,q37_shared_5,q37_shared_6,q37_shared_7,q37_shared_8)
BROKERAGE_BRAND_CURRENT_CUSTOMER_PL_DF_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_BRAND_CURRENT_CUSTOMER_PL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BROKERAGE_BRAND_CURRENT_CUSTOMER_PL_DF_PERC, "value", "new_perc", "value", "BROKERAGE_BRAND_CURRENT_CUSTOMER_PL_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.02))
```

@fig-Brokerage-Brand-Current-Customer-Personal-Lines shows that less than 1% of personal lines customers report being a current customer of Acrisure.

#### D2C Brands

#### PL

```{r}
#| label: fig-D2C-Brands-Current-Customer-Status-PL
#| fig-cap: Percentage of pl respondents across line type who are customers of target carriers of D2C brands
#| warning: false
D2C_CUSTOMER_BASE_DF_PL<-dplyr::select(BTQ2_PL,response_id,q37_shared_1,q37_shared_9,q37_shared_10,q37_shared_11)
D2C_CUSTOMER_BASE_DF_PL_PERC <- process_data_pipeline_multiple_columns(D2C_CUSTOMER_BASE_DF_PL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(D2C_CUSTOMER_BASE_DF_PL_PERC, "value", "new_perc", "value", "D2C_CUSTOMER_BASE_DF_PL_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```


@fig-D2C-Brands-Current-Customer-Status-PL shows that 3% of all PL respondents report being Lemonade customers.

##### Brokerage Brands Current Customer Status CL

Lets look at **Commercial Lines Respondents** Current Customer Status of the 8 brokerages

```{r}
#| label: fig-Brokerage-Brand-Current-Customer-Commercial-Lines
#| fig-cap: Percentage of commercial lines respondents  who are current customers of each insurance brokerage
#| warning: false

BROKERAGE_BRAND_CURRENT_CUSTOMER_CL_DF<-dplyr::select(BTQ2_CL,response_id,q37_shared_1,q37_shared_2,q37_shared_3,q37_shared_4,q37_shared_5,q37_shared_6,q37_shared_7,q37_shared_8)
BROKERAGE_BRAND_CURRENT_CUSTOMER_CL_DF_PERC <- process_data_pipeline_multiple_columns(BROKERAGE_BRAND_CURRENT_CUSTOMER_CL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BROKERAGE_BRAND_CURRENT_CUSTOMER_CL_DF_PERC, "value", "new_perc", "value", "BROKERAGE_BRAND_CURRENT_CUSTOMER_CL_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.02))
```

@fig-Brokerage-Brand-Current-Customer-Commercial-Lines shows that 16% of CL respondents report being customers of Acrisure.
23% of CL respondents report being a current customer of Aon and 22% of CL respondents report being a current customer of Hub International.


#### D2C Brands

#### CL

```{r}
#| label: fig-D2C-CL-Brands-Current-Customer-Status-Combined
#| fig-cap: Percentage of respondents across line type who are customers of target carriers of D2C brands
#| warning: false
D2C_CUSTOMER_BASE_DF_CL<-dplyr::select(BTQ2_CL,response_id,q37_shared_1,q37_shared_13,q37_shared_14)
D2C_CUSTOMER_BASE_DF_CL_PERC <- process_data_pipeline_multiple_columns(D2C_CUSTOMER_BASE_DF_CL, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(D2C_CUSTOMER_BASE_DF_CL_PERC, "value", "new_perc", "value", "D2C_CUSTOMER_BASE_DF_CL_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```

@fig-D2C-CL-Brands-Current-Customer-Status-Combined shows that 16% of respondents report being current customers of Insureon and 10% report being current customer of Hiscox.


#### Cross tabs Acrisure customer by line type, gender, SES, insurance purchasing method, company size (CL only).

First repalce NA with

```{r}
BTQ2 <- replace_NA_with_value(BTQ2, columns = c("q37_shared_1"), replace_value = 0)
BTQ2_CL <- replace_NA_with_value(BTQ2_CL, columns = c("q37_shared_1"), replace_value = 0)
```

Now lets generate cross-tabs \
##### Line Type

```{r}
#| label: tab-Acrisure-Customer-Line-Type
#| tab-cap: Acrisure customer by line type
#| warning: false
require(vtable)
Acrisure_Customer_By_Line_Type<-st(BTQ2,vars = c("q37_shared_1"), group=("RESPONDENT_TYPE"),out="csv",file="Acrisure_Customer_By_Line_Type.csv")
Acrisure_Customer_By_Line_Type
```


@tab-Acrisure-Customer-Line-Type shows that more CL respondents report being current Acrisure customers

#####Current Customer by Gender.

```{r}
#| label: tab-Acrisure-Customer-Gender
#| tab-cap: Acrisure customer by gender
#| warning: false
require(vtable)
Acrisure_Customer_By_Gender<-st(BTQ2,vars = c("q37_shared_1"), group=("q11_shared"),out="csv",file="Acrisure_Customer_By_Gender.csv")
Acrisure_Customer_By_Gender

```



@tab-Acrisure-Customer-Gender 56 of 68 Acrisure customers are male.

##### Current Customer By HHI.

```{r}
#| label: tab-Acrisure-Customer-HHI
#| tab-cap: Acrisure customer by HHI
#| warning: false
require(vtable)
Acrisure_Customer_By_HHI<-st(BTQ2,vars = c("q37_shared_1"), group=("q4_shared"),out="csv",file="Acrisure_Customer_By_HHI.csv")
Acrisure_Customer_By_HHI

```

@tab-Acrisure-Customer-HHI shows that higher SES individuals report being current customers of Acrisure. 

##### Current Customer By insurance purchasing method

```{r}
#| label: tab-Acrisure-Customer-Insurance-Purchase-Method
#| tab-cap: Acrisure customer by Insurance Purchase Method
#| warning: false
require(vtable)
Acrisure_Customer_By_Insurance_Purchase_Method<-st(BTQ2,vars = c("q94_shared"), group=("q37_shared_1"),out="csv",file="Acrisure_Customer_By_Insurance_Purchase_Method.csv")
Acrisure_Customer_By_Insurance_Purchase_Method

```

@tab-Acrisure-Customer-Insurance-Purchase-Method shows that a plurality of Acrisure customers report always or generally purchasing their insurance digitally

##### Current Customer By Company Size

```{r}
#| label: tab-Acrisure-Customer-Company-Size
#| tab-cap: Acrisure customer by Company Size
#| warning: false
require(vtable)
Acrisure_Customer_Company_Size<-st(BTQ2_CL,vars = c("q37_shared_1"), group=("company_size"),out="csv",file="Acrisure_Customer_Company_Size.csv")
Acrisure_Customer_Company_Size
```

@tab-Acrisure-Customer-Company-Size shows that respondents of companies with staff size between ...

### Current Customer Latest Experiences

Q38: How would you rate your last experience with the following brand(s)? All Firms

```{r}
#| label: fig-Customer-Experience-Firms
#| fig-cap: Current customer firm experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting current customer experience with each brokerage firms
custom_palette=c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Current_Customer_Experience_Firm<-generate_horizontal_bar_chart(
  BTQ2,
  "Current-Customer-Experience-Firm.png",
  question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8","q38_shared_9","q38_shared_10","q38_shared_11","q38_shared_13","q38_shared_14"),
  var_labels = c("Acrisure","Aon","Arthur J. Gallagher","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW","Hippo","Lemonade","Goosehad","Insureon","Hiscox"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
bar_order = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8","q38_shared_9","q38_shared_10","q38_shared_11","q38_shared_12","q38_shared_13","q38_shared_14","q38_shared_15"),
  custom_palette = custom_palette)
Current_Customer_Experience_Firm
```

@fig-Customer-Experience-Firms shows XX% of respondents who are Acrisure customers report an 'Extremely positive' last customer service experience.b

##### Brokerage Brands All Respondents

```{r}
#| label: fig-Brokerage-Customer-Experience
#| fig-cap: Current customer experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting current customer experience with each brokerage
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Current_Customer_Experience_Brokerages<-generate_horizontal_bar_chart(
  BTQ2,
  "Current-Customer-Experience-Brokerages.png",
  question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),
  var_labels = c("Arthur J. Gallagher","Hub International","Lockton Companies","Acrisure","Brown & Brown","Aon","WTW","Marsh McLennan"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
   bar_order = c("q38_shared_3","q38_shared_5","q38_shared_6","q38_shared_1","q38_shared_4","q38_shared_2","q38_shared_8","q38_shared_7"),
  custom_palette = custom_palette
)
Current_Customer_Experience_Brokerages


```

@fig-Brokerage-Customer-Experience shows that % of Acrisure customers report that their last experience with Acrisure was at least very positive



#### Personal Lines Customers All firms

```{r}
#| label: fig-Personal-Lines-Customer-Experience-Firms
#| fig-cap: Personal Lines current customer firm experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting personal lines current customer experience with each brokerage firms
Current_Customer_Experience_Firms_PL<-generate_horizontal_bar_chart(
  BTQ2_PL,
  "Current-Customer-Experience-Firms-PL.png",
  question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8","q38_shared_9","q38_shared_10","q38_shared_11"),
  var_labels = c("Hippo","Lockton Companies","Brown & Brown",
            "Marsh McLennan", "Hub International", "WTW","Lemonade" ,"Aon","Goosehad","Acrisure","Arthur J. Gallagher"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
bar_order = c("q38_shared_9","q38_shared_6","q38_shared_4",
              
          "q38_shared_7",  "q38_shared_5", "q38_shared_8", "q38_shared_10","q38_shared_2","q38_shared_11","q38_shared_1","q38_shared_3"),
  custom_palette = custom_palette
)
Current_Customer_Experience_Firms_PL

```

@fig-Personal-Lines-Customer-Experience-Firms shows that XX% of personal lines respondents who report being an Acrisure customer indicate that their most recent customer service experience was 'Extremely positive.'

#### Personal Lines Brokerages Current Customer Experience

```{r}
#| label: fig-Personal-Lines-Brokerages-Customer-Experience
#| fig-cap: Current customer personal lines experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting personal lines current customer experience with each brokerage
PL_Current_Customer_Experience_Brokerages<-generate_horizontal_bar_chart(
  BTQ2_PL,
  "PL-Current-Customer-Experience-Brokerages.png",
  question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),
  var_labels = c( "Acrisure","WTW","Arthur J. Gallagher","Lockton Companies","Hub International","Aon","Brown & Brown","Marsh McLennan"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
   bar_order = c("q38_shared_1","q38_shared_8","q38_shared_3","q38_shared_6","q38_shared_5","q38_shared_2","q38_shared_4","q38_shared_7"),
  custom_palette = custom_palette
)
PL_Current_Customer_Experience_Brokerages
```


@fig-Personal-Lines-Brokerages-Customer-Experience shows that XX% of personal lines respondents who report being an Acrisure customer indicate that their most recent customer service experience was 'Extremely positive.' XX% of Marsh McLennan and XX% of Brown and Brown customers indicate that their last customer service experience was 'Extremely positive'.

##### Commercial Lines Customers All firms

```{r}
#| label: fig-Commercial-Lines-Customer-Experience-Firms
#| fig-cap: Current commercial lines customer firm experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines current customer experience with each brokerage firms
CL_Current_Customer_Experience_Firms<-generate_horizontal_bar_chart(
  BTQ2_CL,
  "CL-Current-Customer-Experience-Firms.png",
 question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8","q38_shared_13","q38_shared_14"),
  var_labels = c("Marsh McLennan","Insureon","WTW","Arthur J. Gallagher",
                 
                 "Aon","Acrisure","Brown & Brown","Hub International","Hiscox","Lockton Companies"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
bar_order = c("q38_shared_7","q38_shared_13","q38_shared_8","q38_shared_3",
              "q38_shared_2","q38_shared_1","q38_shared_4","q38_shared_5","q38_shared_14","q38_shared_6"),
  custom_palette = custom_palette
)
CL_Current_Customer_Experience_Firms

```

@fig-Commercial-Lines-Customer-Experience-Firms shows customers of rate their experience with Hiscox, WTW, State Farm and Lemonade positively. The figure shows that XX% of commercial lines respondents report that their last customer service experience with Acrisure 'Extremely positive'.

Commercial Lines Brokerages Current Customer Experience

WTW (q38_shared_8) - 45%
Aon (q38_shared_2) - 41%
Marsh McLennan (q38_shared_7) - 38%
Acrisure (q38_shared_1) - 36%
Brown & Brown (q38_shared_4) - 36%
Lockton Companies (q38_shared_6) - 34%
Hub International (q38_shared_5) - 33%
Arthur J. Gallagher (q38_shared_3) - 32%

```{r}
#| label: fig-CL-Customer-Experience-Brokerage
#| fig-cap: Commercial Lines Current customer experience with each brokerage brand
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines current customer experience with each brokerage
CL_Current_Customer_Experience_Brokerages<-generate_horizontal_bar_chart(
  BTQ2_CL,
  "CL-Current-Customer-Experience-Brokerages.png",
    question_names = c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),
  var_labels = c( "Arthur J. Gallagher","Hub International","Lockton Companies","Brown & Brown","Acrisure","Marsh McLennan","Aon","WTW"),
  value_labels = c("Not at all positive", "Somewhat positive", "Positive", "Very positive","Extremely positive"),
   bar_order = c("q38_shared_3","q38_shared_5","q38_shared_6","q38_shared_4","q38_shared_1","q38_shared_7","q38_shared_2","q38_shared_8"),
  custom_palette = custom_palette
)
CL_Current_Customer_Experience_Brokerages
CL_Current_Customer_Experience_Brokerages_data<-CL_Current_Customer_Experience_Brokerages$data
write.csv(CL_Current_Customer_Experience_Brokerages_data,"CL_Current_Customer_Experience_Brokerages_data.csv")
```

@fig-CL-Customer-Experience-Brokerage shows that 36% of commercial lines respondents report that their last customer service experience with Acrisure as at 'Extremely positive'. 45% of CL: respondents rate their last experience with WTW as being 'Extremely positive'.


Now lets generate tables depicting customer ratings.

```{r}
#| label: tab-Customer-Experience-Ratings
#| tab-cap: Customer ratings for 8 national brokerages
#| warning: false
require(vtable)
require(dplyr)
CUSTOMER_SATISIFCATION_RATINGS<-st(BTQ2, vars=c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),out='csv',file='Customer_Satisfaction.csv')
kable(CUSTOMER_SATISIFCATION_RATINGS)
CUSTOMER_SATISIFCATION_RATINGS
```

@tab-Customer-Experience-Ratings shows the satisfaction of the 8 national brokerage.

Now lets generate table depicting customer ratings by line type.

```{r}
#| label: tab-Customer-Experience-Ratings-Line-Type
#| tab-cap: Customer ratings for 8 national brokerages by line type
#| warning: false
require(vtable)
CUSTOMER_SATISIFCATION_RATINGS_LINE_TYPE<-st(BTQ2, vars=c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),group="RESPONDENT_TYPE",out='csv',file='Customer_Satisfaction_Line_Type.csv')
kable(CUSTOMER_SATISIFCATION_RATINGS_LINE_TYPE)

```

@tab-Customer-Experience-Ratings-Line-Type ...

Lets convert the customer's rating of their last experience with the brand into from factor to numeric variables.

```{r}
BTQ2$q38_shared_1_num = as.numeric(as.factor(BTQ2$q38_shared_1))
BTQ2$q38_shared_2_num = as.numeric(as.factor(BTQ2$q38_shared_2))
BTQ2$q38_shared_3_num = as.numeric(as.factor(BTQ2$q38_shared_3))
BTQ2$q38_shared_4_num = as.numeric(as.factor(BTQ2$q38_shared_4))
BTQ2$q38_shared_5_num = as.numeric(as.factor(BTQ2$q38_shared_5))
BTQ2$q38_shared_6_num = as.numeric(as.factor(BTQ2$q38_shared_6))
BTQ2$q38_shared_7_num = as.numeric(as.factor(BTQ2$q38_shared_7))
BTQ2$q38_shared_8_num = as.numeric(as.factor(BTQ2$q38_shared_8))

```

Lets generate descriptive statistics for the positivity of customer's last experience for the 8 national brokerages.

```{r}
#| label: tab-Customer-Experience-Descriptives
#| tab-cap: Descriptive Statistics of Customer Experiences
#| warning: false
require(vtable)
require(dplyr)
CUSTOMER_SATISIFCATION_DESCRIPTIVES<-st(BTQ2, vars=c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),out='csv',file='Customer_Satisfaction_Descriptives.csv')
kable(CUSTOMER_SATISIFCATION_DESCRIPTIVES)

```

@tab-Customer-Experience-Descriptives shows the mean ratings customer experience ratings.

Now lets look at customer satisfaction by line type.

```{r}
#| label: tab-Customer-Experience-Descriptives-By-Line-Type
#| tab-cap: Descriptive Statistics of Customer Experiences by Line Type
#| warning: false
require(vtable)
require(dplyr)
CUSTOMER_SATISIFCATION_LINE_TYPE_DESCRIPTIVES<-st(BTQ2, vars=c("q38_shared_1","q38_shared_2","q38_shared_3","q38_shared_4","q38_shared_5","q38_shared_6","q38_shared_7","q38_shared_8"),group="RESPONDENT_TYPE",out='csv',file='Customer_Satisfaction_Line_Type_Descriptives.csv')
kable(CUSTOMER_SATISIFCATION_LINE_TYPE_DESCRIPTIVES)
CUSTOMER_SATISIFCATION_LINE_TYPE_DESCRIPTIVES
```

@tab-Customer-Experience-Descriptives-By-Line-Type shows that the mean customer experience rating for the 8 national brokerages by line type.

#### Future Consideration

Q40: How likely are you to consider each of the following brand(s) when purchasing insurance in the future? All Firms

```{r}
#| label: fig-Future-Consideration-All-Firms
#| fig-cap: Future consideration of all firms 
#| warning: false
#| fig-alt: Bar-chart depicting future consideration of all firms
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Future_Consideration_All_Firms<-generate_horizontal_bar_chart(
  BTQ2,
  "Future-Consideration-All-Firms.png",
  question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8","q40_shared_9","q40_shared_10","q40_shared_11","q40_shared_13","q40_shared_14"),
  var_labels = c("Aon","Arthur J. Gallagher","Marsh McLennan","Hippo","Lemonade","Goosehad","Insureon","Brown & Brown","Hub International","Acrisure","WTW","Lockton Companies","Hiscox"),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_2", "q40_shared_7","q40_shared_9","q40_shared_10","q40_shared_11","q40_shared_13","q40_shared_4","q40_shared_5","q40_shared_1","q40_shared_8","q40_shared_6","q40_shared_14")
)
Future_Consideration_All_Firms



```

@fig-Future-Consideration-All-Firms 77% of respondents report being at least likely to consider Acrisure in the future.

Lets create interest in cyber by company size graph

```{r}

#| label: fig-Future-Consideration-Acrisure-Company-Size
#| fig-cap: Future consideration of Acrisure by companies under 100 staff size
#| warning: false
require(dplyr)
ACRISURE_FUTURE_CON_DF<-dplyr::select(BTQ2_CL,response_id,company_size,q40_shared_1)
ACRISURE_FUTURE_CON_DF_REDUCED<-subset(ACRISURE_FUTURE_CON_DF, ACRISURE_FUTURE_CON_DF$q40_shared_1!='NA')
ACRISURE_FUTURE_CON_DF_REDUCED
ACRISURE_FUTURE_CON_DF_REDUCED<-subset(ACRISURE_FUTURE_CON_DF, ACRISURE_FUTURE_CON_DF$company_size==c("0-50","51-100"))
ACRISURE_FUTURE_CON_DF_REDUCED$company_size <- droplevels(ACRISURE_FUTURE_CON_DF_REDUCED$company_size)
ACRISURE_FUTURE_CON_DF_REDUCED<-na.omit(ACRISURE_FUTURE_CON_DF_REDUCED)


ACRISURE_FUTURE_CON_DF_REDUCED$q40_shared_1<-as.factor(ACRISURE_FUTURE_CON_DF_REDUCED$q40_shared_1)
ACRISURE_FUTURE_CON_DF_REDUCED<-ACRISURE_FUTURE_CON_DF_REDUCED%>%
                    mutate(q40_shared_1=factor(q40_shared_1, 
                             levels = c('Not likely to consider', 
                                        'Somewhat likely to consider', 
                                        'Likely to consider', 
                                        'Very likely to consider', 
                                        'Extremely likely to consider'),ordered = TRUE))



ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(ACRISURE_FUTURE_CON_DF_REDUCED, id.var = c("response_id","company_size"), default_value = 0, group_column = c("company_size","value"))
ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC$new_perc<-ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC$new_perc*100
ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC


ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC<-ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not likely to consider', 
                                        'Somewhat likely to consider', 
                                        'Likely to consider', 
                                        'Very likely to consider', 
                                        'Extremely likely to consider'),ordered = TRUE))
# Call the function with horizontal bar plot adjustments
create_grouped_horizontal_bar_plot(
  data = ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC, 
  x_var = "company_size", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC", 
  plot_title = "", 
  x_label = "", 
  y_label = "Percent (%)",
  y_lim = c(0, 100),
  legend_position = c(0.95, 0.95),
  decimals = 0
)

require(dplyr)
# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC, 
  x_var = "company_size", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "ACRISURE_FUTURE_CON_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Percent (%)",
  y_lim = c(0,100),
  legend_position = c(1, 1),
  decimals=0
)
```

@fig-Future-Consideration-Acrisure-Company-Size shows the 61% of decision makers of companies under 50 staff and 73% of comapnies between 51-100 staff report bing at least very likely to consider doing business with Acrisure



**Brokerages:** How likely are you to consider each of the following brand(s) when purchasing insurance in the future?


```{r}
#| label: fig-Future-Consideration-Brokerages
#| fig-cap: Future consideration of national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting future consideration of 8 national brokerages
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Future_Consideration_Brokerages<-generate_horizontal_bar_chart(
  BTQ2,
  "Future-Consideration-Brokerages.png",
 question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8"),
  var_labels = c("Marsh McLennan","Aon","Arthur J. Gallagher","WTW","Hub International","Brown & Brown","Lockton Companies","Acrisure"),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_7","q40_shared_2","q40_shared_3","q40_shared_8","q40_shared_5","q40_shared_4","q40_shared_6","q40_shared_1")
)
Future_Consideration_Brokerages



Future_Consideration_Brokerages
Future_Consideration_Brokerages_data<-Future_Consideration_Brokerages$data
write.csv(Future_Consideration_Brokerages_data,"Future_Consideration_Brokerages_data.csv")
```

@fig-Future-Consideration-Brokerages shows that XX% of respondents report being at least somewhat likely to consider Acrisure in the future. Moreover Acrisure receives the highest percentage of Extremely likely ratings at XX%.

#### Future consideration all firms personal lines

```{r}
#| label: fig-Future-Consideration-All-Firms-PL
#| fig-cap: Personal lines future consideration of all firms 
#| warning: false
#| fig-alt: Bar-chart depicting pl respondents future consideration of all firms
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Future_Consideration_All_Firms_PL<-generate_horizontal_bar_chart(
  BTQ2_PL,
  "Future-Consideration-All-Firms-PL.png",
  question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8","q40_shared_9","q40_shared_10","q40_shared_11"),
  var_labels = c("Hippo","Lemonade","Marsh McLennan","Hub International","Arthur J. Gallagher","Aon","WTW","Goosehead","Brown & Brown","Acrisure","Lockton Companies"),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_9","q40_shared_12","q40_shared_10","q40_shared_7","q40_shared_5","q40_shared_3","q40_shared_2","q40_shared_8","q40_shared_11","q40_shared_4","q40_shared_1","q40_shared_6")
)
Future_Consideration_All_Firms_PL

```

#### Future consideration brokerages personal lines



Brown & Brown (q40_shared_4)
Acrisure (q40_shared_1)
Lockton Companies (q40_shared_6)
Arthur J. Gallagher (q40_shared_3)
Hub International (q40_shared_5)
WTW (q40_shared_8)
Aon (q40_shared_2)
Marsh McLennan (q40_shared_7)


```{r}
#| label: fig-Future-Consideration-Brokerages-Personal-Lines-Customers
#| fig-cap: Personal lines respondents future consideration of national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting personal lines customers future consideration of 8 national brokerages
Future_Consideration_Brokerages_PL<-generate_horizontal_bar_chart(
  BTQ2_PL,
  "PL-Future-Consideration-Brokerages.png",
 question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8"),
  var_labels = c('Lockton Companies','Hub International','Marsh McLennan','Aon','Acrisure','Arthur J. Gallagher','WTW','Brown & Brown'),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_6","q40_shared_5","q40_shared_7", "q40_shared_2","q40_shared_1","q40_shared_3","q40_shared_8","q40_shared_4")
)
Future_Consideration_Brokerages_PL

Future_Consideration_Brokerages_PL
Future_Consideration_Brokerages_PL_data<-Future_Consideration_Brokerages_PL$data
write.csv(Future_Consideration_Brokerages_PL_data,"Future_Consideration_Brokerages_PL_data.csv")
```

@fig-Future-Consideration-Brokerages-Personal-Lines-Customers shows that a high percentage of Personal Lines respondents commonly select 'Not at all likely to consider'. 17% of respondents aware of Acrisure indicate that they are at least very likely to consider us for future business.

#### Future consideration brokerages commercial lines.

```{r}
#| label: fig-Future-Consideration-Brokerages-Commercial-Lines-Customers
#| fig-cap: Commercial lines respondents future consideration of national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines customers future consideration of 8 national brokerages

Future_Consideration_Brokerages_CL<-generate_horizontal_bar_chart(
  BTQ2_CL,
  "CL-Future-Consideration-Brokerages.png",
 question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8"),
  var_labels = c('Brown & Brown', 'WTW', 'Hub International','Lockton Companies','Arthur J. Gallagher & Co.','Acrisure','Marsh McLennan', 'Aon'),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_4","q40_shared_8","q40_shared_5","q40_shared_6","q40_shared_3","q40_shared_1","q40_shared_7","q40_shared_2")
)
Future_Consideration_Brokerages_CL

Future_Consideration_Brokerages_CL
Future_Consideration_Brokerages_CL_data<-Future_Consideration_Brokerages_CL$data
write.csv(Future_Consideration_Brokerages_CL_data,"Future_Consideration_Brokerages_CL_data.csv")
```

@fig-Future-Consideration-Brokerages-Commercial-Lines-Customers shows that 69% of respondents aware of Acrisure is at least very likely to consider Acrisure in the future.

@fig-Future-Consideration-Brokerages-Commercial-Lines-Customers shows that CL respondents are more likely to consider insurance brokers for future business. Of those respondents aware of Acrisure XX% of respondents are at least "Likely to consider" Acrisure for future business.

```{r}
#| label: fig-Future-Consideration-All-Firms-CL
#| fig-cap: Future consideration of all firms CL
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines future consideration of all firms
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Future_Consideration_All_Firms_CL<-generate_horizontal_bar_chart(
  BTQ2_CL,
  "Future-Consideration-All-Firms-CL.png",
  question_names = c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5", "q40_shared_6","q40_shared_7","q40_shared_8","q40_shared_13","q40_shared_14"),
  var_labels = c("Marsh McLennan","Insureon","Arthur J. Gallagher","Brown & Brown","Acrisure","Aon","Hub International","WTW","Lockton Companies","Hiscox"),
  value_labels = c("Not likely to consider", "Somewhat likely to consider", "Likely to consider", "Very likely to consider","Extremely likely to consider"),
  custom_palette = custom_palette,
bar_order = c("q40_shared_7","q40_shared_13","q40_shared_3","q40_shared_4","q40_shared_1","q40_shared_2","q40_shared_5","q40_shared_8","q40_shared_6","q40_shared_14")
)
Future_Consideration_All_Firms_CL
```

Now lets generate descriptive statistics of respondents future considerations.

```{r}
#| label: tab-Brokerage-Future-Consideration
#| tab-cap: Descriptive Statistics for respondents future consideration of 8 national brokerages
#| warning: false
require(vtable)
FUTURE_CONSIDERATION_BROKERAGES<-st(BTQ2, vars=c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5","q40_shared_6","q40_shared_7","q40_shared_8"),out='csv',file='Future_Consideration_Brokerages_Descriptives.csv')
kable(FUTURE_CONSIDERATION_BROKERAGES)
FUTURE_CONSIDERATION_BROKERAGES
```

@tab-Brokerage-Future-Consideration shows that

##### Cross tab acrisure future consideration by demographic and firmographics by line type, gender, SES, insurance purchasing method, company size (CL only).

q40_shared_1: Now lets generate cross-tabs

##### Future consider - Line Type

```{r}
#| label: tab-Acrisure-Future-Consideration-Line-Type
#| tab-cap: Acrisure future consideration by line type
#| warning: false
Acrisure_Future_Consideration_By_Line_Type<-st(BTQ2,vars = c("q40_shared_1"), group=("RESPONDENT_TYPE"),out="csv",file="Acrisure_Future_Consideration_By_Line_Type.csv")
Acrisure_Future_Consideration_By_Line_Type
```

@Acrisure-Future-Consideration-Line-Type shows that more CL report higher levels of future consideration than do PL respondents.

-  17% of PL respondent aware of Acrisure report being at least very likely to consider 
-  69% of CL respondent aware of Acrisure report being at least very likely to consider 

##### Acrisure future consideration by Gender.

```{r}
#| label: tab-Acrisure-Future-Consideration-Gender
#| tab-cap: Acrisure futire consideration by gender
#| warning: false
require(vtable)
Acrisure_Future_Consideration_By_Gender<-st(BTQ2,vars = c("q40_shared_1"), group=("q11_shared"),out="csv",file="Acrisure_Future_Consideration_By_Gender.csv")
Acrisure_Future_Consideration_By_Gender

```

@tab-Acrisure-Future-Consideration-Gender women report that they are more likely to consider Acrisure for future business than men

##### Acrisure future consideration By HHI.

```{r}
#| label: tab-Acrisure-Future-Consideration-HHI
#| tab-cap: Acrisure future consideration by HHI
#| warning: false
require(vtable)
Acrisure_Future_consideration_By_HHI<-st(BTQ2,vars = c("q40_shared_1"), group=("q4_shared"),out="csv",file="Acrisure_Future_consideration_By_HHI.csv")
Acrisure_Future_consideration_By_HHI
```

@tab-Acrisure-Future-Consideration-HHI shows that higher SES individuals report being current customers of Acrisure (\$200,000 - \$249,999)

##### Future Consideration By insurance purchasing method

```{r}
#| label: tab-Acrisure-Future-Consideration-Insurance-Purchase-Method
#| tab-cap: Acrisure future consideration by Insurance Purchase Method
#| warning: false
require(vtable)
Acrisure_Future_Consideration_By_Insurance_Purchase_Method<-st(BTQ2,vars = c("q94_shared"), group=("q40_shared_1"),out="csv",file="Acrisure_Future_Consideration_By_Insurance_Purchase_Method.csv")
Acrisure_Future_Consideration_By_Insurance_Purchase_Method

```

@tab-Acrisure-Future-Consideration-Insurance-Purchase-Method 39% of respondents who generally purchase insurance through a broker report being 'Extremely likely to consider' Acrisure for future business.

##### Future consideration By Company Size

```{r}
#| label: tab-Acrisure-Future-Consideration-Company-Size
#| tab-cap: Acrisure customer by Future Consideration
#| warning: false
require(vtable)
Acrisure_Future_Consideration_Company_Size<-st(BTQ2_CL,vars = c("q40_shared_1"), group=("company_size"),out="csv",file="Acrisure_Future_Consideration_Company_Size.csv")
Acrisure_Future_Consideration_Company_Size
```

@tab-Acrisure-Customer-Company-Size shows that respondents of companies with staff size between 251 and 450 were most likely to report being Acrisure customers.

Now lets generate descriptive statistics of respondents future considerations by line type.

```{r}
#| label: tab-Brokerage-Future-Consideration-Line-Type
#| tab-cap: Descriptive Statistics for respondents future consideration of 8 national brokerages by line type.
#| warning: false
require(vtable)
FUTURE_CONSIDERATION_BROKERAGES_LINE_TYPE<-st(BTQ2, vars=c("q40_shared_1","q40_shared_2","q40_shared_3","q40_shared_4","q40_shared_5","q40_shared_6","q40_shared_7","q40_shared_8"),group="RESPONDENT_TYPE",out='csv',file='Future_Consideration_Brokerages_Line_Type_Descriptives.csv')
kable(FUTURE_CONSIDERATION_BROKERAGES_LINE_TYPE)

```

@tab-Brokerage-Future-Consideration-Line-Type shows that 34% of CL and 18% of PL indicate that they are 'Extremely likely' to consider Acrisure for future business.

Now lets convert the future consideration variables to numeric variables.

```{r}
BTQ2$q40_shared_1_num = as.numeric(as.factor(BTQ2$q40_shared_1))
BTQ2$q40_shared_2_num = as.numeric(as.factor(BTQ2$q40_shared_2))
BTQ2$q40_shared_3_num = as.numeric(as.factor(BTQ2$q40_shared_3))
BTQ2$q40_shared_4_num = as.numeric(as.factor(BTQ2$q40_shared_4))
BTQ2$q40_shared_5_num = as.numeric(as.factor(BTQ2$q40_shared_5))
BTQ2$q40_shared_6_num = as.numeric(as.factor(BTQ2$q40_shared_6))
BTQ2$q40_shared_7_num = as.numeric(as.factor(BTQ2$q40_shared_7))
BTQ2$q40_shared_8_num = as.numeric(as.factor(BTQ2$q40_shared_8))
BTQ2$q40_shared_9_num = as.numeric(as.factor(BTQ2$q40_shared_9))
BTQ2$q40_shared_10_num = as.numeric(as.factor(BTQ2$q40_shared_10))
BTQ2$q40_shared_11_num = as.numeric(as.factor(BTQ2$q40_shared_11))
BTQ2$q40_shared_13_num = as.numeric(as.factor(BTQ2$q40_shared_13))
```

Now lets generate tables showing respondents future consideration of the 8 national brokerages.

```{r}
#| label: tab-Future-Consideration-Descriptives
#| tab-cap: Descriptive Statistics for respondents future consideration
#| warning: false
require(vtable)
require(dplyr)
FUTURE_CONSIDERATION_DESCRIPTIVES<-st(BTQ2, vars=c("q40_shared_1_num", "q40_shared_2_num", "q40_shared_3_num", "q40_shared_4_num", "q40_shared_5_num", "q40_shared_6_num", "q40_shared_7_num", "q40_shared_8_num","q40_shared_9_num","q40_shared_10_num","q40_shared_11_num","q40_shared_12_num","q40_shared_13_num"),out='csv',file='Future_Consideration_Descriptives.csv')
kable(FUTURE_CONSIDERATION_DESCRIPTIVES)
FUTURE_CONSIDERATION_DESCRIPTIVES
```

@tab-Future-Consideration-Descriptives shows that mean future consideration of Acrisure sits at XXXXX indicating that individuals aware of Acrisure report being likely to consider them for future business. This

```{r}
#| label: tab-Future-Consideration-Line-Type-Descriptives
#| tab-cap: Descriptive Statistics for respondents future consideration by line type
#| warning: false
require(vtable)
require(dplyr)
FUTURE_CONSIDERATION_LINE_TYPE_DESCRIPTIVES<-st(BTQ2, vars=c("q40_shared_1_num", "q40_shared_2_num", "q40_shared_3_num", "q40_shared_4_num", "q40_shared_5_num", "q40_shared_6_num", "q40_shared_7_num", "q40_shared_8_num","q40_shared_9_num","q40_shared_10_num","q40_shared_11_num","q40_shared_12_num","q40_shared_13_num"),group="RESPONDENT_TYPE",out='csv',file='Future_Consideration_Line_Type_Descriptives.csv')
kable(FUTURE_CONSIDERATION_LINE_TYPE_DESCRIPTIVES)
FUTURE_CONSIDERATION_LINE_TYPE_DESCRIPTIVES
```

@tab-Future-Consideration-Line-Type-Descriptives shows future consideration descriptives by line type. It shows that the future consideration of Acrisure is similar across line type.

#### Ad Recall:

```{r}
# Specify the columns
columns <- c("q41_shared_1", "q41_shared_2", "q41_shared_3","q41_shared_4","q41_shared_5","q41_shared_6","q41_shared_7","q41_shared_8")

# Subset the dataframe to include only the specified columns
subset_df <-BTQ2[, columns]

# Check if all values in each row of the subset dataframe are NA
na_rows <- apply(subset_df, 1, function(row) all(is.na(row)))

# Count the number of rows where all specified columns are NA
count <- sum(na_rows)

# Print the result
print(count)


```

Q41: Do you recall seeing an ad for any of the following brands in the past 30 days? Please select all that apply.\
\
If you have not seen ads from these brands, or are unsure, you may proceed without answering this question.

##### All respondents Ad Exposure

```{r}
#| label: fig-Saw-Ad
#| fig-cap: Respondennts Ad exposure 
#| warning: false
#| fig-alt: Bar-chart depicting respondents self-report ad exposure 
SAW_AD_DF<-dplyr::select(BTQ2,response_id, q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8)
SAW_AD_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
SAW_AD_DF_PERC
bar_plot_percent_ordered(SAW_AD_DF_PERC, "value", "new_perc", "value", "Respondent-Ad-Exposure.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.1))
```

@fig-Saw-Ad shows that 8% of respondents report seeing an ad for Acrisure.

```{r}
#| label: fig-Saw-Ad-D2C
#| fig-cap: Respondennts Ad exposure to D2C brands
#| warning: false
#| fig-alt: Bar-chart depicting respondents self-report ad exposure 
SAW_AD_D2C_DF<-dplyr::select(BTQ2_PL,response_id,q41_shared_1,q41_shared_9,q41_shared_10,q41_shared_11,q41_shared_13,q41_shared_14)
SAW_AD_D2C_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_D2C_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(SAW_AD_D2C_DF_PERC, "value", "new_perc", "value", "SAW_AD_D2C_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.25))
```

@fig-Saw-Ad-D2C shows that 22% of respondents report seeing an ad for Lemonade

```{r}
#| label: tab-Saw-Ad
#| tab-cap: Respondennts Ad exposure 
#| warning: false
SAW_AD_DF<-dplyr::select(BTQ2,response_id, q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8,q41_shared_9,q41_shared_10,q41_shared_11,q41_shared_13,q41_shared_14)
SAW_AD_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))                                  
SAW_AD_DF_PERC<-mutate(SAW_AD_DF_PERC,Percent=round(new_perc*100))
SAW_AD_DF_PERC
SAW_AD_DF_PERC<-kable(SAW_AD_DF_PERC[-c(3,4)])
SAW_AD_DF_PERC
```

@tab-Saw-Ad shows that X% of respondents have seen an add for Acrisure. XX% respondents report seeing an ad for SoFi.

#### Personal Lines Respondents Ad Exposure

```{r}
#| label: fig-Saw-Ad-Personal-Lines-PL
#| fig-cap: Personal Lines Respondentes Ad exposure  
#| warning: false
#| fig-alt: Bar-chart depicting personal lines respondents self-report ad exposure 
SAW_AD_PL_DF<-dplyr::select(BTQ2_PL,response_id,q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8,q41_shared_9,q41_shared_10,q41_shared_11)
SAW_AD_PL_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_PL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(SAW_AD_PL_DF_PERC, "value", "new_perc", "value", "Personal-Lines-Ad-Exposure.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```

@fig-Saw-Ad-Personal-Lines shows that the most common firms that personal lines respondents report seeing an ad for were SoFi and Lemonade.

#### Commercial Lines Respondents Ads Exposure.

```{r}
#| label: fig-Saw-Ad-Commercial-Lines
#| fig-cap: Commerical Lines Respondentes Ad exposure  
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines respondents self-report ad exposure 
SAW_AD_CL_DF<-dplyr::select(BTQ2_CL,response_id, q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8,q41_shared_13,q41_shared_14)
SAW_AD_CL_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_CL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(SAW_AD_CL_DF_PERC, "value", "new_perc", "value", "Commercial-Lines-Ad-Exposure.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = 
 c(0,0.3))
```

@fig-Saw-Ad-Commercial-Lines shows that the most common firms that personal lines respondents report seeing an ad for were SoFi and Lemonade.

```{r}
#| label: tab-Saw-Ad-CL
#| tab-cap: Respondennts Ad exposure commercial lines
#| warning: false

SAW_AD_CL_DF<-dplyr::select(BTQ2_CL,response_id, q41_shared_1,q41_shared_2,q41_shared_3,q41_shared_4,q41_shared_5,q41_shared_6,q41_shared_7,q41_shared_8,q41_shared_9,q41_shared_10,q41_shared_11,q41_shared_13,q41_shared_14)
SAW_AD_CL_DF_PERC <- process_data_pipeline_multiple_columns(SAW_AD_CL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))                                
SAW_AD_CL_DF_PERC<-mutate(SAW_AD_CL_DF_PERC,Percent=round(new_perc*100))
SAW_AD_CL_DF_PERC
SAW_AD_CL_DF_PERC<-kable(SAW_AD_CL_DF_PERC[-c(3,4)])
SAW_AD_CL_DF_PERC



```

@tab-Saw-Ad-CL shows that 7% of commercial lines respondents report seeing an ad for Acrisure. 28% of CL respondents report seeing an ad for SoFi.

Who is seeing ads for Acrisure

\##### Acrisure Ad exposure - Line Type

```{r}
BTQ2 <- replace_NA_with_value(BTQ2, columns = c("q41_shared_1"), replace_value = 0)
BTQ2_CL <- replace_NA_with_value(BTQ2_CL, columns = c("q41_shared_1"), replace_value = 0)
BTQ2_PL <- replace_NA_with_value(BTQ2_PL, columns = c("q41_shared_1"), replace_value = 0)
```

#### Acrisure ad exposure by line type

```{r}
#| label: tab-Acrisure-Ad-exposure-Line-Type
#| tab-cap: Acrisure ad exposure by line type
#| warning: false

Acrisure_Ad_Exposure_By_Line_Type<-st(BTQ2,vars = c("q41_shared_1"), group=("RESPONDENT_TYPE"),out="csv",file="Acrisure_Ad_Exposure_By_Line_Type.csv")
Acrisure_Ad_Exposure_By_Line_Type
```

@tab-Acrisure-Ad-exposure-Line-Type a higher percentage of CL respondents report seeing an ad for Acrisure in the last 30 days indicating that our ads may be effectivey targetting business decision makers.

##### Acrisure ad exposure by Gender.

```{r}
#| label: tab-Acrisure-Ad-Exposure-Gender
#| tab-cap: Acrisure futire consideration by gender
#| warning: false
require(vtable)
Acrisure_Ad_Exposure_By_Gender<-st(BTQ2,vars = c("q41_shared_1"), group=("q11_shared"),out="csv",file="Acrisure_Ad_Exposure_By_Gender.csv")
Acrisure_Ad_Exposure_By_Gender
```

@tab-Acrisure-Ad-Exposure-Gender men are more likely to report seeing an ad for Acrisure than are women.

##### Acrisure ad exposure by age group

```{r}
#| label: tab-Acrisure-Ad-Exposure-Age-Group
#| tab-cap: Acrisure futire consideration by age group
#| warning: false
require(vtable)
Acrisure_Ad_Exposure_By_Age_Category<-st(BTQ2,vars = c("q41_shared_1"), group=("age_categories"),out="csv",file="Acrisure_Ad_Exposure_By_Age_Category.csv")
Acrisure_Ad_Exposure_By_Age_Category

```

```{r}
require(vtable)
Age_Category<-st(BTQ2,vars = c("age_categories"), out="csv",file="Age_Category.csv")
Age_Category

```

#### Ad Source - All Firms

Q42: Of the brands that you saw an ad for, where did you see the ad for the brand? Select all that apply. If you don't remember then select 'Don't remember'. 

```{r}
#| label: fig-Respondent-All-Firms-Ad-Type
#| fig-cap: Respondents report seeing ad source for all firms
#| warning: false
#| fig-alt: Bar-chart showing where respondents report seeing Ads for all firm
library(tidyverse)
library(scales)
AD_TYPE<-dplyr::select(BTQ2,response_id, q42_shared_1_2,q42_shared_1_3, q42_shared_1_4       ,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10)

AD_TYPE_LONG<- to_long(AD_TYPE, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
AD_TYPE_LONG = na.omit(AD_TYPE_LONG)
unique(AD_TYPE_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
AD_TYPE_LONG <- AD_TYPE_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q42_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q42_shared_2_") ~ "Aon",
    str_detect(Variable, "q42_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q42_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q42_shared_5_") ~ "Hub International",
    str_detect(Variable, "q42_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q42_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q42_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




AD_TYPE_LONG<-AD_TYPE_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
AD_TYPE_LONG_PERC <- calculate_count_and_percentage(AD_TYPE_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
AD_TYPE_LONG_PERC<-dplyr::mutate(AD_TYPE_LONG_PERC,Percent=round(perc*100),0)

AD_TYPE_LONG_PERC<-as.data.frame(AD_TYPE_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(AD_TYPE_LONG_PERC)<-new_names
AD_TYPE_LONG_PERC<-AD_TYPE_LONG_PERC[-c(6)]



AD_TYPE_LONG_PERC_GOOD_LABELS <- AD_TYPE_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))






AD_TYPE_LONG_PERC_GOOD_LABELS %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Video (e.g., Live TV, streaming)", "Social media (e.g., Facebook)", "Audio (e.g., podcasts, radio)", "Online Ads (e.g., banner ads on webpages or via email)","Static Visual (e.g., billboards, print ads)","Mobile Ads (e.g., in-app ads, mobile web ads)","Direct Mail (e.g., physical mailers, postcards)","Don't remember"),
                    values = c(
                      "Video (e.g., Live TV, streaming)" = "#36749D",
                      "Social media (e.g., Facebook)" = "#85714D",
                      "Audio (e.g., podcasts, radio)"="#DDE9F0",
                      "Online Ads (e.g., banner ads on webpages or via email)" =  "#95174C",
                      "Static Visual (e.g., billboards, print ads)" = "#002A4E",
                      "Mobile Ads (e.g., in-app ads, mobile web ads)" ="#004F51", 
                      "Direct Mail (e.g., physical mailers, postcards)"="#000000",
                      "Don't remember"="#d3d3d3"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Advertising-Source-All-Firm.png", height = 4.5, width = 10, dpi = 1800)
write.csv(AD_TYPE_LONG_PERC_GOOD_LABELS,'AD_TYPE_LONG_PERC_GOOD_LABELS.csv')
```

@fig-Respondent-All-Firms-Ad-Type shows all respondents source of ads for all firms. Respondents report seeing Acrisure ads via: online searches, social media, emails, and streaming services.

```{r}
BTQ2_CL$q42_shared_1_1<-as.factor(BTQ2_CL$q42_shared_1_1)
BTQ2_CL$q42_shared_1_2<-as.factor(BTQ2_CL$q42_shared_1_2)
BTQ2_CL$q42_shared_1_3<-as.factor(BTQ2_CL$q42_shared_1_3)
BTQ2_CL$q42_shared_1_4<-as.factor(BTQ2_CL$q42_shared_1_4)
BTQ2_CL$q42_shared_1_5<-as.factor(BTQ2_CL$q42_shared_1_5)
BTQ2_CL$q42_shared_1_6<-as.factor(BTQ2_CL$q42_shared_1_6)
BTQ2_CL$q42_shared_1_7<-as.factor(BTQ2_CL$q42_shared_1_7)
BTQ2_CL$q42_shared_1_8<-as.factor(BTQ2_CL$q42_shared_1_8)
BTQ2_CL$q42_shared_1_9<-as.factor(BTQ2_CL$q42_shared_1_9)
BTQ2_CL$q42_shared_1_10<-as.factor(BTQ2_CL$q42_shared_1_10)
```

```{r}
require(vtable)
AD_TYPE_STATE<-st(BTQ2,vars=c("q42_shared_1_1","q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7","q42_shared_1_8","q42_shared_1_9","q42_shared_1_10"),group="q16_shared",out="csv",file="AD_TYPE_STATE.csv")   
AD_TYPE_STATE

AD_TYPE_STATE_CL<-st(BTQ2_CL,vars=c("q42_shared_1_1","q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7","q42_shared_1_8","q42_shared_1_9","q42_shared_1_10"),group="q16_shared",out="csv",file="AD_TYPE_STATE_CL.csv")   
AD_TYPE_STATE_CL

AD_TYPE_STATE_PL<-st(BTQ2_PL,vars=c("q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7","q42_shared_1_8","q42_shared_1_9","q42_shared_1_10"),group="q16_shared",out="csv",file="AD_TYPE_STATE_PL.csv")   
AD_TYPE_STATE_PL
```

```{r}
#| label: tab-Respondent-All-Firms-Ad-Type
#| tab-cap: Respondents report seeing ad source for all firms
#| warning: false
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_LONG_PERC_GOOD_LABELS[-c(3,4,6)]
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_LONG_PERC_GOOD_LABELS_TAB)
```

```{r}
#| label: tab-Respondent-All-Firms-Ad-Type
#| tab-cap: Respondents report seeing ad source for all firms
#| warning: false
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_LONG_PERC_GOOD_LABELS[-c(3,4,6)]
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_LONG_PERC_GOOD_LABELS_TAB)
```

#### Variable creationm

```{r}
AD_TYPE<-dplyr::select(BTQ2,response_id,q42_shared_1_2,q42_shared_1_3, q42_shared_1_4,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10)

AD_TYPE




AD_TYPE<- replace_NA_with_value(AD_TYPE, columns = c("q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7",
"q42_shared_1_8","q42_shared_1_9","q42_shared_1_10","q42_shared_2_1","q42_shared_2_2","q42_shared_2_3",
"q42_shared_2_4","q42_shared_2_5","q42_shared_2_6","q42_shared_2_7","q42_shared_2_8","q42_shared_2_9","q42_shared_2_10",
"q42_shared_3_1","q42_shared_3_2","q42_shared_3_3","q42_shared_3_4","q42_shared_3_5","q42_shared_3_6","q42_shared_3_7",
"q42_shared_3_8","q42_shared_3_9","q42_shared_3_10",
"q42_shared_4_1","q42_shared_4_2","q42_shared_4_3","q42_shared_4_4","q42_shared_4_5",
"q42_shared_4_6","q42_shared_4_7","q42_shared_4_8","q42_shared_4_9","q42_shared_4_10",
"q42_shared_5_1","q42_shared_5_2","q42_shared_5_3","q42_shared_5_4","q42_shared_5_5",
"q42_shared_5_6","q42_shared_5_7","q42_shared_5_8","q42_shared_5_9","q42_shared_5_10",
"q42_shared_6_1","q42_shared_6_2","q42_shared_6_3","q42_shared_6_4","q42_shared_6_5",
"q42_shared_6_6","q42_shared_6_7","q42_shared_6_8","q42_shared_6_9","q42_shared_6_10",
"q42_shared_7_1","q42_shared_7_2","q42_shared_7_3","q42_shared_7_4","q42_shared_7_5",
"q42_shared_7_6","q42_shared_7_7","q42_shared_7_8","q42_shared_7_9","q42_shared_7_10",
"q42_shared_8_1","q42_shared_8_2","q42_shared_8_3","q42_shared_8_4","q42_shared_8_5",
"q42_shared_8_6","q42_shared_8_7","q42_shared_8_8","q42_shared_8_9","q42_shared_8_10"
), replace_value = 0)
AD_TYPE
AD_TYPE_numeric<- lapply(AD_TYPE, function(x) as.numeric(as.factor(x)))
AD_TYPE_numeric<-data.frame(AD_TYPE_numeric) 
View(AD_TYPE_numeric)


library(dplyr)

# Vector of the specified variables
variables <- c("q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7",
"q42_shared_1_8","q42_shared_1_9","q42_shared_1_10","q42_shared_2_1","q42_shared_2_2","q42_shared_2_3",
"q42_shared_2_4","q42_shared_2_5","q42_shared_2_6","q42_shared_2_7","q42_shared_2_8","q42_shared_2_9","q42_shared_2_10",
"q42_shared_3_1","q42_shared_3_2","q42_shared_3_3","q42_shared_3_4","q42_shared_3_5","q42_shared_3_6","q42_shared_3_7",
"q42_shared_3_8","q42_shared_3_9","q42_shared_3_10",
"q42_shared_4_1","q42_shared_4_2","q42_shared_4_3","q42_shared_4_4","q42_shared_4_5",
"q42_shared_4_6","q42_shared_4_7","q42_shared_4_8","q42_shared_4_9","q42_shared_4_10",
"q42_shared_5_1","q42_shared_5_2","q42_shared_5_3","q42_shared_5_4","q42_shared_5_5",
"q42_shared_5_6","q42_shared_5_7","q42_shared_5_8","q42_shared_5_9","q42_shared_5_10",
"q42_shared_6_1","q42_shared_6_2","q42_shared_6_3","q42_shared_6_4","q42_shared_6_5",
"q42_shared_6_6","q42_shared_6_7","q42_shared_6_8","q42_shared_6_9","q42_shared_6_10",
"q42_shared_7_1","q42_shared_7_2","q42_shared_7_3","q42_shared_7_4","q42_shared_7_5",
"q42_shared_7_6","q42_shared_7_7","q42_shared_7_8","q42_shared_7_9","q42_shared_7_10",
"q42_shared_8_1","q42_shared_8_2","q42_shared_8_3","q42_shared_8_4","q42_shared_8_5",
"q42_shared_8_6","q42_shared_8_7","q42_shared_8_8","q42_shared_8_9","q42_shared_8_10")

# Assuming `df` is your data frame with the relevant columns
AD_TYPE_numeric <- AD_TYPE_numeric %>%
  mutate(across(all_of(variables), ~ case_when(
    . == 1 ~ 0,
    . == 2 ~ 1,
    TRUE ~ .  # Keep other values unchanged
  )))

# View the updated data frame
head(AD_TYPE_numeric)


#Compute Variables
AD_TYPE_numeric$ACRISURE_AD_LIVE_TV<-AD_TYPE_numeric$q42_shared_1_1
AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA<-AD_TYPE_numeric$q42_shared_1_2
AD_TYPE_numeric$ACRISURE_AD_AUDIO<-AD_TYPE_numeric$q42_shared_1_3
AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD<-AD_TYPE_numeric$q42_shared_1_4
AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS<-AD_TYPE_numeric$q42_shared_1_5
AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS<-AD_TYPE_numeric$q42_shared_1_6
AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL<-AD_TYPE_numeric$q42_shared_1_7
AD_TYPE_numeric$ACRISURE_AD_STREAMING<-AD_TYPE_numeric$q42_shared_1_8
AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP<-AD_TYPE_numeric$q42_shared_1_9
AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP<-AD_TYPE_numeric$q42_shared_1_10

#Compute Benchmark
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_LIVE_TV=(q42_shared_2_1+q42_shared_3_1+q42_shared_4_1+q42_shared_5_1+q42_shared_6_1+q42_shared_7_1)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_SOCIAL_MEDIA=(q42_shared_2_2+q42_shared_3_2+q42_shared_4_2+q42_shared_5_2+q42_shared_6_2+q42_shared_7_2)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_AUDIO=(q42_shared_2_3+q42_shared_3_3+q42_shared_4_3+q42_shared_5_3+q42_shared_6_3+q42_shared_7_3)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_ONLINE_ADS=(q42_shared_2_4+q42_shared_3_4+q42_shared_4_4+q42_shared_5_4+q42_shared_6_4+q42_shared_7_4)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STATIC_VISUAL=(q42_shared_2_5+q42_shared_3_5+q42_shared_4_5+q42_shared_5_5+q42_shared_6_5+q42_shared_7_5)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_MOBILE_ADS=(q42_shared_2_6+q42_shared_3_6+q42_shared_4_6+q42_shared_5_6+q42_shared_6_6+q42_shared_7_6)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_DIRECT_MAIL=(q42_shared_2_7+q42_shared_3_7+q42_shared_4_7+q42_shared_5_7+q42_shared_6_7+q42_shared_7_7)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STREAMING=(q42_shared_2_8+q42_shared_3_8+q42_shared_4_8+q42_shared_5_8+q42_shared_6_8+q42_shared_7_8)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_VENUE_SPONSORSHIP=(q42_shared_2_9+q42_shared_3_9+q42_shared_4_9+q42_shared_5_9+q42_shared_6_9+q42_shared_7_9)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10)/6)
AD_TYPE_numeric


AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_LIVE_TV_SUM=(q42_shared_2_1+q42_shared_3_1+q42_shared_4_1+q42_shared_5_1+q42_shared_6_1+q42_shared_7_1))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_SOCIAL_MEDIA_SUM=(q42_shared_2_2+q42_shared_3_2+q42_shared_4_2+q42_shared_5_2+q42_shared_6_2+q42_shared_7_2))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_AUDIO_SUM=(q42_shared_2_3+q42_shared_3_3+q42_shared_4_3+q42_shared_5_3+q42_shared_6_3+q42_shared_7_3))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_ONLINE_ADS_SUM=(q42_shared_2_4+q42_shared_3_4+q42_shared_4_4+q42_shared_5_4+q42_shared_6_4+q42_shared_7_4))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STATIC_VISUAL_SUM=(q42_shared_2_5+q42_shared_3_5+q42_shared_4_5+q42_shared_5_5+q42_shared_6_5+q42_shared_7_5))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_MOBILE_ADS_SUM=(q42_shared_2_6+q42_shared_3_6+q42_shared_4_6+q42_shared_5_6+q42_shared_6_6+q42_shared_7_6))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_DIRECT_MAIL_SUM=(q42_shared_2_7+q42_shared_3_7+q42_shared_4_7+q42_shared_5_7+q42_shared_6_7+q42_shared_7_7))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STREAMING_SUM=(q42_shared_2_8+q42_shared_3_8+q42_shared_4_8+q42_shared_5_8+q42_shared_6_8+q42_shared_7_8))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=(q42_shared_2_9+q42_shared_3_9+q42_shared_4_9+q42_shared_5_9+q42_shared_6_9+q42_shared_7_9))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10))
AD_TYPE_numeric
```

Now lets create a dataframe



```{r}
#Compute mean Acrisure
require(dplyr)
ACRISURE_AD_LIVE_TV_mean=mean(AD_TYPE_numeric$ACRISURE_AD_LIVE_TV)
ACRISURE_AD_SOCIAL_MEDIA_mean=mean(AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA)
ACRISURE_AD_AUDIO_mean=mean(AD_TYPE_numeric$ACRISURE_AD_AUDIO)
ACRISURE_AD_ONLINE_AD_mean=mean(AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD)
ACRISURE_AD_STATIC_VISUALS_mean=mean(AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS)
ACRISURE_AD_MOBILE_ADS_mean=mean(AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS)
ACRISURE_AD_DIRECT_MAIL_mean=mean(AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL)
ACRISURE_AD_STREAMING_mean=mean(AD_TYPE_numeric$ACRISURE_AD_STREAMING)
ACRISURE_AD_VENUE_SPONSORSHIP_mean=mean(AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP)
ACRISURE_AD_EVENT_SPONSORSHIP_mean=mean(AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10)/6)
#Compute mean Benchmark

BENCH_MARK_LIVE_TV_mean=mean(AD_TYPE_numeric$BENCH_MARK_LIVE_TV)
BENCH_MARK_AD_SOCIAL_MEDIA_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_SOCIAL_MEDIA)
BENCH_MARK_AD_AUDIO_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_AUDIO)
BENCH_MARK_AD_ONLINE_AD_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_ONLINE_ADS)
BENCH_MARK_AD_STATIC_VISUALS_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_STATIC_VISUAL)
BENCH_MARK_AD_DIRECT_MAIL_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_DIRECT_MAIL)
BENCH_MARK_AD_STREAMING_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_STREAMING)
BENCH_MARK_AD_VENUE_SPONSORSHIP_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP)
BENCH_MARK_AD_EVENT_SPONSORSHIP_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP)


#Compute sum Acrisure
require(dplyr)
ACRISURE_AD_LIVE_TV_sum=sum(AD_TYPE_numeric$ACRISURE_AD_LIVE_TV)
ACRISURE_AD_SOCIAL_MEDIA_sum=sum(AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA)
ACRISURE_AD_AUDIO_sum=sum(AD_TYPE_numeric$ACRISURE_AD_AUDIO)
ACRISURE_AD_ONLINE_AD_sum=sum(AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD)
ACRISURE_AD_STATIC_VISUALS_sum=sum(AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS)
ACRISURE_AD_MOBILE_ADS_sum=sum(AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS)
ACRISURE_AD_DIRECT_MAIL_sum=sum(AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL)
ACRISURE_AD_STREAMING_sum=sum(AD_TYPE_numeric$ACRISURE_AD_STREAMING)
ACRISURE_AD_VENUE_SPONSORSHIP_sum=sum(AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP)
ACRISURE_AD_EVENT_SPONSORSHIP_sum=sum(AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP)


ACRISURE_AD_TOTAL_sum = ACRISURE_AD_LIVE_TV_sum+
ACRISURE_AD_SOCIAL_MEDIA_sum+
ACRISURE_AD_AUDIO_sum+
ACRISURE_AD_ONLINE_AD_sum+
ACRISURE_AD_STATIC_VISUALS_sum+
ACRISURE_AD_MOBILE_ADS_sum+
ACRISURE_AD_DIRECT_MAIL_sum+
ACRISURE_AD_STREAMING_sum+
ACRISURE_AD_VENUE_SPONSORSHIP_sum+
ACRISURE_AD_EVENT_SPONSORSHIP_sum


#Compute sum Benchmark
BENCH_MARK_AD_LIVE_TV_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_LIVE_TV_SUM)
BENCH_MARK_AD_LIVE_TV_SUM=BENCH_MARK_AD_LIVE_TV_SUM/7
BENCH_MARK_AD_SOCIAL_MEDIA_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_SOCIAL_MEDIA_SUM)
BENCH_MARK_AD_SOCIAL_MEDIA_SUM=BENCH_MARK_AD_SOCIAL_MEDIA_SUM/7
BENCH_MARK_AD_AUDIO_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_AUDIO_SUM)
BENCH_MARK_AD_AUDIO_SUM=BENCH_MARK_AD_AUDIO_SUM/7
BENCH_MARK_AD_ONLINE_AD_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_ONLINE_ADS_SUM)
BENCH_MARK_AD_ONLINE_AD_SUM=BENCH_MARK_AD_ONLINE_AD_SUM/7
BENCH_MARK_AD_STATIC_VISUAL_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_STATIC_VISUAL_SUM)
BENCH_MARK_AD_STATIC_VISUAL_SUM=BENCH_MARK_AD_STATIC_VISUAL_SUM/7
BENCH_MARK_AD_MOBILE_ADS_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_MOBILE_ADS_SUM)
BENCH_MARK_AD_MOBILE_ADS_SUM=BENCH_MARK_AD_MOBILE_ADS_SUM/7
BENCH_MARK_AD_DIRECT_MAIL_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_DIRECT_MAIL_SUM)
BENCH_MARK_AD_DIRECT_MAIL_SUM=BENCH_MARK_AD_DIRECT_MAIL_SUM/7
BENCH_MARK_AD_STREAMING_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_STREAMING_SUM)
BENCH_MARK_AD_STREAMING_SUM=BENCH_MARK_AD_STREAMING_SUM/7
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM)
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM/7
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM)
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM/7

BENCH_MARK_AD_TOTAL_sum = BENCH_MARK_AD_LIVE_TV_SUM+
BENCH_MARK_AD_SOCIAL_MEDIA_SUM+
BENCH_MARK_AD_AUDIO_SUM+
BENCH_MARK_AD_ONLINE_AD_SUM+
BENCH_MARK_AD_STATIC_VISUAL_SUM+
BENCH_MARK_AD_MOBILE_ADS_SUM+
BENCH_MARK_AD_DIRECT_MAIL_SUM+
BENCH_MARK_AD_STREAMING_SUM+
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM+
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM+
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM
  
```

```{r}

MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK<-data.frame(ACRISURE_AD_LIVE_TV_sum,
ACRISURE_AD_SOCIAL_MEDIA_sum,
ACRISURE_AD_AUDIO_sum,
ACRISURE_AD_ONLINE_AD_sum,
ACRISURE_AD_STATIC_VISUALS_sum,
ACRISURE_AD_MOBILE_ADS_sum,
ACRISURE_AD_DIRECT_MAIL_sum,
ACRISURE_AD_STREAMING_sum,
ACRISURE_AD_VENUE_SPONSORSHIP_sum,
ACRISURE_AD_EVENT_SPONSORSHIP_sum,

BENCH_MARK_AD_LIVE_TV_SUM,
BENCH_MARK_AD_SOCIAL_MEDIA_SUM,
BENCH_MARK_AD_AUDIO_SUM,
BENCH_MARK_AD_ONLINE_AD_SUM,
BENCH_MARK_AD_STATIC_VISUAL_SUM,
BENCH_MARK_AD_MOBILE_ADS_SUM,
BENCH_MARK_AD_DIRECT_MAIL_SUM,
BENCH_MARK_AD_STREAMING_SUM,
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM,
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM)

MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK
```

```{r}
##### Adveristing

require(reshape)
# Melt the data frame from 1x6 to 6x1
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted <- melt(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK, variable.name = "variable", value.name = "value")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Advertisement<-c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)",
                                                                   "Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"
                                                       
                                                                   )
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted[c(1,3,4,2)]
names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted)[names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted) == "value"] <- "Ad_Exposure"
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure

MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
```

#### Ad source acrisure v. bench mark.

```{r}
#| label: fig-Ad-exposure-source-acrisure-v-benchmark
#| fig-cap: Percentage of respondents who report seeing an Acrisure compared to benchmark
#| warning: false
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p14<-create_grouped_bar_plot(
  data = MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,40),
  legend_position = c(1,1),
  decimals=0
)
p14


# Call the function with horizontal bar plot adjustments
p15<-create_grouped_horizontal_bar_plot(
  data = MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-2", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,40),
  legend_position = c(1,1),
  decimals=0
)
p15

```
@fig-Ad-exposure-source-acrisure-v-benchmark ahoqa that most respondents report seeing an Acrisure ad via - online ads (27%), streaming (29%) and social media (22%)


Lets compute percentages

```{r}
#Acrisure

ACRISURE_AD_LIVE_TV_perc=(ACRISURE_AD_LIVE_TV_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_SOCIAL_MEDIA_perc=(ACRISURE_AD_SOCIAL_MEDIA_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_AUDIO_perc=(ACRISURE_AD_AUDIO_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_ONLINE_perc=(ACRISURE_AD_ONLINE_AD_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_STATIC_VISUALS_perc=(ACRISURE_AD_STATIC_VISUALS_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_MOBILE_ADS_perc=(ACRISURE_AD_MOBILE_ADS_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_DIRECT_MAIL_perc=(ACRISURE_AD_DIRECT_MAIL_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_STREAMING_perc=(ACRISURE_AD_STREAMING_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_VENUE_SPONSORSHIP_perc=(ACRISURE_AD_VENUE_SPONSORSHIP_sum/ACRISURE_AD_TOTAL_sum)*100
ACRISURE_AD_EVENT_SPONSORSHIP_perc=(ACRISURE_AD_EVENT_SPONSORSHIP_sum/ACRISURE_AD_TOTAL_sum)*100

#Benchmark

BENCH_MARK_AD_LIVE_TV_perc=(BENCH_MARK_AD_LIVE_TV_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_SOCIAL_MEDIA_perc=(BENCH_MARK_AD_SOCIAL_MEDIA_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_AUDIO_perc=(BENCH_MARK_AD_AUDIO_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_ONLINE_AD_perc=(BENCH_MARK_AD_ONLINE_AD_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_STATIC_VISUAL_SUM_perc=(BENCH_MARK_AD_STATIC_VISUAL_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_MOBILE_ADS_perc=(BENCH_MARK_AD_MOBILE_ADS_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_DIRECT_MAIL_perc=(BENCH_MARK_AD_DIRECT_MAIL_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_STREAMING_perc=(BENCH_MARK_AD_STREAMING_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_VENUE_SPONSORSHIP_perc=(BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM/BENCH_MARK_AD_TOTAL_sum)*100
BENCH_MARK_AD_EVENT_SPONSORHSIP_perc=(BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM/BENCH_MARK_AD_TOTAL_sum)*100

```

```{r}
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK<-data.frame(
ACRISURE_AD_LIVE_TV_perc,
ACRISURE_AD_SOCIAL_MEDIA_perc,
ACRISURE_AD_AUDIO_perc,
ACRISURE_AD_ONLINE_perc,
ACRISURE_AD_STATIC_VISUALS_perc,
ACRISURE_AD_MOBILE_ADS_perc,
ACRISURE_AD_DIRECT_MAIL_perc,
ACRISURE_AD_STREAMING_perc,
ACRISURE_AD_VENUE_SPONSORSHIP_perc,
ACRISURE_AD_EVENT_SPONSORSHIP_perc,
BENCH_MARK_AD_LIVE_TV_perc,
BENCH_MARK_AD_SOCIAL_MEDIA_perc,
BENCH_MARK_AD_AUDIO_perc,
BENCH_MARK_AD_ONLINE_AD_perc,
BENCH_MARK_AD_STATIC_VISUAL_SUM_perc,
BENCH_MARK_AD_MOBILE_ADS_perc,
BENCH_MARK_AD_DIRECT_MAIL_perc,
BENCH_MARK_AD_STREAMING_perc,
BENCH_MARK_AD_VENUE_SPONSORSHIP_perc,
BENCH_MARK_AD_EVENT_SPONSORHSIP_perc) 
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK
```

```{r}
##### Adveristing

require(reshape)
# Melt the data frame from 1x6 to 6x1
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted <- melt(PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK, variable.name = "variable", value.name = "value")
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Advertisement<-c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)",
                                                                   "Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"
                                                       
                                                                  )
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark")
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted<-PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted[c(1,3,4,2)]
names(PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted)[names(PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted) == "value"] <- "Ad_Exposure"
PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
```

#### Ad source acrisure abd bench mark

```{r}
#| label: fig-Ad-exposure-source-acrisure-v-benchmark-2
#| fig-cap: Percentage of respondents who report seeing an Acrisure compared to benchmark
#| warning: false
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p22<-create_grouped_bar_plot(
  data = PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-3", 
  plot_title = "", 
  x_label = "Ad Channel", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p22


# Call the function with horizontal bar plot adjustments
p23<-create_grouped_horizontal_bar_plot(
  data = PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-4", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p23

```


@fig-Ad-exposure-source-acrisure-v-benchmark-2 shows that the most common ad source those who saw an ad fore Acrisure reprot are - online ads (15%), and streaming (16%).

OLD ---### Variable creation

```{r}
AD_TYPE<-dplyr::select(BTQ2,response_id,q42_shared_1_2,q42_shared_1_3, q42_shared_1_4,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10)

AD_TYPE




AD_TYPE<- replace_NA_with_value(AD_TYPE, columns = c("q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7",
"q42_shared_1_8","q42_shared_1_9","q42_shared_1_10","q42_shared_2_1","q42_shared_2_2","q42_shared_2_3",
"q42_shared_2_4","q42_shared_2_5","q42_shared_2_6","q42_shared_2_7","q42_shared_2_8","q42_shared_2_9","q42_shared_2_10",
"q42_shared_3_1","q42_shared_3_2","q42_shared_3_3","q42_shared_3_4","q42_shared_3_5","q42_shared_3_6","q42_shared_3_7",
"q42_shared_3_8","q42_shared_3_9","q42_shared_3_10",
"q42_shared_4_1","q42_shared_4_2","q42_shared_4_3","q42_shared_4_4","q42_shared_4_5",
"q42_shared_4_6","q42_shared_4_7","q42_shared_4_8","q42_shared_4_9","q42_shared_4_10",
"q42_shared_5_1","q42_shared_5_2","q42_shared_5_3","q42_shared_5_4","q42_shared_5_5",
"q42_shared_5_6","q42_shared_5_7","q42_shared_5_8","q42_shared_5_9","q42_shared_5_10",
"q42_shared_6_1","q42_shared_6_2","q42_shared_6_3","q42_shared_6_4","q42_shared_6_5",
"q42_shared_6_6","q42_shared_6_7","q42_shared_6_8","q42_shared_6_9","q42_shared_6_10",
"q42_shared_7_1","q42_shared_7_2","q42_shared_7_3","q42_shared_7_4","q42_shared_7_5",
"q42_shared_7_6","q42_shared_7_7","q42_shared_7_8","q42_shared_7_9","q42_shared_7_10",
"q42_shared_8_1","q42_shared_8_2","q42_shared_8_3","q42_shared_8_4","q42_shared_8_5",
"q42_shared_8_6","q42_shared_8_7","q42_shared_8_8","q42_shared_8_9","q42_shared_8_10"
), replace_value = 0)
AD_TYPE
AD_TYPE_numeric<- lapply(AD_TYPE, function(x) as.numeric(as.factor(x)))
AD_TYPE_numeric<-data.frame(AD_TYPE_numeric) 
View(AD_TYPE_numeric)


library(dplyr)

# Vector of the specified variables
variables <- c("q42_shared_1_2","q42_shared_1_3","q42_shared_1_4","q42_shared_1_5","q42_shared_1_6","q42_shared_1_7",
"q42_shared_1_8","q42_shared_1_9","q42_shared_1_10","q42_shared_2_1","q42_shared_2_2","q42_shared_2_3",
"q42_shared_2_4","q42_shared_2_5","q42_shared_2_6","q42_shared_2_7","q42_shared_2_8","q42_shared_2_9","q42_shared_2_10",
"q42_shared_3_1","q42_shared_3_2","q42_shared_3_3","q42_shared_3_4","q42_shared_3_5","q42_shared_3_6","q42_shared_3_7",
"q42_shared_3_8","q42_shared_3_9","q42_shared_3_10",
"q42_shared_4_1","q42_shared_4_2","q42_shared_4_3","q42_shared_4_4","q42_shared_4_5",
"q42_shared_4_6","q42_shared_4_7","q42_shared_4_8","q42_shared_4_9","q42_shared_4_10",
"q42_shared_5_1","q42_shared_5_2","q42_shared_5_3","q42_shared_5_4","q42_shared_5_5",
"q42_shared_5_6","q42_shared_5_7","q42_shared_5_8","q42_shared_5_9","q42_shared_5_10",
"q42_shared_6_1","q42_shared_6_2","q42_shared_6_3","q42_shared_6_4","q42_shared_6_5",
"q42_shared_6_6","q42_shared_6_7","q42_shared_6_8","q42_shared_6_9","q42_shared_6_10",
"q42_shared_7_1","q42_shared_7_2","q42_shared_7_3","q42_shared_7_4","q42_shared_7_5",
"q42_shared_7_6","q42_shared_7_7","q42_shared_7_8","q42_shared_7_9","q42_shared_7_10",
"q42_shared_8_1","q42_shared_8_2","q42_shared_8_3","q42_shared_8_4","q42_shared_8_5",
"q42_shared_8_6","q42_shared_8_7","q42_shared_8_8","q42_shared_8_9","q42_shared_8_10")

# Assuming `df` is your data frame with the relevant columns
AD_TYPE_numeric <- AD_TYPE_numeric %>%
  mutate(across(all_of(variables), ~ case_when(
    . == 1 ~ 0,
    . == 2 ~ 1,
    TRUE ~ .  # Keep other values unchanged
  )))

# View the updated data frame
head(AD_TYPE_numeric)




#Compute Variables
AD_TYPE_numeric$ACRISURE_AD_LIVE_TV<-AD_TYPE_numeric$q42_shared_1_1
AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA<-AD_TYPE_numeric$q42_shared_1_2
AD_TYPE_numeric$ACRISURE_AD_AUDIO<-AD_TYPE_numeric$q42_shared_1_3
AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD<-AD_TYPE_numeric$q42_shared_1_4
AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS<-AD_TYPE_numeric$q42_shared_1_5
AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS<-AD_TYPE_numeric$q42_shared_1_6
AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL<-AD_TYPE_numeric$q42_shared_1_7
AD_TYPE_numeric$ACRISURE_AD_STREAMING<-AD_TYPE_numeric$q42_shared_1_8
AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP<-AD_TYPE_numeric$q42_shared_1_9
AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP<-AD_TYPE_numeric$q42_shared_1_10

#Compute Benchmark
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_LIVE_TV=(q42_shared_2_1+q42_shared_3_1+q42_shared_4_1+q42_shared_5_1+q42_shared_6_1+q42_shared_7_1)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_SOCIAL_MEDIA=(q42_shared_2_2+q42_shared_3_2+q42_shared_4_2+q42_shared_5_2+q42_shared_6_2+q42_shared_7_2)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_AUDIO=(q42_shared_2_3+q42_shared_3_3+q42_shared_4_3+q42_shared_5_3+q42_shared_6_3+q42_shared_7_3)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_ONLINE_ADS=(q42_shared_2_4+q42_shared_3_4+q42_shared_4_4+q42_shared_5_4+q42_shared_6_4+q42_shared_7_4)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STATIC_VISUAL=(q42_shared_2_5+q42_shared_3_5+q42_shared_4_5+q42_shared_5_5+q42_shared_6_5+q42_shared_7_5)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_MOBILE_ADS=(q42_shared_2_6+q42_shared_3_6+q42_shared_4_6+q42_shared_5_6+q42_shared_6_6+q42_shared_7_6)/6)
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_DIRECT_MAIL=(q42_shared_2_7+q42_shared_3_7+q42_shared_4_7+q42_shared_5_7+q42_shared_6_7+q42_shared_7_7)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STREAMING=(q42_shared_2_8+q42_shared_3_8+q42_shared_4_8+q42_shared_5_8+q42_shared_6_8+q42_shared_7_8)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_VENUE_SPONSORSHIP=(q42_shared_2_9+q42_shared_3_9+q42_shared_4_9+q42_shared_5_9+q42_shared_6_9+q42_shared_7_9)/6)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10)/6)
AD_TYPE_numeric


AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_LIVE_TV_SUM=(q42_shared_2_1+q42_shared_3_1+q42_shared_4_1+q42_shared_5_1+q42_shared_6_1+q42_shared_7_1))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_SOCIAL_MEDIA_SUM=(q42_shared_2_2+q42_shared_3_2+q42_shared_4_2+q42_shared_5_2+q42_shared_6_2+q42_shared_7_2))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_AUDIO_SUM=(q42_shared_2_3+q42_shared_3_3+q42_shared_4_3+q42_shared_5_3+q42_shared_6_3+q42_shared_7_3))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_ONLINE_ADS_SUM=(q42_shared_2_4+q42_shared_3_4+q42_shared_4_4+q42_shared_5_4+q42_shared_6_4+q42_shared_7_4))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STATIC_VISUAL_SUM=(q42_shared_2_5+q42_shared_3_5+q42_shared_4_5+q42_shared_5_5+q42_shared_6_5+q42_shared_7_5))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_MOBILE_ADS_SUM=(q42_shared_2_6+q42_shared_3_6+q42_shared_4_6+q42_shared_5_6+q42_shared_6_6+q42_shared_7_6))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_DIRECT_MAIL_SUM=(q42_shared_2_7+q42_shared_3_7+q42_shared_4_7+q42_shared_5_7+q42_shared_6_7+q42_shared_7_7))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_STREAMING_SUM=(q42_shared_2_8+q42_shared_3_8+q42_shared_4_8+q42_shared_5_8+q42_shared_6_8+q42_shared_7_8))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=(q42_shared_2_9+q42_shared_3_9+q42_shared_4_9+q42_shared_5_9+q42_shared_6_9+q42_shared_7_9))
AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10))
AD_TYPE_numeric
```

Now lets create a dataframe

```{r}



require(dplyr)
ACRISURE_AD_LIVE_TV_mean=mean(AD_TYPE_numeric$ACRISURE_AD_LIVE_TV)
ACRISURE_AD_SOCIAL_MEDIA_mean=mean(AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA)
ACRISURE_AD_AUDIO_mean=mean(AD_TYPE_numeric$ACRISURE_AD_AUDIO)
ACRISURE_AD_ONLINE_AD_mean=mean(AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD)
ACRISURE_AD_STATIC_VISUALS_mean=mean(AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS)
ACRISURE_AD_MOBILE_ADS_mean=mean(AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS)
ACRISURE_AD_DIRECT_MAIL_mean=mean(AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL)
ACRISURE_AD_STREAMING_mean=mean(AD_TYPE_numeric$ACRISURE_AD_STREAMING)
ACRISURE_AD_VENUE_SPONSORSHIP_mean=mean(AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP)
ACRISURE_AD_EVENT_SPONSORSHIP_mean=mean(AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP)

AD_TYPE_numeric<-mutate(AD_TYPE_numeric,BENCH_MARK_AD_EVENT_SPONSORHSIP=(q42_shared_2_10+q42_shared_3_10+q42_shared_4_10+q42_shared_5_10+q42_shared_6_10+q42_shared_7_10)/6)
#Compute mean Benchmark

BENCH_MARK_LIVE_TV_mean=mean(AD_TYPE_numeric$BENCH_MARK_LIVE_TV)
BENCH_MARK_AD_SOCIAL_MEDIA_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_SOCIAL_MEDIA)
BENCH_MARK_AD_AUDIO_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_AUDIO)
BENCH_MARK_AD_ONLINE_AD_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_ONLINE_ADS)
BENCH_MARK_AD_STATIC_VISUALS_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_STATIC_VISUAL)
BENCH_MARK_AD_DIRECT_MAIL_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_DIRECT_MAIL)
BENCH_MARK_AD_STREAMING_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_STREAMING)
BENCH_MARK_AD_VENUE_SPONSORSHIP_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP)
BENCH_MARK_AD_EVENT_SPONSORSHIP_mean=mean(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP)


#Compute sum Acrisure
require(dplyr)
ACRISURE_AD_LIVE_TV_sum=sum(AD_TYPE_numeric$ACRISURE_AD_LIVE_TV)
ACRISURE_AD_SOCIAL_MEDIA_sum=sum(AD_TYPE_numeric$ACRISURE_AD_SOCIAL_MEDIA)
ACRISURE_AD_AUDIO_sum=sum(AD_TYPE_numeric$ACRISURE_AD_AUDIO)
ACRISURE_AD_ONLINE_AD_sum=sum(AD_TYPE_numeric$ACRISURE_AD_ONLINE_AD)
ACRISURE_AD_STATIC_VISUALS_sum=sum(AD_TYPE_numeric$ACRISURE_AD_STATIC_VISUALS)
ACRISURE_AD_MOBILE_ADS_sum=sum(AD_TYPE_numeric$ACRISURE_AD_MOBILE_ADS)
ACRISURE_AD_DIRECT_MAIL_sum=sum(AD_TYPE_numeric$ACRISURE_AD_DIRECT_MAIL)
ACRISURE_AD_STREAMING_sum=sum(AD_TYPE_numeric$ACRISURE_AD_STREAMING)
ACRISURE_AD_VENUE_SPONSORSHIP_sum=sum(AD_TYPE_numeric$ACRISURE_AD_VENUE_SPONSORSHIP)
ACRISURE_AD_EVENT_SPONSORSHIP_sum=sum(AD_TYPE_numeric$ACRISURE_AD_EVENT_SPONSORSHIP)


ACRISURE_AD_TOTAL_sum = ACRISURE_AD_LIVE_TV_sum+
ACRISURE_AD_SOCIAL_MEDIA_sum+
ACRISURE_AD_AUDIO_sum+
ACRISURE_AD_ONLINE_AD_sum+
ACRISURE_AD_STATIC_VISUALS_sum+
ACRISURE_AD_MOBILE_ADS_sum+
ACRISURE_AD_DIRECT_MAIL_sum+
ACRISURE_AD_STREAMING_sum+
ACRISURE_AD_VENUE_SPONSORSHIP_sum+
ACRISURE_AD_EVENT_SPONSORSHIP_sum


#Compute sum Benchmark
BENCH_MARK_AD_LIVE_TV_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_LIVE_TV_SUM)
BENCH_MARK_AD_LIVE_TV_SUM=BENCH_MARK_AD_LIVE_TV_SUM/7
BENCH_MARK_AD_SOCIAL_MEDIA_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_SOCIAL_MEDIA_SUM)
BENCH_MARK_AD_SOCIAL_MEDIA_SUM=BENCH_MARK_AD_SOCIAL_MEDIA_SUM/7
BENCH_MARK_AD_AUDIO_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_AUDIO_SUM)
BENCH_MARK_AD_AUDIO_SUM=BENCH_MARK_AD_AUDIO_SUM/7
BENCH_MARK_AD_ONLINE_AD_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_ONLINE_ADS_SUM)
BENCH_MARK_AD_ONLINE_AD_SUM=BENCH_MARK_AD_ONLINE_AD_SUM/7

BENCH_MARK_AD_STATIC_VISUAL_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_STATIC_VISUAL_SUM)
BENCH_MARK_AD_STATIC_VISUAL_SUM=BENCH_MARK_AD_STATIC_VISUAL_SUM/7
BENCH_MARK_AD_MOBILE_ADS_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_MOBILE_ADS_SUM)
BENCH_MARK_AD_MOBILE_ADS_SUM=BENCH_MARK_AD_MOBILE_ADS_SUM/7
BENCH_MARK_AD_DIRECT_MAIL_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_DIRECT_MAIL_SUM)
BENCH_MARK_AD_DIRECT_MAIL_SUM=BENCH_MARK_AD_DIRECT_MAIL_SUM/7
BENCH_MARK_AD_STREAMING_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_STREAMING_SUM)
BENCH_MARK_AD_STREAMING_SUM=BENCH_MARK_AD_STREAMING_SUM/7
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM)
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM=BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM/7
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=sum(AD_TYPE_numeric$BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM)
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM=BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM/7



BENCH_MARK_AD_TOTAL_sum = BENCH_MARK_AD_LIVE_TV_SUM+
BENCH_MARK_AD_SOCIAL_MEDIA_SUM+
BENCH_MARK_AD_AUDIO_SUM+
BENCH_MARK_AD_STATIC_VISUAL_SUM+
BENCH_MARK_AD_MOBILE_ADS_SUM+
BENCH_MARK_AD_DIRECT_MAIL_SUM+
BENCH_MARK_AD_STREAMING_SUM+
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM+
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM+
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM


```



```{r}

MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK<-data.frame(ACRISURE_AD_LIVE_TV_sum,
ACRISURE_AD_SOCIAL_MEDIA_sum,
ACRISURE_AD_AUDIO_sum,
ACRISURE_AD_ONLINE_AD_sum,
ACRISURE_AD_STATIC_VISUALS_sum,
ACRISURE_AD_MOBILE_ADS_sum,
ACRISURE_AD_DIRECT_MAIL_sum,
ACRISURE_AD_STREAMING_sum,
ACRISURE_AD_VENUE_SPONSORSHIP_sum,
ACRISURE_AD_EVENT_SPONSORSHIP_sum,
BENCH_MARK_AD_LIVE_TV_SUM,
BENCH_MARK_AD_SOCIAL_MEDIA_SUM,
BENCH_MARK_AD_AUDIO_SUM,
BENCH_MARK_AD_ONLINE_AD_SUM,
BENCH_MARK_AD_STATIC_VISUAL_SUM,
BENCH_MARK_AD_MOBILE_ADS_SUM,
BENCH_MARK_AD_DIRECT_MAIL_SUM,
BENCH_MARK_AD_STREAMING_SUM,
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM,
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM)
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK
```

```{r}
##### Adveristing

require(reshape)
# Melt the data frame from 1x6 to 6x1
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted <- melt(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK, variable.name = "variable", value.name = "value")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Advertisement<-c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)",
                                                                   "Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"
                                                       
                                                                   )
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted[c(1,3,4,2)]
names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted)[names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted) == "value"] <- "Ad_Exposure"
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure
```


#### Ad exposure

```{r}
#| label: fig-Ad-exposure-source-acrisure-v-benchmark-3
#| fig-cap: Percentage of respondents who report seeing an Acrisure compared to benchmark
#| warning: false
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p14<-create_grouped_bar_plot(
  data = MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p14


# Call the function with horizontal bar plot adjustments
p15<-create_grouped_horizontal_bar_plot(
  data = MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-2", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p15

```
@fig-Ad-exposure-source-acrisure-v-benchmark-3 shows that respondents who saw an ad for acrisure via online ads (27%), streaming (29%) and social media (22%)


```{r}
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK<-data.frame(ACRISURE_AD_LIVE_TV_sum,
ACRISURE_AD_SOCIAL_MEDIA_sum,
ACRISURE_AD_AUDIO_sum,
ACRISURE_AD_ONLINE_AD_sum,
ACRISURE_AD_STATIC_VISUALS_sum,
ACRISURE_AD_MOBILE_ADS_sum,
ACRISURE_AD_DIRECT_MAIL_sum,
ACRISURE_AD_STREAMING_sum,
ACRISURE_AD_VENUE_SPONSORSHIP_sum,
ACRISURE_AD_EVENT_SPONSORSHIP_sum,
BENCH_MARK_AD_LIVE_TV_SUM,
BENCH_MARK_AD_SOCIAL_MEDIA_SUM,
BENCH_MARK_AD_AUDIO_SUM,
BENCH_MARK_AD_ONLINE_AD_SUM,
BENCH_MARK_AD_STATIC_VISUAL_SUM,
BENCH_MARK_AD_MOBILE_ADS_SUM,
BENCH_MARK_AD_DIRECT_MAIL_SUM,
BENCH_MARK_AD_STREAMING_SUM,
BENCH_MARK_AD_VENUE_SPONSORSHIP_SUM,
BENCH_MARK_AD_EVENT_SPONSORHSIP_SUM)
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK
```

```{r}
##### Adveristing

require(reshape)
# Melt the data frame from 1x6 to 6x1
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted <- melt(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK, variable.name = "variable", value.name = "value")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Advertisement<-c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)",
                                                                   "Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"
                                                       
                                                                   )
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Company<-c("Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Acrisure","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark","Benchmark")
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted[c(1,3,4,2)]
names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted)[names(MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted) == "value"] <- "Ad_Exposure"
MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure<-MEAN_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted$Ad_Exposure
```




#### Ad expsoure

```{r}
#| label: fig-Ad-exposure-source-acrisure-v-benchmark-3
#| fig-cap: Percentage of respondents who report seeing an Acrisure compared to benchmark
#| warning: false
require(ggplot2)
# Call the function without specifying y_lim, legend_position
p22<-create_grouped_bar_plot(
  data = PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-3", 
  plot_title = "", 
  x_label = "Ad Channel", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p22


# Call the function with horizontal bar plot adjustments
p23<-create_grouped_horizontal_bar_plot(
  data = PERC_ADVERIST_METHOD_ACRISURE_BENCHMARK_df_melted, 
  x_var = "Advertisement", 
  y_var = "Ad_Exposure", 
  fill_var = "Company", 
  plot_name = "ad-exposure-comparison-plot-4", 
  plot_title = "", 
  x_label = "Form of Advertisment", 
  y_label = "Ad Exposure (%)",
  y_lim = c(0,30),
  legend_position = c(1,1),
  decimals=0
)
p23

```
@fig-Ad-exposure-source-acrisure-v-benchmark-4 shows that the most common ad source those who saw an ad fore Acrisure reprot are - online ads (15%), and streaming (16%).





#### Combine set of participants reporting Ad source for brokerages only

```{r}
#| label: fig-Respondent-Brokerages-Ad-Type
#| fig-cap: Respondents report seeing ad source for 8 national brokerages firms
#| warning: false
#| fig-alt: Bar-chart showing where respondents report seeing Ads for 8 national brokerages
library(tidyverse)
library(scales)
AD_TYPE<-dplyr::select(BTQ2,response_id, q42_shared_1_2,q42_shared_1_3, q42_shared_1_4,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10 )

AD_TYPE_LONG<- to_long(AD_TYPE, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
AD_TYPE_LONG = na.omit(AD_TYPE_LONG)
unique(AD_TYPE_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
AD_TYPE_LONG <- AD_TYPE_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q42_shared_8_") ~ "WTW",
    str_detect(Variable, "q42_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q42_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q42_shared_5_") ~ "Hub International",
    str_detect(Variable, "q42_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q42_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q42_shared_2_") ~ "Aon",
    str_detect(Variable, "q42_shared_1_") ~ "Acrisure",
    TRUE ~ "Not Found"
  ))




AD_TYPE_LONG<-AD_TYPE_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
AD_TYPE_LONG_PERC <- calculate_count_and_percentage(AD_TYPE_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
AD_TYPE_LONG_PERC<-dplyr::mutate(AD_TYPE_LONG_PERC,Percent=round(perc*100),0)

AD_TYPE_LONG_PERC<-as.data.frame(AD_TYPE_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(AD_TYPE_LONG_PERC)<-new_names
AD_TYPE_LONG_PERC<-AD_TYPE_LONG_PERC[-c(6)]




AD_TYPE_LONG_PERC_GOOD_LABELS <- AD_TYPE_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



# Specify the desired order of the 'Name' column
order_names <- c("WTW","Marsh McLennan","Lockton Companies","Hub International","Brown & Brown","Arthur J. Gallagher & Co.","Aon","Acrisure")


# Convert the 'Name' column to a factor with the specified order
AD_TYPE_LONG_PERC_GOOD_LABELS$Question <- factor(AD_TYPE_LONG_PERC_GOOD_LABELS$Firm, levels = order_names)

# Order the data frame by the 'Name' column
AD_TYPE_LONG_PERC_GOOD_LABELS <- AD_TYPE_LONG_PERC_GOOD_LABELS[order(AD_TYPE_LONG_PERC_GOOD_LABELS$Firm), ]

print(AD_TYPE_LONG_PERC_GOOD_LABELS)
library(stringr)

# Wrap Source labels in your data to ~10 characters
AD_TYPE_LONG_PERC_GOOD_LABELS <- AD_TYPE_LONG_PERC_GOOD_LABELS |>
  mutate(Source = str_wrap(Source, width = 20))

# Define wrapped labels
wrapped_labels <- str_wrap(c(
  "Live TV (e.g., commercials during a live broadcast)",
  "Social media (e.g., Facebook)",
  "Audio (e.g., podcasts, radio)",
  "Online Ads (e.g., banner ads on webpages or via email)",
  "Static Visual (e.g., billboards, print ads)",
  "Mobile Ads (e.g., in-app ads, mobile web ads)",
  "Direct Mail (e.g., physical mailers, postcards)",
  "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
  "Venue Sponsorships (e.g., stadium naming rights)",
  "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)",
  "Don't remember"
), width = 20)

# Define and name the fill color scale using wrapped labels
fill_colors <- c(
  "#36749D", "#85714D", "#DDE9F0", "#95174C", "#002A4E", "#004F51",
  "#000000", "#607D8B", "#7C6992", "#6D4C41", "#d3d3d3"
)
names(fill_colors) <- wrapped_labels
names(wrapped_labels) <- wrapped_labels  # for breaks

# Plot with updated legend label formatting
AD_TYPE_LONG_PERC_GOOD_LABELS |>
  ggplot(aes(
    x = Firm,
    y = Proportion,
    fill = Source
  )) +
  geom_col() +
  geom_text(
    aes(label = Percentage),
    position = position_stack(vjust = 0.5),
    color = "white",
    size = 2.5
  ) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(
    breaks = wrapped_labels,
    values = fill_colors
  ) +
  labs(
    title = "",
    x = NULL,
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_blank(),
    axis.title.x = element_blank(),
    panel.grid = element_blank(),
    legend.position = "top"
  )

# Save the ggplot as a PNG file
ggsave("Advertising-Source-Brokerages-Firm.png", height = 6, width = 12, dpi = 1800)
write.csv(AD_TYPE_LONG_PERC_GOOD_LABELS,'AD_TYPE_LONG_PERC_GOOD_LABELS.csv')
```

@fig-Respondent-Brokerages-Ad-Type shows all respondents source of ads for 8 national brokerages. Respondents report seeing Acrisure ads via: streaming services, social media and online searches.

```{r}
#| label: tab-Respondent-Brokerages-Ad-Type
#| tab-cap: Respondents report seeing ad source for 8 national brokerages firms
#| warning: false
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_LONG_PERC_GOOD_LABELS[-c(3,4)]
AD_TYPE_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_LONG_PERC_GOOD_LABELS_TAB)

write.csv(AD_TYPE_LONG_PERC_GOOD_LABELS_TAB,"AD_TYPE_LONG_PERC_GOOD_LABELS_TAB.csv")
```

@tab-Respondent-Brokerages-Ad-Type shows that percentage of respondents who report seeing an ad for the 8 national brokerages. Looking at Acrisure we see that XX% of those who saw an ad for Acrisure report seeing it vai an online search. Another XX% of those who saw an ad report seeing an ad via social media.


@fig-Personal-Lines-Respondent-Ad-Expsoure-All-Firms shows personal lines source of ads for all firms. Respondents report seeing Acrisure ads via: streaming services, social media, online searches and email.

```{r}
#| label: tab-Respondent-Brokerages-Ad-Type-PL
#| tab-cap: Personal lines respondents report seeing ad source for 8 national brokerages firms
#| warning: false
AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_PL_LONG_PERC_GOOD_LABELS[-c(3,4)]
AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB)
```

@tab-Respondent-Brokerages-Ad-Type-PL shows that PL respondents who saw an ad for Acrisure report seeing the ad via: email, social media, and streaming services.

#### Personal Lines Respondents report of ad source for 8 national brokerages.

```{r}
#| label: fig-Personal-Lines-Respondent-Ad-Expsoure-8-national-brokerages
#| fig-cap: Personal Lines respondents report seeing ad source for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart showing where personal lines respondents report seeing Ads for 8 national brokerages
library(tidyverse)
library(scales)
AD_TYPE_PL<-dplyr::select(BTQ2,response_id, q42_shared_1_2,q42_shared_1_3, q42_shared_1_4,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10)

AD_TYPE_PL_LONG<- to_long(AD_TYPE_PL, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
AD_TYPE_PL_LONG = na.omit(AD_TYPE_PL_LONG)
unique(AD_TYPE_PL_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
AD_TYPE_PL_LONG <- AD_TYPE_PL_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q42_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q42_shared_2_") ~ "Aon",
    str_detect(Variable, "q42_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q42_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q42_shared_5_") ~ "Hub International",
    str_detect(Variable, "q42_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q42_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q42_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




AD_TYPE_PL_LONG<-AD_TYPE_PL_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
AD_TYPE_PL_LONG_PERC <- calculate_count_and_percentage(AD_TYPE_PL_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
AD_TYPE_PL_LONG_PERC<-dplyr::mutate(AD_TYPE_PL_LONG_PERC,Percent=round(perc*100),0)

AD_TYPE_PL_LONG_PERC<-as.data.frame(AD_TYPE_PL_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(AD_TYPE_PL_LONG_PERC)<-new_names
AD_TYPE_PL_LONG_PERC<-AD_TYPE_PL_LONG_PERC[-c(6)]




AD_TYPE_PL_LONG_PERC_GOOD_LABELS <- AD_TYPE_PL_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



AD_TYPE_PL_LONG_PERC_GOOD_LABELS %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)", "Don't remember"
                                                                  ),
                    values = c(
                      "Live TV (e.g., commercials during a live broadcast)" = "#36749D",
                      "Social media (e.g., Facebook)" = "#85714D",
                      "Audio (e.g., podcasts, radio)"="#DDE9F0",
                      "Online Ads (e.g., banner ads on webpages or via email)" =  "#95174C",
                      "Static Visual (e.g., billboards, print ads)" = "#002A4E",
                      "Mobile Ads (e.g., in-app ads, mobile web ads)" ="#004F51", 
                      "Direct Mail (e.g., physical mailers, postcards)"="#000000",
                      "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)"  = "#607D8B",
                      "Venue Sponsorships (e.g., stadium naming rights)"="#7C6992",
                      "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"= "#6D4C41", 
                      "Don't remember"="#d3d3d3"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Personal-Lines-Advertising-Source-Brokerages.png", height = 4.5, width = 12, dpi = 1800)


```

@fig-Personal-Lines-Respondent-Ad-Expsoure-8-national-brokerages shows personal lines source of ads for 8 national brokerages. The most common sources respondents

Lockton and Companies, Hub International, Brown and Brown, Arthur J. Gallagher and Aon the most common modes of advertising includes: social media, streaming and services, podcasts, brown and brown, online search, live television and webpages.

```{r}
#| label: tab-Personal-Lines-Respondent-Ad-Expsoure-8-national-brokerages
#| tab-cap: Personal Lines respondents report seeing ad source for 8 national brokerages
#| warning: false
AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_PL_LONG_PERC_GOOD_LABELS[-c(3,4)]
AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_PL_LONG_PERC_GOOD_LABELS_TAB)
```

@tab-Personal-Lines-Respondent-Ad-Expsoure-8-national-brokerages shows that among those who saw an ad for Acrisure the most common source they report seeing the ad via emails and online search.


@fig-Respondent-Ad-Expsoure-Commercial-Lines-All-Firms shows commercial lines source of ads for all firms.

Acrisure ads via: streaming services, social media, online searches and email.

For CL respondents the most commonly report ad source appears to live TV. For those who report seeing an ad for Acrisure the most common sources are: social media, podcasts, online search, and emails.

```{r}
#| label: tab-Respondent-Ad-Expsoure-Commercial-Lines-All-Firms
#| tab-cap: Commercial Lines respondents report seeing ad source for all firms
#| warning: false
AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_CL_LONG_PERC_GOOD_LABELS[-c(3,4)]
AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB)
```

@tab-Respondent-Ad-Expsoure-Commercial-Lines-All-Firms shows that amongt those CL respondents who have seen an ad for Acrisure the most common sources they report were email and online search.

#### Commercial Lines Respondents Ad Source of 8 national brokerages.

```{r}
#| label: fig-Respondent-Ad-Commercial-Lines-8-national-brokerages
#| fig-cap: Commercial Lines respondents ad source for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart showing where commercial lines respondents report seeing Ads 8 national brokerages
library(tidyverse)
library(scales)
AD_TYPE_CL<-dplyr::select(BTQ2_CL,response_id, q42_shared_1_2,q42_shared_1_3, q42_shared_1_4,q42_shared_1_5,q42_shared_1_6,q42_shared_1_7      
,q42_shared_1_8, q42_shared_1_9,q42_shared_1_10, q42_shared_2_1, q42_shared_2_2,q42_shared_2_3      
,q42_shared_2_4,q42_shared_2_5,q42_shared_2_6,q42_shared_2_7,q42_shared_2_8,q42_shared_2_9,q42_shared_2_10,
q42_shared_3_1,q42_shared_3_2,q42_shared_3_3,q42_shared_3_4,q42_shared_3_5  ,q42_shared_3_6,q42_shared_3_7    ,q42_shared_3_8,q42_shared_3_9,q42_shared_3_10,
q42_shared_4_1,q42_shared_4_2,q42_shared_4_3,q42_shared_4_4,q42_shared_4_5      
,q42_shared_4_6,q42_shared_4_7,q42_shared_4_8,q42_shared_4_9,q42_shared_4_10,
q42_shared_5_1,q42_shared_5_2, q42_shared_5_3,q42_shared_5_4,q42_shared_5_5      
,q42_shared_5_6,q42_shared_5_7,q42_shared_5_8,q42_shared_5_9,q42_shared_5_10,
q42_shared_6_1,q42_shared_6_2,q42_shared_6_3,q42_shared_6_4,q42_shared_6_5      
,q42_shared_6_6,q42_shared_6_7,q42_shared_6_8,q42_shared_6_9,q42_shared_6_10,
q42_shared_7_1 ,q42_shared_7_2, q42_shared_7_3,q42_shared_7_4,q42_shared_7_5      
,q42_shared_7_6,q42_shared_7_7, q42_shared_7_8,q42_shared_7_9, q42_shared_7_10
,q42_shared_8_1,q42_shared_8_2,q42_shared_8_3 ,q42_shared_8_4,q42_shared_8_5      
,q42_shared_8_6,q42_shared_8_7,q42_shared_8_8,q42_shared_8_9,q42_shared_8_10)

AD_TYPE_CL_LONG<- to_long(AD_TYPE_CL, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
AD_TYPE_CL_LONG = na.omit(AD_TYPE_CL_LONG)
unique(AD_TYPE_CL_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
AD_TYPE_CL_LONG <- AD_TYPE_CL_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q42_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q42_shared_2_") ~ "Aon",
    str_detect(Variable, "q42_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q42_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q42_shared_5_") ~ "Hub International",
    str_detect(Variable, "q42_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q42_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q42_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




AD_TYPE_CL_LONG<-AD_TYPE_CL_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
AD_TYPE_CL_LONG_PERC <- calculate_count_and_percentage(AD_TYPE_CL_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
AD_TYPE_CL_LONG_PERC<-dplyr::mutate(AD_TYPE_CL_LONG_PERC,Percent=round(perc*100),0)

AD_TYPE_CL_LONG_PERC<-as.data.frame(AD_TYPE_CL_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(AD_TYPE_CL_LONG_PERC)<-new_names
AD_TYPE_CL_LONG_PERC<-AD_TYPE_CL_LONG_PERC[-c(6)]




AD_TYPE_CL_LONG_PERC_GOOD_LABELS <- AD_TYPE_CL_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



AD_TYPE_CL_LONG_PERC_GOOD_LABELS %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Live TV (e.g., commercials during a live broadcast)",
                                                                   "Social media (e.g., Facebook)",
                                                                   "Audio (e.g., podcasts, radio)",
                                                                   "Online Ads (e.g., banner ads on webpages or via email)",
                                                                   "Static Visual (e.g., billboards, print ads)",
                                                                   "Mobile Ads (e.g., in-app ads, mobile web ads)",
                                                                   "Direct Mail (e.g., physical mailers, postcards)",
                                                                   "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)",
                                                                   "Venue Sponsorships (e.g., stadium naming rights)",
                                                                   "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)", "Don't remember"
                                                                  ),
                    values = c(
                      "Live TV (e.g., commercials during a live broadcast)" = "#36749D",
                      "Social media (e.g., Facebook)" = "#85714D",
                      "Audio (e.g., podcasts, radio)"="#DDE9F0",
                      "Online Ads (e.g., banner ads on webpages or via email)" =  "#95174C",
                      "Static Visual (e.g., billboards, print ads)" = "#002A4E",
                      "Mobile Ads (e.g., in-app ads, mobile web ads)" ="#004F51", 
                      "Direct Mail (e.g., physical mailers, postcards)"="#000000",
                      "Streaming (e.g., ads on Hulu, commercials on YouTube TV, ads on Amazon Prime Video)" =  "#607D8B",
                      "Venue Sponsorships (e.g., stadium naming rights)"="#7C6992",
                      "Event Sponsorships (e.g., naming of a sports tournament, sponsoring a music festival)"= "#6D4C41", 
                      "Don't remember"="#d3d3d3"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Commercial-Lines-Advertising-Source-Brokerages.png", height = 4.5, width = 10, dpi = 1800)
```

@fig-Respondent-Ad--Commercial-Lines-8-national-brokerages shows commercial lines respondents reported ad source for the 8 national brokerages. For Acrisure the most common sources they report were email and online search.

For those who report seeing an ad for Acrisure the most common sources are: social media, podcasts, online search, and emails.

```{r}
#| label: tab-Respondent-Ad-Expsoure-Commercial-Lines-8-national-brokerages
#| tab-cap: Commercial Lines respondents report seeing ad source for 8 brokerages
#| warning: false
AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB<-AD_TYPE_CL_LONG_PERC_GOOD_LABELS[-c(3,4)]
AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB
kable(AD_TYPE_CL_LONG_PERC_GOOD_LABELS_TAB)
```

@tab-Respondent-Ad-Expsoure-Commercial-Lines-8-national-brokerages shows that the most common ad sources CL respondents report were via online search and via email.

#### Net Promoter Score

Q43: How likely are you to recommend each brand to a friend or colleague?

#### Net Promoter Score NPS - All Firms

```{r}
#| label: fig-Firm-NPS-All-Respondents
#| fig-cap: Respondent NPS
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines respondent NPS

library(scales)
NPS_DF<-dplyr::select(BTQ2,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8,q43_shared_9,q43_shared_10,q43_shared_11,q43_shared_12,q43_shared_13,q43_shared_14,)

NPS_DF_LONG<- to_long(NPS_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_DF_LONG = na.omit(NPS_DF_LONG)

#factor the rankings
NPS_DF_LONG$Variable<-factor(NPS_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8","q43_shared_9","q43_shared_10","q43_shared_11","q43_shared_12","q43_shared_13","q43_shared_14"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW","Hippo","Lemonade","Goosehead","SoFi","Insureon","Hiscox"))

#compute the percentage of respondents that selected each condition at each rank
NPS_DF_LONG_PERC <- calculate_count_and_percentage(NPS_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_DF_LONG_PERC<-dplyr::mutate(NPS_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_DF_LONG_PERC<-as.data.frame(NPS_DF_LONG_PERC)

new_names<-c("Question","Opinion","Count","Proportion","Percentage")
names(NPS_DF_LONG_PERC)<-new_names
NPS_DF_LONG_PERC<-NPS_DF_LONG_PERC[-c(6)]

NPS_DF_LONG_PERC$Opinion<-factor(NPS_DF_LONG_PERC$Opinion,
levels = c(1,2,3,4,5),    
labels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))




NPS_DF_LONG_PERC_DIVERGE <- NPS_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Opinion %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Opinion = fct_relevel(Opinion,
                               "Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
         Opinion = fct_rev(Opinion)) 



# Specify the desired order of the 'Name' column
order_names <- c("Aon","Insureon","Marsh McLennan","Lemonade","Brown & Brown","WTW","Hub International","SoFi","Hiscox","Arthur J. Gallagher & Co.","Hippo","Lockton Companies","Acrisure","Goosehead")


# Convert the 'Name' column to a factor with the specified order
NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Opinion)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"=  "#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Firms-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)


```

@fig-Firm-NPS-All-Respondents shows that 34% of those respondents who are of Acrisure indicate that they are 'Extremely likely' to recommend them to a friend or colleague.

#### Personal Lines NPS All Firms

```{r}
#| label: fig-Firm-NPS-Personal-Lines-Respondents
#| fig-cap: Personal lines respondent NPS
#| warning: false
#| fig-alt: Bar-chart depicting personal lines respondent NPS
library(tidyverse)
library(scales)
NPS_PL_DF<-dplyr::select(BTQ2_PL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)




NPS_PL_DF_LONG<- to_long(NPS_PL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_PL_DF_LONG = na.omit(NPS_PL_DF_LONG)

#factor the rankings
NPS_PL_DF_LONG$Variable<-factor(NPS_PL_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8","q43_shared_9","q43_shared_10","q43_shared_11","q43_shared_12"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW","Hippo","Lemonade","Goosehead","SoFi"))

#compute the percentage of respondents that selected each condition at each rank
NPS_PL_DF_LONG_PERC <- calculate_count_and_percentage(NPS_PL_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_PL_DF_LONG_PERC<-dplyr::mutate(NPS_PL_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_PL_DF_LONG_PERC<-as.data.frame(NPS_PL_DF_LONG_PERC)

new_names<-c("Question","Opinion","Count","Proportion","Percentage")
names(NPS_PL_DF_LONG_PERC)<-new_names
NPS_PL_DF_LONG_PERC<-NPS_PL_DF_LONG_PERC[-c(6)]

NPS_PL_DF_LONG_PERC$Opinion<-factor(NPS_PL_DF_LONG_PERC$Opinion,
levels = c(1,2,3,4,5),    
labels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))




NPS_PL_DF_LONG_PERC_DIVERGE <- NPS_PL_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Opinion %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_PL_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Opinion = fct_relevel(Opinion,
                               "Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
         Opinion = fct_rev(Opinion)) 



# Specify the desired order of the 'Name' column

order_names <- c("Hippo","SoFi","Lemonade","Marsh McLennan","Hub International","Brown & Brown","WTW","Aon","Arthur J. Gallagher & Co.","Acrisure","Goosehead","Lockton Companies")    
                

# Convert the 'Name' column to a factor with the specified order
NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Opinion)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Extremely likely","Very likely","Likely","Somewhat likely","Not at all likely" ),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"="#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Personal-Lines-Firms-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)
```

@fig-Firm-NPS-Personal-Lines-Respondents shows that personal lines respondents are broadly dissatisified with insurance providers. Lokcton and Companies receives the greatest proportion of 'Extremely likely' to recommend the firm to friends or colleagues.

#### Commercial Lines NPS All Firms

```{r}
#| label: fig-Firm-NPS-Commercial-Lines-Respondents
#| fig-cap: Commercial Lines respondent NPS
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines respondent NPS
library(tidyverse)
library(scales)
NPS_CL_DF<-dplyr::select(BTQ2_CL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_CL_DF_LONG<- to_long(NPS_CL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_CL_DF_LONG = na.omit(NPS_CL_DF_LONG)

#factor the rankings
NPS_CL_DF_LONG$Variable<-factor(NPS_CL_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_CL_DF_LONG_PERC <- calculate_count_and_percentage(NPS_CL_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_CL_DF_LONG_PERC<-dplyr::mutate(NPS_CL_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_CL_DF_LONG_PERC<-as.data.frame(NPS_CL_DF_LONG_PERC)

new_names<-c("Question","Opinion","Count","Proportion","Percentage")
names(NPS_CL_DF_LONG_PERC)<-new_names
NPS_CL_DF_LONG_PERC<-NPS_CL_DF_LONG_PERC[-c(6)]

NPS_CL_DF_LONG_PERC$Opinion<-factor(NPS_CL_DF_LONG_PERC$Opinion,
levels = c(1,2,3,4,5),    
labels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))




NPS_CL_DF_LONG_PERC_DIVERGE <- NPS_CL_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Opinion %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_CL_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Opinion = fct_relevel(Opinion,
                               "Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
         Opinion = fct_rev(Opinion)) 



# Specify the desired order of the 'Name' column

order_names <- c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW")


# Convert the 'Name' column to a factor with the specified order
NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Opinion)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
                    values = c(
                    "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"="#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        text = element_text(size = 12, family = 'sans'),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Commercial-Lines-Firms-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)
```

order_names \<- c("Brown & Brown","Marsh McLennan","WTW","Insureon","Acrisure","Aon","Lockton Companies","Arthur J. Gallagher & Co.","Hub International","SoFi","Hiscox","Intuit QuickBooks")

@fig-Firm-NPS-Commercial-Lines-Respondents shows that commercial lines respondents on the whole are at least "Somewhat likely" to recommend insurance providers to a friend or colleague. 65% of CL respondents aware of Acrisure are either "Very likely" or "Extremely likely" to recommend Acrisure to a friend or a colleague.

#### 8 National Brokerages Only. All respondents NPS ratings of 8 national brokerages.

```{r}
# Specify the columns
columns <- c("q43_shared_1", "q43_shared_2", "q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8")

# Subset the dataframe to include only the specified columns
subset_df <- BTQ2[, columns]

# Check if all values in each row of the subset dataframe are NA
na_rows <- apply(subset_df, 1, function(row) all(is.na(row)))

# Count the number of rows where all specified columns are NA
count <- sum(na_rows)

# Print the result
print(count)


```

```{r}
#| label: fig-NPS-Brokerages-Both-Line-Types
#| fig-cap: Both line types respondent NPS for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting respondent NPS for 8 national brokerages
library(tidyverse)
library(scales)
NPS_BROKERAGES_DF<-dplyr::select(BTQ2,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_BROKERAGES_DF_LONG<- to_long(NPS_BROKERAGES_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_BROKERAGES_DF_LONG = na.omit(NPS_BROKERAGES_DF_LONG)

#factor the rankings
NPS_BROKERAGES_DF_LONG$Variable<-factor(NPS_BROKERAGES_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_BROKERAGES_DF_LONG_PERC <- calculate_count_and_percentage(NPS_BROKERAGES_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_BROKERAGES_DF_LONG_PERC<-dplyr::mutate(NPS_BROKERAGES_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_BROKERAGES_DF_LONG_PERC<-as.data.frame(NPS_BROKERAGES_DF_LONG_PERC)

new_names<-c("Question","Value","Count","Proportion","Percentage")
names(NPS_BROKERAGES_DF_LONG_PERC)<-new_names
NPS_BROKERAGES_DF_LONG_PERC<-NPS_BROKERAGES_DF_LONG_PERC[-c(6)]
NPS_BROKERAGES_DF_LONG_PERC


NPS_BROKERAGES_DF_LONG_PERC$Value<-factor(NPS_BROKERAGES_DF_LONG_PERC$Value,
levels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))
NPS_BROKERAGES_DF_LONG_PERC




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE <- NPS_BROKERAGES_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Value %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Value = fct_relevel(Value,
                               "Extremely likely","Very likely", "Likely", "Somewhat likely","Not at all likely" ),
         Value = fct_rev(Value)) 



# Specify the desired order of the 'Name' column



order_names <- c("Marsh McLennan","Aon","Brown & Brown","Acrisure","WTW","Lockton Companies","Arthur J. Gallagher & Co.","Hub International")

# Convert the 'Name' column to a factor with the specified order
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Value)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Extremely likely", "Very likely", "Likely","Somewhat likely","Not at all likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"="#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        text = element_text(size = 12, family = 'sans'),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brokerages-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)




```







```{r}
#| label: fig-NPS-Brokerages-Both-Line-Types
#| fig-cap: Both line types respondent NPS for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting respondent NPS for 8 national brokerages
library(tidyverse)
library(scales)
NPS_BROKERAGES_DF<-dplyr::select(BTQ2_CL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_BROKERAGES_DF_LONG<- to_long(NPS_BROKERAGES_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_BROKERAGES_DF_LONG = na.omit(NPS_BROKERAGES_DF_LONG)

#factor the rankings
NPS_BROKERAGES_DF_LONG$Variable<-factor(NPS_BROKERAGES_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_BROKERAGES_DF_LONG_PERC <- calculate_count_and_percentage(NPS_BROKERAGES_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_BROKERAGES_DF_LONG_PERC<-dplyr::mutate(NPS_BROKERAGES_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_BROKERAGES_DF_LONG_PERC<-as.data.frame(NPS_BROKERAGES_DF_LONG_PERC)

new_names<-c("Question","Value","Count","Proportion","Percentage")
names(NPS_BROKERAGES_DF_LONG_PERC)<-new_names
NPS_BROKERAGES_DF_LONG_PERC<-NPS_BROKERAGES_DF_LONG_PERC[-c(6)]
NPS_BROKERAGES_DF_LONG_PERC


NPS_BROKERAGES_DF_LONG_PERC$Value<-factor(NPS_BROKERAGES_DF_LONG_PERC$Value,
levels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))
NPS_BROKERAGES_DF_LONG_PERC




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE <- NPS_BROKERAGES_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Value %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Value = fct_relevel(Value,
                               "Extremely likely","Very likely", "Likely", "Somewhat likely","Not at all likely" ),
         Value = fct_rev(Value)) 



# Specify the desired order of the 'Name' column



order_names <- c("Marsh McLennan","Aon","Brown & Brown","Acrisure","WTW","Lockton Companies","Arthur J. Gallagher & Co.","Hub International")

# Convert the 'Name' column to a factor with the specified order
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Value)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Extremely likely", "Very likely", "Likely","Somewhat likely","Not at all likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"="#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        text = element_text(size = 12, family = 'sans'),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brokerages-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)




```



```{r}
#| label: fig-NPS-Brokerages-Both-Line-Types
#| fig-cap: Both line types respondent NPS for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting respondent NPS for 8 national brokerages
library(tidyverse)
library(scales)
NPS_BROKERAGES_DF<-dplyr::select(BTQ2_PL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_BROKERAGES_DF_LONG<- to_long(NPS_BROKERAGES_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_BROKERAGES_DF_LONG = na.omit(NPS_BROKERAGES_DF_LONG)

#factor the rankings
NPS_BROKERAGES_DF_LONG$Variable<-factor(NPS_BROKERAGES_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_BROKERAGES_DF_LONG_PERC <- calculate_count_and_percentage(NPS_BROKERAGES_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_BROKERAGES_DF_LONG_PERC<-dplyr::mutate(NPS_BROKERAGES_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_BROKERAGES_DF_LONG_PERC<-as.data.frame(NPS_BROKERAGES_DF_LONG_PERC)

new_names<-c("Question","Value","Count","Proportion","Percentage")
names(NPS_BROKERAGES_DF_LONG_PERC)<-new_names
NPS_BROKERAGES_DF_LONG_PERC<-NPS_BROKERAGES_DF_LONG_PERC[-c(6)]
NPS_BROKERAGES_DF_LONG_PERC


NPS_BROKERAGES_DF_LONG_PERC$Value<-factor(NPS_BROKERAGES_DF_LONG_PERC$Value,
levels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))
NPS_BROKERAGES_DF_LONG_PERC




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE <- NPS_BROKERAGES_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Value %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Value = fct_relevel(Value,
                               "Extremely likely","Very likely", "Likely", "Somewhat likely","Not at all likely" ),
         Value = fct_rev(Value)) 



# Specify the desired order of the 'Name' column



order_names <- c("Marsh McLennan","Aon","Brown & Brown","Acrisure","WTW","Lockton Companies","Arthur J. Gallagher & Co.","Hub International")

# Convert the 'Name' column to a factor with the specified order
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_BROKERAGES_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Value)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=4) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Extremely likely", "Very likely", "Likely","Somewhat likely","Not at all likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#004F51",
                      "Likely"="#85714D",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        text = element_text(size = 12, family = 'sans'),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brokerages-NPS-Ratings.png", height = 4.5, width = 12, dpi = 1800)




```

order_names <- c("Marsh McLennan","Aon","Brown & Brown","Acrisure","WTW","Lockton Companies","Arthur J. Gallagher & Co.","Hub International")


@fig-Firm-NPS-Both-Line-Types shows that 50% of respondents are either "Very" or "Extremely" likely to recommend Acrisure to a friend or colleague.

#### Personal Lines respondents ratings for brokerges

```{r}
#| label: fig-NPS-Brokerages-Personal-Lines
#| fig-cap: Personal lines respondent NPS for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting personal lines respondent NPS for 8 national brokerages
library(tidyverse)
library(scales)
NPS_BROKERAGES_PL_DF<-dplyr::select(BTQ2_PL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_BROKERAGES_PL_DF_LONG<- to_long(NPS_BROKERAGES_PL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_BROKERAGES_PL_DF_LONG = na.omit(NPS_BROKERAGES_PL_DF_LONG)

#factor the rankings
NPS_BROKERAGES_PL_DF_LONG$Variable<-factor(NPS_BROKERAGES_PL_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_BROKERAGES_PL_DF_LONG_PERC <- calculate_count_and_percentage(NPS_BROKERAGES_PL_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_BROKERAGES_PL_DF_LONG_PERC<-dplyr::mutate(NPS_BROKERAGES_PL_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_BROKERAGES_PL_DF_LONG_PERC<-as.data.frame(NPS_BROKERAGES_PL_DF_LONG_PERC)

new_names<-c("Question","Opinion","Count","Proportion","Percentage")
names(NPS_BROKERAGES_PL_DF_LONG_PERC)<-new_names
NPS_BROKERAGES_PL_DF_LONG_PERC<-NPS_BROKERAGES_PL_DF_LONG_PERC[-c(6)]

NPS_BROKERAGES_PL_DF_LONG_PERC$Opinion<-factor(NPS_BROKERAGES_PL_DF_LONG_PERC$Opinion,
levels = c(1,2,3,4,5),    
labels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))




NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE <- NPS_BROKERAGES_PL_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Opinion %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Opinion = fct_relevel(Opinion,
                               "Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
         Opinion = fct_rev(Opinion)) 
NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS


# Specify the desired order of the 'Name' column
order_names <- c("Aon","Arthur J. Gallagher & Co.","Marsh McLennan","WTW","Acrisure", "Brown & Brown","Hub International","Lockton Companies")


# Convert the 'Name' column to a factor with the specified order
NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_BROKERAGES_PL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Opinion)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#85714D",
                      "Likely"="#DDE9F0",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Personal-Lines-Brokerages-NPS-Ratings.png", height = 4.5, width = 10, dpi = 1800)
```

@fig-Firm-NPS-Personal-Lines-Respondents hows that 23% of PL respondents who are aware of Acrisure report being 'Extremely likely' to recommend Acrisure to a friend or colleague.Commercial Lines NPS

```{r}
#| label: fig-NPS-Brokerages-Commercial-Lines
#| fig-cap: Commercial lines respondent NPS for 8 national brokerages
#| warning: false
#| fig-alt: Bar-chart depicting commercial lines respondent NPS for 8 national brokerages
library(tidyverse)
library(scales)
NPS_BROKERAGES_CL_DF<-dplyr::select(BTQ2_CL,response_id,q43_shared_1,q43_shared_2,q43_shared_3,q43_shared_4,q43_shared_5,q43_shared_6,q43_shared_7,q43_shared_8)

NPS_BROKERAGES_CL_DF_LONG<- to_long(NPS_BROKERAGES_CL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
NPS_BROKERAGES_CL_DF_LONG = na.omit(NPS_BROKERAGES_CL_DF_LONG)

#factor the rankings
NPS_BROKERAGES_CL_DF_LONG$Variable<-factor(NPS_BROKERAGES_CL_DF_LONG$Variable,
levels = c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8"),    
labels = c("Acrisure","Aon","Arthur J. Gallagher & Co.","Brown & Brown","Hub International","Lockton Companies","Marsh McLennan","WTW"))

#compute the percentage of respondents that selected each condition at each rank
NPS_BROKERAGES_CL_DF_LONG_PERC <- calculate_count_and_percentage(NPS_BROKERAGES_CL_DF_LONG, group_columns = c("Variable","Value"))
                                                                    
NPS_BROKERAGES_CL_DF_LONG_PERC<-dplyr::mutate(NPS_BROKERAGES_CL_DF_LONG_PERC,Percent=round(perc*100),0)

NPS_BROKERAGES_CL_DF_LONG_PERC<-as.data.frame(NPS_BROKERAGES_CL_DF_LONG_PERC)

new_names<-c("Question","Opinion","Count","Proportion","Percentage")
names(NPS_BROKERAGES_CL_DF_LONG_PERC)<-new_names
NPS_BROKERAGES_CL_DF_LONG_PERC<-NPS_BROKERAGES_CL_DF_LONG_PERC[-c(6)]

NPS_BROKERAGES_CL_DF_LONG_PERC$Opinion<-factor(NPS_BROKERAGES_CL_DF_LONG_PERC$Opinion,
levels = c(1,2,3,4,5),    
labels = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"))


NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE <- NPS_BROKERAGES_CL_DF_LONG_PERC %>%
  dplyr::mutate(Proportion = if_else(Opinion %in% c("Extremely likely", "Very likely"), Proportion*1, Proportion*-1)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))




NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS <- NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))



NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS %>% 
  mutate(Opinion = fct_relevel(Opinion,
                               "Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
         Opinion = fct_rev(Opinion)) 
NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS


# Specify the desired order of the 'Name' column
order_names <- c("Aon","Brown & Brown","Marsh McLennan","WTW","Hub International","Lockton Companies","Acrisure","Arthur J. Gallagher & Co.")

# Convert the 'Name' column to a factor with the specified order
NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question <- factor(NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question, levels = order_names)

# Order the data frame by the 'Name' column
NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER <- NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER[order(NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER$Question), ]



NPS_BROKERAGES_CL_DF_LONG_PERC_DIVERGE_GOOD_LABELS_RIGHT_ORDER %>%
  ggplot(aes(x = Question, 
             y = Proportion,
             fill = Opinion)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Not at all likely", "Somewhat likely", "Likely", "Very likely","Extremely likely"),
                    values = c(
                      "Not at all likely" = "#000000",
                      "Somewhat likely" = "#85714D",
                      "Likely"="#DDE9F0",
                      "Very likely" =  "#36749D",
                      "Extremely likely" = "#002A4E")) + 
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Commercial-Lines-Brokerages-NPS-Ratings.png", height = 4.5, width = 10, dpi = 1800)
```

@fig-Firm-NPS-Commercial-Lines-Respondents hows that 37% of CL respondents who are aware of Acrisure report being 'Extremely likely' to recommend Acrisure to a friend or colleague.

All respondents proportion of respondents who select each NPS option from Not at all likely to Extremely likely for all firms.

```{r}
BTQ2$q43_shared_1=as.factor(BTQ2$q43_shared_1)
BTQ2$q43_shared_2=as.factor(BTQ2$q43_shared_2)
BTQ2$q43_shared_3=as.factor(BTQ2$q43_shared_3)
BTQ2$q43_shared_4=as.factor(BTQ2$q43_shared_4)
BTQ2$q43_shared_5=as.factor(BTQ2$q43_shared_5)
BTQ2$q43_shared_6=as.factor(BTQ2$q43_shared_6)
BTQ2$q43_shared_7=as.factor(BTQ2$q43_shared_7)
BTQ2$q43_shared_8=as.factor(BTQ2$q43_shared_8)
BTQ2$q43_shared_9=as.factor(BTQ2$q43_shared_9)
BTQ2$q43_shared_10=as.factor(BTQ2$q43_shared_10)
BTQ2$q43_shared_11=as.factor(BTQ2$q43_shared_11)
BTQ2$q43_shared_12=as.factor(BTQ2$q43_shared_12)
BTQ2$q43_shared_13=as.factor(BTQ2$q43_shared_13)
BTQ2$q43_shared_14=as.factor(BTQ2$q43_shared_14)
BTQ2$q43_shared_15=as.factor(BTQ2$q43_shared_15)

```

Proportion of respondents who selected each NPS response option for all firms.

```{r}
#| label: tab-Respondents-Breakdown-NPS
#| tab-cap: Respondents NPS ratings for each firm they are aware of across line type
#| warning: false
require(vtable)
NPS_RATINGS_FIRMS_ALL_LINES<-st(BTQ2, vars=c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8","q43_shared_9","q43_shared_10","q43_shared_11","q43_shared_12","q43_shared_13","q43_shared_14","q43_shared_15","q43_shared_16","q43_shared_17","q43_shared_18","q43_shared_19","q43_shared_20","q43_shared_21","q43_shared_22","q43_shared_23"),out='csv',file='NPS-Rating-Firms-All-Lines.csv')
kable(NPS_RATINGS_FIRMS_ALL_LINES)
```

Proportion of respondents who selected each NPS response option for all firms by line type.

```{r}
#| label: tab-Respondents-Breakdown-NPS-Line-Type
#| tab-cap: Respondents NPS ratings for each firm they are aware of between line type
#| warning: false
require(vtable)
NPS_RATINGS_FIRMS_LINE_TYPE<-st(BTQ2, vars=c("q43_shared_1","q43_shared_2","q43_shared_3","q43_shared_4","q43_shared_5","q43_shared_6","q43_shared_7","q43_shared_8","q43_shared_9","q43_shared_10","q43_shared_11","q43_shared_12","q43_shared_13","q43_shared_14","q43_shared_15","q43_shared_16","q43_shared_17","q43_shared_18","q43_shared_19","q43_shared_20","q43_shared_21","q43_shared_22","q43_shared_23"),group="RESPONDENT_TYPE",out='csv',file='NPS-Rating-Firms-Line-Type.csv')
kable(NPS_RATINGS_FIRMS_LINE_TYPE)
```

#### Acrisure NPS by line type

```{r}
#| label: tab-Acrisure-NPS-Line-Type
#| tab-cap: Acrisure NPS by line type
#| warning: false

Acrisure_NPS_By_Line_Type<-st(BTQ2,vars = c("q43_shared_1"), group=("RESPONDENT_TYPE"),out="csv",file="Acrisure_NPS_By_Line_Type.csv")
Acrisure_NPS_By_Line_Type
```

@tab-Acrisure-Ad-exposure-Line-Type a higher percentage of CL respondents report seeing an ad for Acrisure in the last 30 days indicating that our ads may be effectivey targetting business decision makers.

#####Acrisure NPS by Gender.

```{r}
#| label: tab-Acrisure-NPS-Gender
#| tab-cap: Acrisure NPS by gender
#| warning: false
require(vtable)
Acrisure_NPS_By_Gender<-st(BTQ2,vars = c("q43_shared_1"), group=("q11_shared"),out="csv",file="Acrisure_NPS_By_Gender.csv")
Acrisure_NPS_By_Gender
```

@tab-Acrisure-NPS-Gender

#####Acrisure NPS by age group

```{r}
#| label: tab-Acrisure-NPS-Age-Group
#| tab-cap: Acrisure NPS by age group
#| warning: false
require(vtable)
Acrisure_NPS_By_Age_Category<-st(BTQ2,vars = c("q43_shared_1"), group=("age_categories"),out="csv",file="Acrisure_NPS_By_Age_Category.csv")
Acrisure_NPS_By_Age_Category

```

@tab-Acrisure-NPS-Age-Group

Now lets convert the NPS variables into numeric variables so we can generate Mean and SD NPS for all firms

```{r}
BTQ2$q43_shared_1_num=as.numeric(BTQ2$q43_shared_1)
BTQ2$q43_shared_2_num=as.numeric(BTQ2$q43_shared_2)
BTQ2$q43_shared_3_num=as.numeric(BTQ2$q43_shared_3)
BTQ2$q43_shared_4_num=as.numeric(BTQ2$q43_shared_4)
BTQ2$q43_shared_5_num=as.numeric(BTQ2$q43_shared_5)
BTQ2$q43_shared_6_num=as.numeric(BTQ2$q43_shared_6)
BTQ2$q43_shared_7_num=as.numeric(BTQ2$q43_shared_7)
BTQ2$q43_shared_8_num=as.numeric(BTQ2$q43_shared_8)
BTQ2$q43_shared_9_num=as.numeric(BTQ2$q43_shared_9)
BTQ2$q43_shared_10_num=as.numeric(BTQ2$q43_shared_10)
BTQ2$q43_shared_11_num=as.numeric(BTQ2$q43_shared_11)
BTQ2$q43_shared_12_num=as.numeric(BTQ2$q43_shared_12)
BTQ2$q43_shared_13_num=as.numeric(BTQ2$q43_shared_13)
BTQ2$q43_shared_14_num=as.numeric(BTQ2$q43_shared_14)
BTQ2$q43_shared_15_num=as.numeric(BTQ2$q43_shared_15)
BTQ2$q43_shared_16_num=as.numeric(BTQ2$q43_shared_16)

BTQ2$q43_shared_18_num=as.numeric(BTQ2$q43_shared_18)
BTQ2$q43_shared_19_num=as.numeric(BTQ2$q43_shared_19)
BTQ2$q43_shared_20_num=as.numeric(BTQ2$q43_shared_20)
BTQ2$q43_shared_21_num=as.numeric(BTQ2$q43_shared_21)
BTQ2$q43_shared_22_num=as.numeric(BTQ2$q43_shared_22)
BTQ2$q43_shared_23=as.numeric(BTQ2$q43_shared_23)

```

Now lets generate tables showing respondents future consideration of the 8 national brokerages.

#### NPS Descriptive Statistics Tables Across Line Types

```{r}
#| label: tab-Respondents-Descriptives-NPS
#| tab-cap: Respondents NPS ratings for each firm they are aware of across line type
#| warning: false
require(vtable)
NPS_RATINGS_FIRMS_DESCRIPTIVES<-st(BTQ2, vars=c("q43_shared_1_num","q43_shared_2_num","q43_shared_3_num","q43_shared_4_num","q43_shared_5_num","q43_shared_6_num","q43_shared_7_num","q43_shared_8_num","q43_shared_9_num","q43_shared_10_num","q43_shared_11_num","q43_shared_12_num","q43_shared_13_num","q43_shared_14_num","q43_shared_15_num","q43_shared_16_num","q43_shared_17_num","q43_shared_18_num","q43_shared_19_num","q43_shared_20_num","q43_shared_21_num","q43_shared_22_num","q43_shared_23_num"),out='csv',file='NPS-Rating-Descriptives-All-Lines.csv')
kable(NPS_RATINGS_FIRMS_DESCRIPTIVES)
```

@tab-Respondents-Descriptives-NPS shows the breakdown of NPS ratings for all firms.

#### NPS Descriptives Statistics Tables By Line Type

```{r}
#| label: tab-Respondents-Line-Type-Descriptives-NPS
#| tab-cap: Respondents NPS ratings for each firm they are aware of across line type
#| warning: false
require(vtable)
NPS_RATINGS_FIRMS_LINE_TYPE_DESCRIPTIVES<-st(BTQ2, vars=c("q43_shared_1_num","q43_shared_2_num","q43_shared_3_num","q43_shared_4_num","q43_shared_5_num","q43_shared_6_num","q43_shared_7_num","q43_shared_8_num","q43_shared_9_num","q43_shared_10_num","q43_shared_11_num","q43_shared_12_num","q43_shared_13_num","q43_shared_14_num","q43_shared_15_num","q43_shared_16_num","q43_shared_17_num","q43_shared_18_num","q43_shared_19_num","q43_shared_20_num","q43_shared_21_num","q43_shared_22_num","q43_shared_23_num"),group="RESPONDENT_TYPE",out='csv',file='NPS-Rating-Descriptives-Line-Type.csv')
kable(NPS_RATINGS_FIRMS_LINE_TYPE_DESCRIPTIVES)
NPS_RATINGS_FIRMS_LINE_TYPE_DESCRIPTIVES
```

@tab-Respondents-Breakdown-Line-Type-NPS shows the breakdown of NPS ratings for all firms by line types.

```{r}
# Specify the columns
columns <- c("q118_shared_1_1",          
"q118_shared_1_2",           "q118_shared_1_3",           "q118_shared_1_4",           "q118_shared_1_5",           "q118_shared_1_6",          
 "q118_shared_1_7",           "q118_shared_1_8",           "q118_shared_1_9",           "q118_shared_1_10",          "q118_shared_1_11" ,        
"q118_shared_2_1",           "q118_shared_2_2"   ,        "q118_shared_2_3",           "q118_shared_2_4",           "q118_shared_2_5"    ,      
"q118_shared_2_6",           "q118_shared_2_7"     ,      "q118_shared_2_8",           "q118_shared_2_9",           "q118_shared_2_10"     ,    
"q118_shared_2_11",          "q118_shared_3_1"       ,    "q118_shared_3_2",           "q118_shared_3_3",           "q118_shared_3_4"        ,  
"q118_shared_3_5",           "q118_shared_3_6"         ,  "q118_shared_3_7",           "q118_shared_3_8",           "q118_shared_3_9" ,         
"q118_shared_3_10",          "q118_shared_3_11" ,         "q118_shared_4_1",           "q118_shared_4_2",           "q118_shared_4_3"   ,       
"q118_shared_4_4",           "q118_shared_4_5"    ,       "q118_shared_4_6",           "q118_shared_4_7",           "q118_shared_4_8"     ,     
"q118_shared_4_9",           "q118_shared_4_10"     ,     "q118_shared_4_11",          "q118_shared_5_1",           "q118_shared_5_2"       ,   
"q118_shared_5_3",           "q118_shared_5_4"        ,   "q118_shared_5_5",           "q118_shared_5_6",           "q118_shared_5_7"         , 
"q118_shared_5_8",           "q118_shared_5_9"          , "q118_shared_5_10",          "q118_shared_5_11",          "q118_shared_6_1",          
"q118_shared_6_2",           "q118_shared_6_3" ,          "q118_shared_6_4",           "q118_shared_6_5",           "q118_shared_6_6"  ,        
"q118_shared_6_7",           "q118_shared_6_8"   ,        "q118_shared_6_9",           "q118_shared_6_10",          "q118_shared_6_11"   ,      
"q118_shared_7_1",           "q118_shared_7_2"     ,      "q118_shared_7_3",           "q118_shared_7_4",           "q118_shared_7_5"      ,    
"q118_shared_7_6",           "q118_shared_7_7"       ,    "q118_shared_7_8",           "q118_shared_7_9",           "q118_shared_7_10"       ,  
"q118_shared_7_11",          "q118_shared_8_1"         ,  "q118_shared_8_2",           "q118_shared_8_3",           "q118_shared_8_4"          ,
"q118_shared_8_5" ,          "q118_shared_8_6",           "q118_shared_8_7",           "q118_shared_8_8" ,          "q118_shared_8_9" ,         
"q118_shared_8_10",          "q118_shared_8_11")

# Subset the dataframe to include only the specified columns
subset_df <- BTQ2[, columns]

# Check if all values in each row of the subset dataframe are NA
na_rows <- apply(subset_df, 1, function(row) all(is.na(row)))

# Count the number of rows where all specified columns are NA
count <- sum(na_rows)

# Print the result
print(count)


```

#### Brand Sentiment

```{r}
#| label: Brand-Sentiment-All-Firms
#| fig-cap: Words that respondents select as being associated with each firm.
#| warning: false
library(tidyverse)
library(scales)
BRAND_SENTIMENT_DF<-dplyr::select(BTQ2,response_id, "q118_shared_1_1",          
"q118_shared_1_2",           "q118_shared_1_3",           "q118_shared_1_4",           "q118_shared_1_5",           "q118_shared_1_6",          
 "q118_shared_1_7",           "q118_shared_1_8",           "q118_shared_1_9",           "q118_shared_1_10",          "q118_shared_1_11" ,        
"q118_shared_2_1",           "q118_shared_2_2"   ,        "q118_shared_2_3",           "q118_shared_2_4",           "q118_shared_2_5"    ,      
"q118_shared_2_6",           "q118_shared_2_7"     ,      "q118_shared_2_8",           "q118_shared_2_9",           "q118_shared_2_10"     ,    
"q118_shared_2_11",          "q118_shared_3_1"       ,    "q118_shared_3_2",           "q118_shared_3_3",           "q118_shared_3_4"        ,  
"q118_shared_3_5",           "q118_shared_3_6"         ,  "q118_shared_3_7",           "q118_shared_3_8",           "q118_shared_3_9" ,         
"q118_shared_3_10",          "q118_shared_3_11" ,         "q118_shared_4_1",           "q118_shared_4_2",           "q118_shared_4_3"   ,       
"q118_shared_4_4",           "q118_shared_4_5"    ,       "q118_shared_4_6",           "q118_shared_4_7",           "q118_shared_4_8"     ,     
"q118_shared_4_9",           "q118_shared_4_10"     ,     "q118_shared_4_11",          "q118_shared_5_1",           "q118_shared_5_2"       ,   
"q118_shared_5_3",           "q118_shared_5_4"        ,   "q118_shared_5_5",           "q118_shared_5_6",           "q118_shared_5_7"         , 
"q118_shared_5_8",           "q118_shared_5_9"          , "q118_shared_5_10",          "q118_shared_5_11",          "q118_shared_6_1",          
"q118_shared_6_2",           "q118_shared_6_3" ,          "q118_shared_6_4",           "q118_shared_6_5",           "q118_shared_6_6"  ,        
"q118_shared_6_7",           "q118_shared_6_8"   ,        "q118_shared_6_9",           "q118_shared_6_10",          "q118_shared_6_11"   ,      
"q118_shared_7_1",           "q118_shared_7_2"     ,      "q118_shared_7_3",           "q118_shared_7_4",           "q118_shared_7_5"      ,    
"q118_shared_7_6",           "q118_shared_7_7"       ,    "q118_shared_7_8",           "q118_shared_7_9",           "q118_shared_7_10"       ,  
"q118_shared_7_11",          "q118_shared_8_1"         ,  "q118_shared_8_2",           "q118_shared_8_3",           "q118_shared_8_4"          ,
"q118_shared_8_5" ,          "q118_shared_8_6",           "q118_shared_8_7",           "q118_shared_8_8" ,          "q118_shared_8_9" ,         
"q118_shared_8_10",          "q118_shared_8_11")

BRAND_SENTIMENT_DF_LONG<- to_long(BRAND_SENTIMENT_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
BRAND_SENTIMENT_DF_LONG = na.omit(BRAND_SENTIMENT_DF_LONG)
unique(BRAND_SENTIMENT_DF_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
BRAND_SENTIMENT_DF_LONG <- BRAND_SENTIMENT_DF_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q118_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q118_shared_2_") ~ "Aon",
    str_detect(Variable, "q118_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q118_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q118_shared_5_") ~ "Hub International",
    str_detect(Variable, "q118_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q118_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q118_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




BRAND_SENTIMENT_DF_LONG<-BRAND_SENTIMENT_DF_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
BRAND_SENTIMENT_DF_LONG_PERC <- calculate_count_and_percentage(BRAND_SENTIMENT_DF_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
BRAND_SENTIMENT_DF_LONG_PERC<-dplyr::mutate(BRAND_SENTIMENT_DF_LONG_PERC,Percent=round(perc*100),0)

BRAND_SENTIMENT_DF_LONG_PERC<-as.data.frame(BRAND_SENTIMENT_DF_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(BRAND_SENTIMENT_DF_LONG_PERC)<-new_names
BRAND_SENTIMENT_DF_LONG_PERC<-BRAND_SENTIMENT_DF_LONG_PERC[-c(6)]



BRAND_SENTIMENT_DF_LONG_PERC_GOOD_LABELS <- BRAND_SENTIMENT_DF_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))


write.csv(BRAND_SENTIMENT_DF_LONG_PERC_GOOD_LABELS,"BRAND_SENTIMENT_DF_LONG_PERC_GOOD_LABELS.csv")




BRAND_SENTIMENT_DF_LONG_PERC_GOOD_LABELS %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Experienced", "Professional", "Personalized", "Trustworthy","Client-focused","Innovative","Untrustworthy","Impersonal","Overpriced","Good-value","Tech Enabled"),
                    values = c(
                      "Experienced" = "#36749D",
                      "Professional" = "#85714D",
                      "Personalized"="#DDE9F0",
                      "Trustworthy" =  "#95174C",
                      "Client-focused" = "#002A4E",
                      "Innovative" ="#004F51", 
                      "Untrustworthy"="#000000",
                      "Impersonal"="#d3d3d3",
                      "Overpriced" = "#90ee90",
                      "Good-value" = "#CBC3E3",
                      "Tech Enabled"="#FF474C"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brand-Sentiment-All-Firm.png", height = 4.5, width = 10, dpi = 1800)

```

@Brand-Sentiment-All-Firms shows the words associated with each insurance brokerage.

#### Brand Sentiment - Personal Lines

```{r}
#| label: Brand-Sentiment-All-Firms-PL
#| fig-cap: Words that personal lines respondents select as being associated with each firm.
#| warning: false

library(tidyverse)
library(scales)
BRAND_SENTIMENT_CL_DF<-dplyr::select(BTQ2_CL,response_id, "q118_shared_1_1",          
"q118_shared_1_2",           "q118_shared_1_3",           "q118_shared_1_4",           "q118_shared_1_5",           "q118_shared_1_6",          
 "q118_shared_1_7",           "q118_shared_1_8",           "q118_shared_1_9",           "q118_shared_1_10",          "q118_shared_1_11" ,        
"q118_shared_2_1",           "q118_shared_2_2"   ,        "q118_shared_2_3",           "q118_shared_2_4",           "q118_shared_2_5"    ,      
"q118_shared_2_6",           "q118_shared_2_7"     ,      "q118_shared_2_8",           "q118_shared_2_9",           "q118_shared_2_10"     ,    
"q118_shared_2_11",          "q118_shared_3_1"       ,    "q118_shared_3_2",           "q118_shared_3_3",           "q118_shared_3_4"        ,  
"q118_shared_3_5",           "q118_shared_3_6"         ,  "q118_shared_3_7",           "q118_shared_3_8",           "q118_shared_3_9" ,         
"q118_shared_3_10",          "q118_shared_3_11" ,         "q118_shared_4_1",           "q118_shared_4_2",           "q118_shared_4_3"   ,       
"q118_shared_4_4",           "q118_shared_4_5"    ,       "q118_shared_4_6",           "q118_shared_4_7",           "q118_shared_4_8"     ,     
"q118_shared_4_9",           "q118_shared_4_10"     ,     "q118_shared_4_11",          "q118_shared_5_1",           "q118_shared_5_2"       ,   
"q118_shared_5_3",           "q118_shared_5_4"        ,   "q118_shared_5_5",           "q118_shared_5_6",           "q118_shared_5_7"         , 
"q118_shared_5_8",           "q118_shared_5_9"          , "q118_shared_5_10",          "q118_shared_5_11",          "q118_shared_6_1",          
"q118_shared_6_2",           "q118_shared_6_3" ,          "q118_shared_6_4",           "q118_shared_6_5",           "q118_shared_6_6"  ,        
"q118_shared_6_7",           "q118_shared_6_8"   ,        "q118_shared_6_9",           "q118_shared_6_10",          "q118_shared_6_11"   ,      
"q118_shared_7_1",           "q118_shared_7_2"     ,      "q118_shared_7_3",           "q118_shared_7_4",           "q118_shared_7_5"      ,    
"q118_shared_7_6",           "q118_shared_7_7"       ,    "q118_shared_7_8",           "q118_shared_7_9",           "q118_shared_7_10"       ,  
"q118_shared_7_11",          "q118_shared_8_1"         ,  "q118_shared_8_2",           "q118_shared_8_3",           "q118_shared_8_4"          ,
"q118_shared_8_5" ,          "q118_shared_8_6",           "q118_shared_8_7",           "q118_shared_8_8" ,          "q118_shared_8_9" ,         
"q118_shared_8_10",          "q118_shared_8_11")

BRAND_SENTIMENT_CL_DF_LONG<- to_long(BRAND_SENTIMENT_CL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
BRAND_SENTIMENT_CL_DF_LONG = na.omit(BRAND_SENTIMENT_CL_DF_LONG)
unique(BRAND_SENTIMENT_CL_DF_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
BRAND_SENTIMENT_CL_DF_LONG <- BRAND_SENTIMENT_CL_DF_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q118_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q118_shared_2_") ~ "Aon",
    str_detect(Variable, "q118_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q118_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q118_shared_5_") ~ "Hub International",
    str_detect(Variable, "q118_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q118_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q118_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




BRAND_SENTIMENT_CL_DF_LONG<-BRAND_SENTIMENT_CL_DF_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
BRAND_SENTIMENT_CL_DF_LONG_PERC <- calculate_count_and_percentage(BRAND_SENTIMENT_CL_DF_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
BRAND_SENTIMENT_CL_DF_LONG_PERC<-dplyr::mutate(BRAND_SENTIMENT_CL_DF_LONG_PERC,Percent=round(perc*100),0)

BRAND_SENTIMENT_CL_DF_LONG_PERC<-as.data.frame(BRAND_SENTIMENT_CL_DF_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(BRAND_SENTIMENT_CL_DF_LONG_PERC)<-new_names
BRAND_SENTIMENT_CL_DF_LONG_PERC<-BRAND_SENTIMENT_CL_DF_LONG_PERC[-c(6)]



BRAND_SENTIMENT_CL_DF_LONG_PERC_GOOD_LABELS <- BRAND_SENTIMENT_CL_DF_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))

write.csv(BRAND_SENTIMENT_CL_DF_LONG_PERC_GOOD_LABELS,"BRAND_SENTIMENT_CL_DF_LONG_PERC_GOOD_LABELS.csv")




BRAND_SENTIMENT_CL_DF_LONG_PERC_GOOD_LABELS %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Experienced", "Professional", "Personalized", "Trustworthy","Client-focused","Innovative","Untrustworthy","Impersonal","Overpriced","Good-value","Tech Enabled"),
                    values = c(
                      "Experienced" = "#36749D",
                      "Professional" = "#85714D",
                      "Personalized"="#DDE9F0",
                      "Trustworthy" =  "#95174C",
                      "Client-focused" = "#002A4E",
                      "Innovative" ="#004F51", 
                      "Untrustworthy"="#000000",
                      "Impersonal"="#d3d3d3",
                      "Overpriced" = "#90ee90",
                      "Good-value" = "#CBC3E3",
                      "Tech Enabled"="#FF474C"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brand-Sentiment-CL-All-Firm.png", height = 4.5, width = 10, dpi = 1800)
```

@Brand-Sentiment-All-Firms-PL shows the words associated with each insurance brokerage.

#### Brand Sentiment - Commercial Lines

```{r}
#| label: Brand-Sentiment-All-Firms-CL
#| fig-cap: Words that commercial lines respondents select as being associated with each firm.
#| warning: false


library(tidyverse)
library(scales)
BRAND_SENTIMENT_PL_DF<-dplyr::select(BTQ2_PL,response_id, "q118_shared_1_1",          
"q118_shared_1_2",           "q118_shared_1_3",           "q118_shared_1_4",           "q118_shared_1_5",           "q118_shared_1_6",          
 "q118_shared_1_7",           "q118_shared_1_8",           "q118_shared_1_9",           "q118_shared_1_10",          "q118_shared_1_11" ,        
"q118_shared_2_1",           "q118_shared_2_2"   ,        "q118_shared_2_3",           "q118_shared_2_4",           "q118_shared_2_5"    ,      
"q118_shared_2_6",           "q118_shared_2_7"     ,      "q118_shared_2_8",           "q118_shared_2_9",           "q118_shared_2_10"     ,    
"q118_shared_2_11",          "q118_shared_3_1"       ,    "q118_shared_3_2",           "q118_shared_3_3",           "q118_shared_3_4"        ,  
"q118_shared_3_5",           "q118_shared_3_6"         ,  "q118_shared_3_7",           "q118_shared_3_8",           "q118_shared_3_9" ,         
"q118_shared_3_10",          "q118_shared_3_11" ,         "q118_shared_4_1",           "q118_shared_4_2",           "q118_shared_4_3"   ,       
"q118_shared_4_4",           "q118_shared_4_5"    ,       "q118_shared_4_6",           "q118_shared_4_7",           "q118_shared_4_8"     ,     
"q118_shared_4_9",           "q118_shared_4_10"     ,     "q118_shared_4_11",          "q118_shared_5_1",           "q118_shared_5_2"       ,   
"q118_shared_5_3",           "q118_shared_5_4"        ,   "q118_shared_5_5",           "q118_shared_5_6",           "q118_shared_5_7"         , 
"q118_shared_5_8",           "q118_shared_5_9"          , "q118_shared_5_10",          "q118_shared_5_11",          "q118_shared_6_1",          
"q118_shared_6_2",           "q118_shared_6_3" ,          "q118_shared_6_4",           "q118_shared_6_5",           "q118_shared_6_6"  ,        
"q118_shared_6_7",           "q118_shared_6_8"   ,        "q118_shared_6_9",           "q118_shared_6_10",          "q118_shared_6_11"   ,      
"q118_shared_7_1",           "q118_shared_7_2"     ,      "q118_shared_7_3",           "q118_shared_7_4",           "q118_shared_7_5"      ,    
"q118_shared_7_6",           "q118_shared_7_7"       ,    "q118_shared_7_8",           "q118_shared_7_9",           "q118_shared_7_10"       ,  
"q118_shared_7_11",          "q118_shared_8_1"         ,  "q118_shared_8_2",           "q118_shared_8_3",           "q118_shared_8_4"          ,
"q118_shared_8_5" ,          "q118_shared_8_6",           "q118_shared_8_7",           "q118_shared_8_8" ,          "q118_shared_8_9" ,         
"q118_shared_8_10",          "q118_shared_8_11" )

BRAND_SENTIMENT_PL_DF_LONG<- to_long(BRAND_SENTIMENT_PL_DF, id.vars = "response_id", variable.name = "Variable", value.name = "Value")

#remove all nas
BRAND_SENTIMENT_PL_DF_LONG = na.omit(BRAND_SENTIMENT_PL_DF_LONG)
unique(BRAND_SENTIMENT_PL_DF_LONG$Variable)


# Install and load the dplyr package if you haven't already
# install.packages("dplyr")
library(dplyr)


# Use case_when to create a new column based on the conditions
BRAND_SENTIMENT_PL_DF_LONG <- BRAND_SENTIMENT_PL_DF_LONG %>%
  mutate(Var_Cat = case_when(
    str_detect(Variable, "q118_shared_1_") ~ "Acrisure",
    str_detect(Variable, "q118_shared_2_") ~ "Aon",
    str_detect(Variable, "q118_shared_3_") ~ "Arthur J. Gallagher",
    str_detect(Variable, "q118_shared_4_") ~ "Brown & Brown",
    str_detect(Variable, "q118_shared_5_") ~ "Hub International",
    str_detect(Variable, "q118_shared_6_") ~ "Lockton and Companies",
    str_detect(Variable, "q118_shared_7_") ~ "Marsh McLennan",
    str_detect(Variable, "q118_shared_8_") ~ "WTW",
    TRUE ~ "Not Found"
  ))




BRAND_SENTIMENT_PL_DF_LONG<-BRAND_SENTIMENT_PL_DF_LONG[-c(2)]


#compute the percentage of respondents that selected each condition at each rank
BRAND_SENTIMENT_PL_DF_LONG_PERC <- calculate_count_and_percentage(BRAND_SENTIMENT_PL_DF_LONG, group_columns = c("Var_Cat","Value"))
                                                                    
BRAND_SENTIMENT_PL_DF_LONG_PERC<-dplyr::mutate(BRAND_SENTIMENT_PL_DF_LONG_PERC,Percent=round(perc*100),0)

BRAND_SENTIMENT_PL_DF_LONG_PERC<-as.data.frame(BRAND_SENTIMENT_PL_DF_LONG_PERC)

new_names<-c("Firm","Source","Count","Proportion","Percentage")
names(BRAND_SENTIMENT_PL_DF_LONG_PERC)<-new_names
BRAND_SENTIMENT_PL_DF_LONG_PERC<-BRAND_SENTIMENT_PL_DF_LONG_PERC[-c(6)]



BRAND_SENTIMENT_PL_DF_LONG_PERC_GOOD_LABELS <- BRAND_SENTIMENT_PL_DF_LONG_PERC %>%
  mutate(Proportion = abs(Proportion)) %>% 
  mutate(Percentage = percent(Proportion, accuracy = 1))
write.csv(BRAND_SENTIMENT_PL_DF_LONG_PERC_GOOD_LABELS,"BRAND_SENTIMENT_PL_DF_LONG_PERC_GOOD_LABELS.csv")





BRAND_SENTIMENT_PL_DF_LONG_PERC %>%
  ggplot(aes(x = Firm, 
             y = Proportion,
             fill = Source)) +
  geom_col() +
  geom_text(aes(label = Percentage),
            position = position_stack(vjust = 0.5),
            color = "white",
            size=2.5) +
  coord_flip() +
  scale_x_discrete() +
  scale_fill_manual(breaks = c("Experienced", "Professional", "Personalized", "Trustworthy","Client-focused","Innovative","Untrustworthy","Impersonal","Overpriced","Good-value","Tech Enabled"),
              values = c(
                      "Experienced" = "#36749D",
                      "Professional" = "#85714D",
                      "Personalized"="#DDE9F0",
                      "Trustworthy" =  "#95174C",
                      "Client-focused" = "#002A4E",
                      "Innovative" ="#004F51", 
                      "Untrustworthy"="#000000",
                      "Impersonal"="#d3d3d3",
                      "Overpriced" = "#90ee90",
                      "Good-value" = "#CBC3E3",
                      "Tech Enabled"="#FF474C"
                    )) +  
  labs(title = "",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "top")
# Save the ggplot as a PNG file
ggsave("Brand-Sentiment-PL-All-Firm.png", height = 4.5, width = 10, dpi = 1800)
```

@Brand-Sentiment-All-Firms-CL shows the words associated with each insurance brokerage.

#### Brand Sentiment Acrisure

```{r}
BTQ2_ACRISURE<-subset(BTQ2,q75_shared_1=="\nAcrisure\n")
BTQ2_ACRISURE_CL<-subset(BTQ2_ACRISURE,RESPONDENT_TYPE=="CL"&q75_shared_1=="\nAcrisure\n")
BTQ2_ACRISURE_CL
BTQ2_ACRISURE_PL<-subset(BTQ2_ACRISURE,RESPONDENT_TYPE=="PL")
BTQ2_ACRISURE_PL
```

#### Both line types

```{r}
#| label: fig-Brand-Sentiment-Word-Association
#| fig-cap: Respondents word association with Acrisure
#| warning: false

BTQ2_ACRISURE<-subset(BTQ2,q75_shared_1=="\nAcrisure\n")
BTQ2_ACRISURE_CL<-subset(BTQ2_ACRISURE,RESPONDENT_TYPE!="	
PL")
BTQ2_ACRISURE_PL<-subset(BTQ2_ACRISURE,RESPONDENT_TYPE=="PL")

BRAND_SENTIMENT_WORD_ASSOCIATION_DF<-dplyr::select(BTQ2_ACRISURE,response_id,q118_shared_1_1,          
q118_shared_1_2,q118_shared_1_3,q118_shared_1_4,q118_shared_1_5,q118_shared_1_6,          
q118_shared_1_7,q118_shared_1_8,q118_shared_1_9,q118_shared_1_10,q118_shared_1_11)
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC <- process_data_pipeline_multiple_columns(BRAND_SENTIMENT_WORD_ASSOCIATION_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC, "value", "new_perc", "value", "BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.4))
```

@fig-Brand-Sentiment-Word-Association shows that for those aware of Acrisure associate Acrisure is associated with the words professional, trusthworthy, and experienced.

Need to combnine two plots here

```{r}
#| label: fig-Brand-Sentiment-Word-Association-PL
#| fig-cap: Personal Lines Respondents word association with Acrisure. 
#| warning: false

BRAND_SENTIMENT_WORD_ASSOCIATION_DF<-dplyr::select(BTQ2_ACRISURE,response_id,RESPONDENT_TYPE,q118_shared_1_1,          
q118_shared_1_2,q118_shared_1_3,q118_shared_1_4,q118_shared_1_5,q118_shared_1_6,          
q118_shared_1_7,q118_shared_1_8,q118_shared_1_9,q118_shared_1_10,q118_shared_1_11)
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC <- process_data_pipeline_multiple_columns(BRAND_SENTIMENT_WORD_ASSOCIATION_DF, id.var = c("response_id","RESPONDENT_TYPE"), default_value = 0, group_column = c("RESPONDENT_TYPE","value"))
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC$new_perc<-BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC$new_perc*100

BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2 <- BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC %>%
  mutate(RESPONDENT_TYPE = case_when(
    RESPONDENT_TYPE == "PL" ~ "Individuals",
    RESPONDENT_TYPE == "CL" ~ "Businesses",
    TRUE ~ RESPONDENT_TYPE  # Keep other values unchanged
  ))
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2  

# Add the new row using rbind
#new_row <- data.frame(RESPONDENT_TYPE = "Individuals", 
                      #value = "Tech Enabled", 
                      #count = 0, 
                      #perc = 0, 
                      #new_perc = 0)

#BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC <- rbind(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC, new_row)

# Print the dataframe
print(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2)

```

```{r}

require(ggplot2)
# Call the function without specifying y_lim, legend_position
p19<-create_grouped_bar_plot(
  data = BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2, 
  x_var = "value", 
  y_var = "new_perc", 
  fill_var = "RESPONDENT_TYPE", 
  plot_name = "acrisure-brand-sentiment-line-of-business-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,100),
  legend_position = c(1,1),
  decimals = 0
)
p19


# Call the function with horizontal bar plot adjustments
p20<-create_grouped_horizontal_bar_plot(
  data = BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2, 
  x_var = "value", 
  y_var = "new_perc", 
  fill_var = "RESPONDENT_TYPE", 
  plot_name = "acrisure-brand-sentiment-line-of-business-plot-2", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "(%)",
  y_lim = c(0, 55),
  legend_position = c(1,1),
 decimals = 0
)
p20


```

```{r}
require(ggplot2)
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2<-subset(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2,BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2$value!='0')
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2$value <- droplevels(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2$value)
# Call the function without specifying y_lim, legend_position
p21<-create_grouped_bar_plot(
  data = BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC2, 
  x_var = "value", 
  y_var = "new_perc", 
  fill_var = "RESPONDENT_TYPE", 
  plot_name = "acrisure-brand-sentiment-line-of-business-plot-3", 
  plot_title = "", 
  x_label = "Line of Business", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,75),
  legend_position = c(1,1),
  decimals = 0
)
p21


```

#### Personal Lines types

```{r}
#| label: fig-Brand-Sentiment-Word-Association-PL
#| fig-cap: Personal Lines Respondents word association with Acrisure. 
#| warning: false

BRAND_SENTIMENT_WORD_ASSOCIATION_PL_DF<-dplyr::select(BTQ2_ACRISURE_PL,response_id,q118_shared_1_1,          
q118_shared_1_2,q118_shared_1_3,q118_shared_1_4,q118_shared_1_5,q118_shared_1_6,          
q118_shared_1_7,q118_shared_1_8,q118_shared_1_9,q118_shared_1_10,q118_shared_1_11)
BRAND_SENTIMENT_WORD_ASSOCIATION_PL_DF_PERC <- process_data_pipeline_multiple_columns(BRAND_SENTIMENT_WORD_ASSOCIATION_PL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BRAND_SENTIMENT_WORD_ASSOCIATION_PL_DF_PERC, "value", "new_perc", "value", "BRAND_SENTIMENT_WORD_ASSOCIATION_PL_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```

@fig-Brand-Sentiment-Word-Association-PL shows that for those PL respondents aware of Acrisure associate Acrisure is associated with the words professional, trusthworthy, and experienced.

#### Commercial Lines types

```{r}
#| label: fig-Brand-Sentiment-Word-Association-CL
#| fig-cap: Commercial Lines Respondents word association with Acrisure. 
#| warning: false
BRAND_SENTIMENT_WORD_ASSOCIATION_CL_DF<-dplyr::select(BTQ2_ACRISURE_CL,response_id,q118_shared_1_1,          
q118_shared_1_2,q118_shared_1_3,q118_shared_1_4,q118_shared_1_5,q118_shared_1_6,          
q118_shared_1_7,q118_shared_1_8,q118_shared_1_9,q118_shared_1_10,q118_shared_1_11)
BRAND_SENTIMENT_WORD_ASSOCIATION_CL_DF_PERC <- process_data_pipeline_multiple_columns(BRAND_SENTIMENT_WORD_ASSOCIATION_CL_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BRAND_SENTIMENT_WORD_ASSOCIATION_CL_DF_PERC, "value", "new_perc", "value", "BRAND_SENTIMENT_WORD_ASSOCIATION_CL_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```

@fig-Brand-Sentiment-Word-Association-CL shows that for those CL respondents aware of Acrisure associate Acrisure is associated with the words professional, trusthworthy, and experienced. CL respondents also associate Acrisure with the term good value.

#### Word Associate By Line Type

```{r}
#| label: fig-Brand-Sentiment-Word-Association-Line-Type
#| fig-cap:  Respondents word association with Acrisure. 
#| warning: false
BRAND_SENTIMENT_WORD_ASSOCIATION_DF<-dplyr::select(BTQ2_ACRISURE,RESPONDENT_TYPE,response_id,q118_shared_1_1,          
q118_shared_1_2,q118_shared_1_3,q118_shared_1_4,q118_shared_1_5,q118_shared_1_6,          
q118_shared_1_7,q118_shared_1_8,q118_shared_1_9,q118_shared_1_10,q118_shared_1_11)
BRAND_SENTIMENT_WORD_ASSOCIATION_DF
BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC <- process_data_pipeline_multiple_columns(BRAND_SENTIMENT_WORD_ASSOCIATION_DF, id.var = c("response_id","RESPONDENT_TYPE"), default_value = 0, group_column = c("RESPONDENT_TYPE","value"))
bar_plot_percent_ordered(BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC, "value", "new_perc", "value", "BRAND_SENTIMENT_WORD_ASSOCIATION_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5),facet_var = 'RESPONDENT_TYPE')
```

@fig-Brand-Sentiment-Word-Association-Line-Type shows that for those both CL and PL respondents aware of Acrisure associate Acrisure is associated with the words professional, trusthworthy, and experienced. CL respondents also associate Acrisure with the term good value.

#### Awareness by social media

```{r}
BTQ2_awareness_social_media<-replace_NA_with_value(BTQ2,columns = c("q75_shared_1","q62_shared_1","q62_shared_2","q62_shared_3","q62_shared_4","q62_shared_5","q62_shared_6","q62_shared_7","q62_shared_8","q62_shared_9","q62_shared_10","q62_shared_11"), replace_value = 0)
BTQ2_awareness_social_media
```

```{r}
require(vtable)
BTQ2_awareness_social_media_tab<-st(BTQ2_awareness_social_media,vars=c("q62_shared_1","q62_shared_2","q62_shared_3","q62_shared_4","q62_shared_5","q62_shared_6","q62_shared_7","q62_shared_8","q62_shared_9","q62_shared_10","q62_shared_11"),group="q75_shared_1",out="csv",file="Acrisure-awareness-social-network.csv")
BTQ2_awareness_social_media_tab
```

#### Understanding of Acrisure

Q303_CL:In the previous questions you indicated that you were aware of Acrisure. To the best of your knowledge, which of the following products does Acrisure offer? (Select all that apply) Please note that your response to this question will not affect your ability to complete the rest of the survey.

```{r}
#| label: fig-Acrisure-Product-Understanding
#| fig-cap: Acrisure product understanding
#| warning: false
ACRISURE_KNOWLEDGE_DF<-subset(BTQ2_CL,q75_shared_1=="\nAcrisure\n")
ACRISURE_KNOWLEDGE_DF<-dplyr::select(ACRISURE_KNOWLEDGE_DF,response_id,q303_cl_1,q303_cl_2,q303_cl_3,q303_cl_4,q303_cl_5,q303_cl_6,q303_cl_7,q303_cl_8,q303_cl_9,q303_cl_10,q303_cl_11)
ACRISURE_KNOWLEDGE_DF
ACRISURE_KNOWLEDGE_DF_PERC <- process_data_pipeline_multiple_columns(ACRISURE_KNOWLEDGE_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(ACRISURE_KNOWLEDGE_DF_PERC, "value", "new_perc", "value", "ACRISURE_KNOWLEDGE_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.2))
```

Q303_PL:In the previous questions you indicated that you were aware of Acrisure. To the best of your knowledge, what does Acrisure do? Please describe what Acrisure does or what you know about Acrisure in a short sentence.

If you do not know please type 'Don't know' into the box below.

Your response to this question will not affect your ability to participate in the rest of the survey.

```{r}
generate_wordcloud(BTQ2_PL, "q303_pl", "acrisure-function.png")
```

## Discussion

### **Brand Metrics Insights**

Brand awareness has increased from Q2 2024. Improvements in methodology may be partially responsible for these improvements. In the current sample, men, adults under 40, and CL respondents, report a greater awareness of Acrisure. Men's higher level of reported awareness of Acrisure may be in part, because more men in our sample were current Acrisure customers.

Acrisure's customer service is highly effective, a majority of Acrisure customers rate their last service experience as "Extremely positive".

A majority of the CL sample who are aware of Acrisure would consider us for future business. The sample that reported the highest interest in considering Acrisure for future business are SME decision makers of companies with less than 50 employees.

Prospective customers who prefer to use a digital self service tool for purchasing insurance policies are interested in considering Acrisure for future business. This fits nicely with Acrisures focus on transitioning its business to digital insurance policy purchasing. Those aware of Acrisure would also recommend us to a friend or colleague for business.

Acrisure has successfully targeted SME decision makers because a higher percentage of CL respondents report seeing an Acrisure ad, relative to PL respondents. Younger adults, and those under 40, are also more likely to report seeing an ad

Respondent's ad recall matches Acrisures ad focus. The most common sources were: streaming services, social media, online searches, and email

Acrisure is associated with the words: Experienced, Professional, and Trustworthy, indicating positive brand sentiment.
