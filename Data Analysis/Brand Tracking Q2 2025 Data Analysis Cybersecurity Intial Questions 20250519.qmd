---
title: "Brand Tracking Q1 2025 Data Analysis "
author: "Graham Albert"
toc: true
number-sections: true
toc-location: left
format:
  pdf:
    documentclass: report
    keep-tex: true
    toc: true
    toc-depth: 5
    number-sections: true
    colorlinks: true
    highlight-style: github
execute:
  echo: false
  warning: true
  fig-width: 10
  fig-height: 4.5
  fig-format: png
  fig-asp: 900
editor: visual
cache: true
---

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| include: false
# install_and_load_packages_from_file.R
install_and_load_packages_from_file <- function(file_path) {
  # Read the list of packages from the specified text file
  listOfPackages <- scan(file_path, character(), quote = "")
  
  # Install and load packages
  for (pkg in listOfPackages) {
    if (!pkg %in% installed.packages()) {
      install.packages(pkg, dependencies = TRUE)
    }
    tryCatch({
      library(pkg, character.only = TRUE)
      cat(paste("Loaded package: ", pkg, "\n"))
    }, error = function(e) {
      cat(paste("Error loading package: ", pkg, "\n"))
      cat(paste("Error message: ", conditionMessage(e), "\n"))
    })
  }
}

# Call the function with the file path
install_and_load_packages_from_file("~/git/Cross-Sell/Functions/required_packages.txt")
runScriptsInCurrentDirectory <- function(directory = "Functions", skipScripts = character(0)) {
  # Get the list of R script files in the specified directory
  scriptFiles <- list.files(directory, pattern = ".R$", full.names = TRUE)
  
  # Check if there are any script files
  if (length(scriptFiles) == 0) {
    cat(paste("No R script files found in the '", directory, "' directory.\n", sep = ""))
    return(NULL)
  }
  
  # Iterate through the script files and run each one
  for (scriptFile in scriptFiles) {
    # Check if the script should be skipped
    if (basename(scriptFile) %in% skipScripts) {
      cat("Skipping script:", scriptFile, "\n")
      next
    }
    
    cat("Running script:", scriptFile, "\n")
    
    # Use tryCatch to run the script with a 15-second timeout
    tryCatch({
      system.time({
        source(scriptFile, local = TRUE)
      })$elapsed
    }, error = function(e) {
      cat("Script", scriptFile, "was not run (timed out).\n")
    })
    
    cat("Script", scriptFile, "completed.\n")
  }
}


# Specify the scripts to skip (replace with your script filenames)
scriptsToSkip <- c("create_summary_table.R","runScriptsInCurrentDirectory.R")

# Call the function to run scripts in the current directory, skipping specified scripts
runScriptsInCurrentDirectory(directory = "Functions",skipScripts = scriptsToSkip)

library(tidyr)
library(dplyr)
library(reshape2)
# This processing pipeline combines three functions to transform and process data.
# 1. It starts by converting the data from wide to long format using the to_long function.
# 2. Then it replaces NAs in the resulting dataframe with a specified default value.
# 3. Next, it factors all columns in the dataframe using the factorize_column function.
# 4. Finally, it calculates counts and percentages by grouping the last two columns (variable and value)
#    using the calculate_count_and_percentage function.
# Function to transform data from wide to long format with multiple id.vars
to_long <- function(dataframe, id.vars, variable.name, value.name) {
  if (!is.character(id.vars)) {
    stop("id.vars must be a character vector.")
  }
  
  melted_data <- reshape2::melt(dataframe, id.vars = id.vars, variable.name = variable.name, value.name = value.name)
  
  return(melted_data)
}

# Function to factorize all columns in a dataframe
factorize_column <- function(dataframe, columns = NULL) {
  if (is.null(columns)) {
    columns <- names(dataframe)
  }
  
  for (col in columns) {
    if (is.factor(dataframe[[col]])) {
      next
    }
    
    dataframe[[col]] <- as.factor(dataframe[[col]])
  }
  
  return(data.frame(dataframe))
}

# Function to calculate counts and percentages by grouping columns
calculate_count_and_percentage <- function(dataframe, group_columns = NULL) {
  if (is.null(group_columns)) {
    group_columns <- names(dataframe)[c(length(dataframe) - 1, length(dataframe))]
  }
  
  result <- dataframe %>%
    group_by(!!!syms(group_columns)) %>%
    summarise(count = n()) %>%
    mutate(perc = count / sum(count))
    
  return(data.frame(result))
}

# Updated process_data_pipeline function without total_rows
process_data_pipeline_single_column<- function(dataframe, id.var = NULL, default_value = 0, group_column = NULL) {
  df_long_data <- to_long(dataframe, id.vars = id.var, variable.name = "variable", value.name = "value")
  df_long_data <- replace(df_long_data, is.na(df_long_data), default_value)
  df_long_data <- factorize_column(df_long_data)
  df_long_data <- data.frame(df_long_data)
  result <- calculate_count_and_percentage(df_long_data, group_columns = group_column)
  result <- result[result$value != default_value, ]
  return(result)
}
library(extrafont)
library(magick)
library(jtools)
library(ggplot2)
library(reshape2)
library(scales)

#The bar_plot_percent function creates a bar plot with percentages. It takes a dataframe,
#dataframe, and the names of the x-axis variable, x_var, the y-axis variable, y_var, and 
#the fill variable, fill_var. Additional optional arguments include plot_name, facet_var, main_title
#, x_axis_label, y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.

# Function to create a bar plot with percentages
bar_plot_percent <- function(dataframe, x_var, y_var = "perc", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(!!as.name(x_var), desc(!!as.name(y_var))), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
  print(p)
}



#The function bar_plot_percent_ordered creates a bar plot with percentages, where 
#the bars are ordered by the values of the y-variable. It takes a dataframe, dataframe, 
#and the names of the x-axis variable, x_var, the y-axis variable, y_var, and the fill variable, 
#fill_var. It also accepts additional optional arguments such as plot_name, facet_var, main_title, x_axis_label,
#y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.


# Updated function to create a bar plot with percentages, bars ordered by y values

# Updated function to create a bar plot with percentages, bars ordered by y values
bar_plot_percent_ordered <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 5), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 12, height = 4.5, dpi = 1800)
  return(p) 
  print(p)
}


library(ggplot2)
library(scales)

# Function definition
bar_plot_percent <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Convert x_var to factor with ordered levels
  dataframe[[x_var]] <- factor(dataframe[[x_var]], levels = unique(dataframe[[x_var]]))
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = !!as.name(x_var), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 12, height = 4.5, dpi = 1800)
  return(p)
}

#This function takes x,y and fill variables and generates a bar plot using theme
# and color pallette for presentations at Acrisure.



#The create_bar_chart function generates a bar plot using themes and a color palette 
#for presentations at Acrisure, taking as inputs data (the dataframe), x_var (the x-axis variable), 
#fill_var (the variable for fill), and facet_var (optional variable for facets).
#The function also has parameters for plot_name (output plot filename), percentage
#(whether to display percentages or counts), and main_title (title for the plot)

create_bar_chart <- function(data, x_var, fill_var = x_var, facet_var = NULL, plot_name = "defaultplot.png", percentage = FALSE, main_title = NULL) {
  # Load required packages
  library(extrafont)
  library(magick)
  library(jtools)
  library(ggplot2)
  library(reshape2)
  library(scales)
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#313131")
  
  # Define the common theme
  apatheme <- theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 4, family = 'sans'),
      legend.title = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.position = "none",
      axis.text.x = element_text(angle = 55, vjust = 1, hjust = 1)
    )
  
  # Create a ggplot
  p <- ggplot(data, aes(x = !!as.name(x_var), fill = !!as.name(fill_var))) +
    geom_bar(stat = ifelse(percentage, "identity", "count")) +
    apatheme +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(data[[fill_var]]))) +
    labs(title = ifelse(!is.null(main_title), main_title, plot_name), y = ifelse(percentage, "Pct. Selected", "Count"), x = NULL)
  
  # Add facet_wrap if facet_var is not NULL
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Calculate and add percentage or count labels to y-axis based on the 'percentage' argument
  if (percentage) {
    p <- p + geom_text(stat = 'identity', aes(label = paste0(round(100 * count / sum(count)), "%")), vjust = 1, size = 3, colour = "white")
  } else {
    p <- p + geom_text(stat = 'count', aes(label = after_stat(count)), vjust = 1, size = 3, colour = "white") # Set label text color to white
  }
  
  # Display the plot
  print(p)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
}


# Updated function to create a bar plot with percentages and bars ordered by y values
create_bar_chart_ordered <- function(dataframe, x_var, y_var, fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Count", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(!!as.name(x_var), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = sprintf("%.2f", !!as.name(y_var))), vjust = 1, size = 2, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display numbers rounded to two decimals
  p <- p + scale_y_continuous()
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}




#The bar_chart_count function generates a bar chart with counts, considering inputs such as dataframe (the dataframe),
#x_var (the x-axis variable), fill_var (the variable for fill), plot_name (output plot filename), main_title (title for the plot), 
#x_axis_label (label for the x-axis), and y_axis_label (label for the y-axis).

# Updated function to create a bar chart with counts
bar_chart_count <- function(dataframe, x_var, fill_var, facet_var = NULL, plot_name = "default_plot.png", main_title = NULL, x_axis_label = NULL, y_axis_label = "Count") {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = factor(!!as.name(x_var)), fill = factor(!!as.name(fill_var)))) +
    geom_bar() +
    scale_fill_manual(values = custom_palette) +
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}




library(ggplot2)
bar_chart_count_with_error <- function(dataframe, x_var, y_var, fill_var, facet_var = NULL, plot_name = "default_plot.png", main_title = NULL, x_axis_label = NULL, y_axis_label = "Count") {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = factor(!!as.name(x_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity") +
    geom_errorbar(
      aes(x = factor(!!as.name(x_var)), ymin = !!as.name(y_var) - sd, ymax = !!as.name(y_var) + sd),
      width = 0.2, colour = "black"
    ) +
    scale_fill_manual(values = custom_palette) +
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}

library(tidyr)
library(dplyr)
library(reshape2)

# Function to transform data from wide to long format with multiple id.vars
#to_long takes a dataframe and transforms it from wide to long format using the reshape2 package. 
#It takes dataframe as input and outputs the transformed data melted_data.
to_long <- function(dataframe, id.vars, variable.name, value.name) {
  if (!is.character(id.vars)) {
    stop("id.vars must be a character vector.")
  }
  melted_data <- reshape2::melt(dataframe, id.vars = id.vars, variable.name = variable.name, value.name = value.name)
  return(melted_data)
}

# Function to factorize all columns in a dataframe

#factorize_column converts all columns in the dataframe into factors, ensuring
#that each column is a factor variable. It takes dataframe as input and outputs
#the dataframe with all columns converted to factors.
# Function to factorize columns while maintaining the order of the levels
# Function to factorize columns while maintaining the original levels order
factorize_column <- function(dataframe, columns = NULL, levels = NULL) {
  if (is.null(columns)) {
    columns <- names(dataframe)
  }
  for (col in columns) {
    if (is.factor(dataframe[[col]])) {
      next
    }
    if (is.null(levels)) {
      dataframe[[col]] <- as.factor(dataframe[[col]])
    } else {
      dataframe[[col]] <- factor(dataframe[[col]], levels = unique(dataframe[[col]]))
    }
  }
  return(dataframe)
}


# Function to calculate counts and percentages by grouping columns
# Updated calculate_count_and_percentage function to calculate counts and percentages within each level of group_columns

#calculate_count_and_percentage calculates counts and percentages by grouping columns 
#specified in group_columns. It groups the dataframe, calculates the count and percentage within each group, 
#and then ungroups the data. It takes dataframe as input and outputs the resulting calculated counts and percentages.

calculate_count_and_percentage <- function(dataframe, group_columns = NULL) {
  if (is.null(group_columns)) {
    group_columns <- names(dataframe)[c(length(dataframe) - 1, length(dataframe))]
  }
  
  result <- dataframe %>%
    group_by(!!!syms(group_columns)) %>%
    summarise(count = n()) %>%
    mutate(perc = count / sum(count)) %>%
    ungroup()  # Remove grouping
  
  return(result)
}

#new_percent calculates new percentages by multiplying the existing percentage (perc) 
#in the dataframe with the difference between total_columns and the length of id_vars. 
#It takes dataframe as input and outputs the dataframe with the new percentage added.

# Function to calculate new percentages
new_percent <- function(dataframe, id_vars, total_columns) {
  require(dplyr)
  difference <- total_columns - length(id_vars)
  dataframe <- dataframe %>%
    mutate(new_perc = perc * difference)
  return(dataframe)
}

# Updated process_data_pipeline function without total_rows argument
#process_data_pipeline_multiple_columns is an updated version of the data processing pipeline function. 
#It performs the following steps: transforming data from wide to long format, replacing NAs with a default value, 
#converting all columns to factors, ensuring the data is in a dataframe, calculating count and percentage, 
#removing rows where the value column equals 0, and finally calculating new percentages. 
#It takes dataframe as input and outputs the processed data.

process_data_pipeline_multiple_columns <- function(dataframe, id.var = NULL, default_value = 0, group_column = NULL) {
  # Step 1: Transform data from wide to long format using to_long
  df_long_data <- to_long(dataframe, id.vars = id.var, variable.name = "variable", value.name = "value")
  
  # Step 2: Replace NAs with default_value
  df_long_data <- replace(df_long_data, is.na(df_long_data), default_value)
  
  # Step 3: Factorize all columns
  df_long_data <- factorize_column(df_long_data)
  
  # Step 4: Ensure the data is in a data.frame
  df_long_data <- data.frame(df_long_data)
  
  # Step 5: Calculate count and percentage with the specified group_column
  result <- calculate_count_and_percentage(df_long_data, group_columns = group_column)
  
  # Step 6: Remove rows where value column equals 0
  result <- result[result$value != default_value, ]
  
  # Step 7: Calculate new percentages
  result <- new_percent(result, id_vars = id.var, total_columns = ncol(dataframe))
  
  return(result)
}

#| include: false
#The compute_mean_and_se function computes the mean and standard error for all columns
#except the first two (ID and Name) in a dataframe, taking dataframe as an input and an 
#optional column_names parameter for specific columns.

#The compute_mean_and_se_grouped function, which utilizes the dplyr package, computes 
#the mean and standard error grouped by a categorical variable, taking dataframe as an 
#input and optional parameters such as column_names for specific columns and groupby for the grouping variable. 
#This function also checks for numeric columns and skips non-numeric ones.


#Compute mean and SE for all columns except the first two (ID and Name)
compute_mean_and_se <- function(dataframe, column_names = NULL) {
  # If column_names is not specified, select all columns except the first two
  if (is.null(column_names)) {
    column_names <- names(dataframe)[3:length(dataframe)]
  }
  
  # Initialize an empty dataframe to store the results
  result_df <- data.frame(Column = character(0), Mean = numeric(0), SE = numeric(0))
  
  # Loop through the specified column names
  for (col_name in column_names) {
    # Check if the column is a factor
    if (is.factor(dataframe[[col_name]])) {
      # Convert factor to numeric
      dataframe[[col_name]] <- as.numeric(dataframe[[col_name]])
    }
    
    # Subset the dataframe to exclude NA values in the current column
    subset_df <- dataframe[!is.na(dataframe[[col_name]]), ]
    
    # Compute the mean and standard error
    mean_val <- mean(subset_df[[col_name]])
    se_val <- sd(subset_df[[col_name]]) / sqrt(length(subset_df[[col_name]]))
    
    # Create a new row for the result dataframe
    result_row <- data.frame(Column = col_name, Mean = mean_val, SE = se_val)
    
    # Append the result row to the result dataframe
    result_df <- rbind(result_df, result_row)
  }
  
  return(result_df)
}


#Compute mean and se grouped by a categorical variab;le
library(dplyr)

compute_mean_and_se_grouped <- function(dataframe, column_names = NULL, groupby = NULL) {
  # If column_names is not specified, select all columns except the first two
  if (is.null(column_names)) {
    column_names <- names(dataframe)[3:length(dataframe)]
  }
  
  # Initialize an empty dataframe to store the results
  result_df <- data.frame(Column = character(0), Group = character(0), Mean = numeric(0), SE = numeric(0))
  
  # Loop through the specified column names
  for (col_name in column_names) {
    # Check if the column is numeric
    if (is.numeric(dataframe[[col_name]])) {
      # If groupby is specified, calculate mean and SE within each group using dplyr
      if (!is.null(groupby)) {
        grouped_data <- dataframe %>%
          group_by_at(vars(all_of(groupby))) %>%
          summarise(Mean = mean(.data[[col_name]], na.rm = TRUE),
                    SE = sd(.data[[col_name]], na.rm = TRUE) / sqrt(n())) %>%
          mutate(Column = col_name)
        
        result_df <- bind_rows(result_df, grouped_data)
      } else {
        # Subset the dataframe to exclude NA values in the current column
        subset_df <- dataframe[!is.na(dataframe[[col_name]]), ]
        
        # Compute the mean and standard error
        mean_val <- mean(subset_df[[col_name]])
        se_val <- sd(subset_df[[col_name]]) / sqrt(length(subset_df[[col_name]]))
        
        # Create a new row for the result dataframe
        result_row <- data.frame(Column = col_name, Group = "Overall", Mean = mean_val, SE = se_val)
        
        # Append the result row to the result dataframe
        result_df <- bind_rows(result_df, result_row)
      }
    } else {
      cat("Column", col_name, "is not numeric. Skipping...\n")
    }
  }
  
  return(result_df)
}

library(wordcloud)
library(tm)
library(RColorBrewer)

# List of common stop words in English
stop_words <- c("i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves",
                "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their",
                "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was",
                "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and",
                "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between",
                "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off",
                "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any",
                "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so",
                "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "d", "ll", "m", "o", "re", "ve", "y",
                "ain", "aren", "couldn", "didn", "doesn", "hadn", "hasn", "haven", "isn", "ma", "mightn", "mustn", "needn", "shan",
                "shouldn", "wasn", "weren", "won", "wouldn")

generate_wordcloud <- function(dataframe, text_column, output_filename) {
  # Parameter validation
  if (!text_column %in% colnames(dataframe)) {
    stop("The specified text column does not exist in the dataframe.")
  }
  if (nrow(dataframe) == 0) {
    stop("The dataframe is empty.")
  }
  
  tryCatch({
    # Create a Corpus from the text_column
    corpus <- Corpus(VectorSource(dataframe[[text_column]]))
    
    # Convert to lowercase and remove punctuation
    corpus <- tm_map(corpus, content_transformer(tolower))
    corpus <- tm_map(corpus, removePunctuation)
    
    # Remove common stop words
    corpus <- tm_map(corpus, removeWords, stop_words)
    
    # Create a Document-Term Matrix
    dtm <- DocumentTermMatrix(corpus)
    
    # Convert the Document-Term Matrix to a matrix
    word_freq_matrix <- as.matrix(dtm)
    
    # Calculate word frequencies
    word_freqs <- colSums(word_freq_matrix)
    
    # Create a data frame of word frequencies
    word_freq_df <- data.frame(word = names(word_freqs), freq = word_freqs)
    
    # Filter out words that are two letters or shorter
    word_freq_df <- word_freq_df[nchar(as.character(word_freq_df$word)) > 2, ]
    
    # Set up the word cloud plot dimensions
    par(mar = rep(1, 4))  # Adjust the margins as needed
    
    # Create a word cloud with the specified color palette and white background
    wordcloud(
      words = word_freq_df$word,
      freq = word_freq_df$freq,
      scale = c(3, 0.5),
      min.freq = 1,
      colors = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131"),  # Specified color palette
      bg = "white"
    )
    
    # Save the word cloud as a PNG file
    png(filename = paste0(output_filename, ".png"), width = 800, height = 600, res = 100) # Adjust width, height, and res as needed
    print(wordcloud(words = word_freq_df$word, freq = word_freq_df$freq, scale = c(3, 0.5), min.freq = 1, 
                    colors = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131"), bg = "white"))
    dev.off() # Close the PNG device
  }, error = function(e) {
    cat("An error occurred: ", conditionMessage(e), "\n")
  })
}


library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() +  # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}
library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() +  # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}



# Explanation of the Custom Horizontal Bar Plot Function:
# This function takes a dataframe and several customizable parameters to create a horizontal bar plot using ggplot2.
# Users can specify the x-axis variable, y-axis variable, fill variable, plot name, facet variable for faceted plots,
# main title, x-axis label, y-axis label, and y-axis limits.
# Load required libraries
library(tidyverse)
library(scales)

# Custom color palette
library(ggplot2)

# Function to create a customizable horizontal bar plot
create_horizontal_bar_plot <- function(
    dataframe,
    x_var,
    y_var = "perc",
    fill_var,
    plot_name = "default_plot.png",
    main_title = NULL,
    x_axis_label = NULL,
    y_axis_label = "Pct Selected",
    y_limits = c(0, 1)
) {
  p <- ggplot(dataframe, aes(x = {{x_var}}, y = {{y_var}}, fill = {{fill_var}})) +
    geom_col() +
    geom_text(aes(label = scales::percent({{y_var}})),
              position = position_stack(vjust = 0.5),
              color = "white",
              size = 2.5) +
    coord_flip() +
    scale_x_discrete() +
    scale_fill_manual(values = custom_palette) +
    labs(
      title = ifelse(is.null(main_title), "", main_title),
      x = ifelse(is.null(x_axis_label), "", x_axis_label),
      y = ifelse(is.null(y_axis_label), "", y_axis_label)
    ) +
    theme_minimal() +
    ylim(y_limits)
  
  ggsave(plot_name, plot = p, width = 10, height = 6, dpi = 300)
  return(p)
}

# Example usage:
set.seed(123)
test_df <- data.frame(
  Category = rep(c("A", "B", "C"), each = 3),
  Value = runif(9),
  Group = rep(c("Group1", "Group2", "Group3"), times = 3)
)

custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")

create_horizontal_bar_plot(
  dataframe = test_df,
  x_var = Category,
  y_var = Value,
  fill_var = Group,
  plot_name = "custom_plot.png",
  main_title = "Custom Plot",
  x_axis_label = "X-Axis Label",
  y_axis_label = "Custom Y-Axis Label",
  y_limits = c(0, 1)
)


library(tidyverse)
library(scales)
library(reshape2)


# Main pipeline function
custom_pipeline <- function(
    dataframe,
    variable_columns,
    Rating
) {
  dataframe %>%
    pivot_longer(cols = all_of(variable_columns), names_to = "Variable", values_to = "Value") %>%
    group_by(Variable, Value) %>%
    summarise(Count = n()) %>%
    ungroup() %>%
    mutate(
      Proportion = if_else(
        Value %in% Rating,
        Count / sum(Count),
        NA_real_
      ),
      Percentage = scales::percent(Proportion, accuracy = 1)
    ) %>%
    arrange(Variable)
}

# Example usage of the custom_pipeline function
set.seed(123)
test_df <- data.frame(
  response_id = 1:100,
  q1 = sample(c("A", "B", "C", "D"), 100, replace = TRUE),
  q2 = sample(c("X", "Y", "Z"), 100, replace = TRUE),
  q3 = sample(c("Yes", "No"), 100, replace = TRUE)
)

custom_result <- custom_pipeline(
  dataframe = test_df,
  variable_columns = c("q1", "q2", "q3"),
  Rating = c("A", "X", "Yes")
)

print(custom_result)


library(extrafont)
library(magick)
library(jtools)
library(ggplot2)
library(reshape2)
library(scales)

#The bar_plot_percent function creates a bar plot with percentages. It takes a dataframe,
#dataframe, and the names of the x-axis variable, x_var, the y-axis variable, y_var, and 
#the fill variable, fill_var. Additional optional arguments include plot_name, facet_var, main_title
#, x_axis_label, y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.

# Function to create a bar plot with percentages
bar_plot_percent <- function(dataframe, x_var, y_var = "perc", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 15), desc(!!as.name(y_var))), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust=0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
  print(p)
}



#The function bar_plot_percent_ordered creates a bar plot with percentages, where 
#the bars are ordered by the values of the y-variable. It takes a dataframe, dataframe, 
#and the names of the x-axis variable, x_var, the y-axis variable, y_var, and the fill variable, 
#fill_var. It also accepts additional optional arguments such as plot_name, facet_var, main_title, x_axis_label,
#y_axis_label, and y_limits. The function saves the plot as a PNG file and returns the plot object.


# Updated function to create a bar plot with percentages, bars ordered by y values
bar_plot_percent_ordered <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(x = reorder(stringr::str_wrap(!!as.name(x_var), 15), -!!as.name(y_var)), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 3, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p) 
  print(p)
}

# Example usage:
data_df <- data.frame(
  Category = rep(c("A", "B", "C", "D"), each = 4),
  Percentage = runif(16, min = 0, max = 100)
  
)

bar_plot_percent(
  dataframe = data_df,
  x_var = "Category",        # Use quotes for variable names
  y_var = "Percentage",      # Use quotes for variable names
  fill_var = "Category",  # Use quotes for variable names
  plot_name = "bar_plot_percentage.png",
  main_title = "Bar Plot Example",
  x_axis_label = "Categories",
  y_axis_label = "Percentage"
)


library(ggplot2)
library(scales)

# Sample dataframe for testing
data_df <- data.frame(
  Category = as.factor(c(1, 2, 3, 4, 5, 4, 1, 3, 2, 5)),
  Percentage = runif(10, min = 0, max = 100),
  Group = rep(c("A", "B"), each = 5)
)

# Function definition
bar_plot_percent <- function(dataframe, x_var, y_var = "Percentage", fill_var, plot_name = "default_plot.png", facet_var = NULL, main_title = NULL, x_axis_label = NULL, y_axis_label = "Pct Selected", y_limits = c(0, 1)) {
  # Convert x_var to factor with ordered levels
  dataframe[[x_var]] <- factor(dataframe[[x_var]], levels = unique(dataframe[[x_var]]))
  
  # Define the color palette
  custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
  
  # Create a ggplot
  p <- ggplot(dataframe, aes(stringr::str_wrap(!!as.name(x_var), 15), y = !!as.name(y_var), fill = factor(!!as.name(fill_var)))) +
    geom_bar(stat = "identity", width = 0.4) +
    geom_text(stat = 'identity', aes(label = round(!!as.name(y_var) * 100)),   vjust = 1, size = 0, colour = "white") +
    scale_fill_manual(values = rep(custom_palette, length.out = n_distinct(dataframe[[fill_var]]))) +
    expand_limits(y = y_limits) +  # Adjust y-axis limits
    labs(title = main_title, y = y_axis_label, x = x_axis_label) +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 8, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 0, vjust = 1, hjust=0.5)
    )
  
  # Apply facet_wrap if facet_var is specified
  if (!is.null(facet_var)) {
    p <- p + facet_wrap(vars(!!as.name(facet_var)))
  }
  
  # Scale y-axis to display percentages
  p <- p + scale_y_continuous(labels = scales::percent)
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 1800)
  return(p)
}

# Test the function
bar_plot_percent(data_df, "Category", "Percentage", "Group", "bar_plot_ordered.png", main_title = "Bar Plot Example", x_axis_label = "Categories", y_axis_label = "Percentage")



##############################################################################
#1 load_survey_data() takes the necessary parameters (API key, base URL, survey 
#ID, and output filename) and calls the other helper functions.
#2	load_libraries(): This function loads the required R packages:qualtRics, sjlabelled, tidyverse, janitor, and skimr.
#3	set_api_credentials(): This function sets the Qualtrics API credentials using the provided API key and base URL.
#4	fetch_survey_data(): This function fetches the survey data from Qualtrics using the provided survey ID.
#5	save_survey_responses(): This function saves the survey data as a CSV file with the given filename.
#6	read_csv_and_get_colnames(): This function reads the CSV file, gets the column names, and returns the column names and the raw data.
#7	main(): This is the main function that orchestrates the entire process. It calls the helper functions in the correct order to load the survey data, save it as a CSV file, and print the column names.
##############################################################################

load_survey_data <- function(api_key = NULL, base_url = NULL, surveyID) {
  # Load necessary libraries
  load_libraries <- function() {
    library(qualtRics)
    library(sjlabelled)
    library(tidyverse)
    library(janitor)
    library(skimr)
    library(magrittr)
  }
  
  # Set API credentials
  set_api_credentials <- function(api_key, base_url) {
    qualtrics_api_credentials(api_key = api_key,
                              base_url = base_url,
                              overwrite = TRUE,
                              install = TRUE)
  }
  
  # Fetch survey data
  fetch_survey_data <- function(surveyID) {
    tryCatch(
      {
        fetch_survey(surveyID = surveyID, force_request = TRUE)
      },
      error = function(e) {
        message("Error fetching survey data: ", e$message)
        message("Please check your API key and base URL.")
        stop("Qualtrics API authentication error")
      }
    )
  }
  
  # Save survey responses as a CSV file
  save_survey_responses <- function(data, filename) {
    write.csv(data, file = filename, row.names = FALSE)
  }
  
  # Read CSV file and get column names
  read_csv_and_get_colnames <- function(filename, skip_rows = 3) {
    col_names <- colnames(readr::read_csv(filename, n_max = 0))
    raw_data <- readr::read_csv(filename, col_names = col_names, skip = skip_rows)
    list(col_names = col_names, raw_data = raw_data)
  }
  
  # Define columns to remove
  cols_to_remove <- c(
    "StartDate", "EndDate", "Status", "IPAddress", "Progress", "Duration (in seconds)",
    "Finished", "RecordedDate", "RecipientLastName", "RecipientFirstName", "RecipientEmail",
    "ExternalReference", "LocationLatitude", "LocationLongitude", "DistributionChannel",
    "UserLanguage", "Q_RecaptchaScore", "Q_RelevantIDDuplicate", "Q_RelevantIDDuplicateScore",
    "Q_RelevantIDFraudScore", "Q_RelevantIDLastStartDate", "SC0", "opp", "Q_TotalDuration",
    "RISN", "rid", "LS", "V", "CMRID", "Q_CHL", "Q_BallotBoxStuffing", "Redix", "tg", "wave",
    "transaction_id", "SVID", "PS", "ResponseID", "PID", "psid", "K2", "med", "orderNumber",
    "gc", "term", "pureSpectrumRedirectUrl", "pureSpectrumSignatureValue"
  )
  
  # Load API key and base URL from .Renviron file
  readRenviron("~/.Renviron")
  
  # Set API credentials
  if (is.null(api_key) || is.null(base_url)) {
    api_key <- Sys.getenv("QUALTRICS_API_KEY")
    base_url <- Sys.getenv("QUALTRICS_BASE_URL")
  }
  set_api_credentials(api_key, base_url)
  
  # Fetch survey data
  survey_data <- fetch_survey_data(surveyID)
  
  # Save survey responses as a CSV file
  save_survey_responses(survey_data, "datafile.csv")
  
  # Check overlap with actual column names in data file
  load_libraries()
  csv_info <- read_csv_and_get_colnames("datafile.csv")
  col_names <- csv_info$col_names
  cols_to_remove_id <- col_names %in% cols_to_remove
  cols_to_remove <- col_names[cols_to_remove_id]
  
  # Remove the unwanted Qualtrics columns
  raw_data <- csv_info$raw_data
  raw_data <- dplyr::select(raw_data, !all_of(cols_to_remove))
  
  # Initial cleaning: Convert column names to tidyverse style guide and remove empty rows and columns
  cleaned_data <- janitor::clean_names(raw_data)
  dplyr::glimpse(cleaned_data)
  
  # Define function to delete columns with substring and retain
  delete_columns_with_substring_and_retain <- function(df, substring_to_delete, substring_to_retain) {
    deleted_columns <- vector("character", length = 0)
    for (col in names(df)) {
      if (grepl(substring_to_delete, col) && !grepl(substring_to_retain, col)) {
        df <- df[, !(names(df) %in% col)]
        deleted_columns <- c(deleted_columns, col)
      }
    }
    cat("Deleted columns:", paste(deleted_columns, collapse = ", "), "\n")
    return(df)
  }
  
  # Delete columns with substring 'DO' and retain columns with 'DO_DO'
  cleaned_data <- delete_columns_with_substring_and_retain(cleaned_data, '_do_', '_do_do_')
  
  # Delete columns with substring 'ADO' and retain columns with 'ADO_ADO'
  cleaned_data <- delete_columns_with_substring_and_retain(cleaned_data, '_ado_', '_ado_ado_')
  
  return(cleaned_data)
}





```

#### Load new and updated functions

```{r}
#| include: false
library(ggplot2)
library(dplyr)

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 2, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)


# create_regression_plot function takes a dataframe and creates a regression plot
# with options to display data points. It plots the relationship between the
# variables specified by x_var and y_var with a linear regression line.
# Additional customization options include setting the main_title, y_axis_label,
# x_axis_label, line_color, and whether to display data points using geom_point.
# The inputs for this function are dataframe (the input dataframe), x_var and y_var (the variables to be plotted).

# The function create_regression_plot generates a regression plot, and the example
# provided demonstrates how to use the function with sample data.

# Note this graph creates a regression plot
create_regression_plot <- function(dataframe, x_var, y_var, main_title = NULL, y_axis_label = NULL, x_axis_label = NULL, line_color = "#002A4E", plot_name = NULL) {
  # Check for missing values
  if (any(sapply(dataframe, function(x) any(is.na(x))))) {
    stop("The input dataframe contains missing values. Please handle them before using this function.")
  }
  
  # Check if the input arguments are valid
  stopifnot(
    x_var %in% names(dataframe),
    y_var %in% names(dataframe)
  )
  
  # Create a base plot with a linear regression line
  plot <- ggplot(dataframe, aes(x = !!rlang::sym(x_var), y = !!rlang::sym(y_var))) +
    geom_smooth(method = "lm", se = TRUE, color = line_color) +
    geom_point(size = 2, color = "#36749D") +
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      plot.title = element_text(hjust = 0.5), # Center the title
      plot.margin = margin(20, 20, 20, 20) # Add margin to the plot
    ) +
    labs(
      title = ifelse(!is.null(main_title), main_title, NULL),
      x = ifelse(!is.null(x_axis_label), x_axis_label, x_var),
      y = ifelse(!is.null(y_axis_label), y_axis_label, y_var)
    )
  
  # Save the plot as a PNG file if plot_name is provided
  if (!is.null(plot_name)) {
    ggsave(filename = plot_name, plot = plot, width = 10, height = 4.5, dpi = 1800)
  }
  
  return(plot)
}

# Example usage for a regression plot with points
set.seed(123)
data_df <- data.frame(
  X = rnorm(100),
  Y = rnorm(100)
)

plot_object <- create_regression_plot(
  data_df, x_var = "X", y_var = "Y",
  main_title = "Regression Plot",
  y_axis_label = "Y-Axis Label",
  x_axis_label = "X-Axis Label",
  line_color = "#002A4E",
  plot_name = "regression_plot.png"
)
print(plot_object)



library(ggplot2)
library(dplyr)

# Create a sample custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C", "#FAF9F6")

# Function to plot the frequency of the top 10 phrases
plot_top_phrases <- function(dataframe, column_name, plot_name = "top_phrases_plot.png") {
  # Check if the input dataframe and column_name are valid
  if (!is.data.frame(dataframe) || !is.character(column_name) || !column_name %in% names(dataframe)) {
    stop("Invalid input dataframe or column_name.")
  }
  
  # Group and count the phrases in the specified column
  phrase_counts <- dataframe %>%
    group_by(!!sym(column_name)) %>%
    summarize(Count = n()) %>%
    arrange(desc(Count)) %>%
    slice_head(n = 10)
  
  # Determine the number of unique phrases
  num_unique_phrases <- nrow(phrase_counts)
  
  # Create a fill column to assign unique colors from the custom palette
  phrase_counts$Fill <- rep(custom_palette, length.out = num_unique_phrases)
  
  # Create a ggplot bar chart
  p <- ggplot(phrase_counts, aes(x = reorder(!!sym(column_name), -Count), y = Count, fill = Fill)) +
    geom_bar(stat = "identity") +
    labs(title = paste("Top 10 Phrases in", column_name), y = "Frequency") +
    scale_fill_identity() + # Use the assigned colors
    theme_bw() +
    theme(
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      axis.line = element_line(),
      text = element_text(size = 6, family = 'sans'),
      legend.title = element_blank(),
      legend.position = "none",
      axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
    )
  
  # Save the plot as a PNG file
  ggsave(filename = plot_name, plot = p, width = 10, height = 4.5, dpi = 300)
  
  # Display the plot
  print(p)
}

generate_multiple_phrase_barcharts <- function(dataframe) {
  for (column_name in names(dataframe)) {
    if (is.character(dataframe[[column_name]])) {
      plot_name <- paste0(column_name, "_phrases_barchart.png")
      plot_top_phrases(dataframe, column_name, plot_name)
    } else {
      message("Column '", column_name, "' is not a text column. Skipping this column.")
    }
  }
}

# Create a sample dataframe
sample_data <- data.frame(
  ID = 1:10,
  question1 = c("apple", "banana", "apple", "cherry", "banana", "apple", "banana", "cherry", "date", "apple"),
  question2 = c("orange", "pear", "orange", "kiwi", "pear", "orange", "pear", "kiwi", "mango", "orange"),
  numeric_column = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
)

# Generate multiple phrase barcharts
generate_multiple_phrase_barcharts(sample_data)




#The generate_wordcloud function takes a dataframe, a text column, and an output filename as inputs. 
#It creates a word cloud plot from the text data in the specified column using the wordcloud function
#from the wordcloud package. It calculates the word frequencies, 
#sets up the plot dimensions, and saves the resulting word cloud as a PNG file with a fixed dark blue color and white background

# Example of how to call the function to save the word cloud plot


library(wordcloud)
library(tm)
library(RColorBrewer)

# List of common stop words in English
stop_words <- c("i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves",
                "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their",
                "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was",
                "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and",
                "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between",
                "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off",
                "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any",
                "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so",
                "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "d", "ll", "m", "o", "re", "ve", "y",
                "ain", "aren", "couldn", "didn", "doesn", "hadn", "hasn", "haven", "isn", "ma", "mightn", "mustn", "needn", "shan",
                "shouldn", "wasn", "weren", "won", "wouldn")

generate_wordcloud <- function(dataframe, text_column, output_filename, color_palette = c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131")) {
  # Parameter validation
  if (is.null(dataframe) || is.null(text_column) || is.null(output_filename)) {
    stop("All parameters must be provided.")
  }
  
  if (!text_column %in% colnames(dataframe)) {
    stop("The specified text column does not exist in the dataframe.")
  }
  
  if (nrow(dataframe) == 0) {
    message("The dataframe is empty. No word cloud can be generated.")
    return(invisible())
  }
  
  tryCatch({
    # Create a Corpus from the text_column
    corpus <- Corpus(VectorSource(dataframe[[text_column]]))
    
    # Convert to lowercase and remove punctuation
    corpus <- tm_map(corpus, content_transformer(tolower))
    corpus <- tm_map(corpus, removePunctuation)
    
    # Remove common stop words
    corpus <- tm_map(corpus, removeWords, stop_words)
    
    # Create a Document-Term Matrix
    dtm <- DocumentTermMatrix(corpus)
    
    # Convert the Document-Term Matrix to a matrix
    word_freq_matrix <- as.matrix(dtm)
    
    # Calculate word frequencies
    word_freqs <- colSums(word_freq_matrix)
    
    # Create a data frame of word frequencies
    word_freq_df <- data.frame(word = names(word_freqs), freq = word_freqs)
    
    # Filter out words that are two letters or shorter
    word_freq_df <- word_freq_df[nchar(as.character(word_freq_df$word)) > 2, ]
    
    # Set up the word cloud plot dimensions
    par(mar = rep(1, 4)) # Adjust the margins as needed
    
    # Create a word cloud with the specified color palette and white background
    word_cloud <- wordcloud(
      words = word_freq_df$word,
      freq = word_freq_df$freq,
      scale = c(3, 0.5),
      min.freq = 1,
      colors = color_palette,
      bg = "white"
    )
    
    # Save the word cloud as a PNG file
    png(filename = paste0(output_filename, ".png"), width = 800, height = 600, res = 100) # Adjust width, height, and res as needed
    print(word_cloud)
    dev.off() # Close the PNG device
    
    return(word_cloud)
  }, error = function(e) {
    cat("An error occurred: ", conditionMessage(e), "\n")
  })
}

set.seed(123)
sample_data <- data.frame(
  text_column = c(
    "This is a sample text for the word cloud.",
    "Another example text to be included.",
    "Testing the word cloud function.",
    "Final text sample for the word cloud."
  )
)


generate_wordcloud(sample_data, "text_column", "sample_wordcloud")

word_cloud_object <- generate_wordcloud(sample_data, "text_column", "sample_wordcloud")

custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#313131")
word_cloud_object <- generate_wordcloud(sample_data, "text_column", "sample_wordcloud", color_palette = custom_palette)






##Newest version 20240516

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = value_labels)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 2, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = custom_palette[1:length(value_labels)], 
                      breaks = rev(levels(reduced_df_long_perc$Value))) +  # Reverse the order of labels in the legend
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)


#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, value labels, and a custom color palette.
#'
#'@param df The input dataframe.
#'@param file_name The name of the output file to be saved.
#'@param question_names A vector of column names to be used for the chart.
#'@param var_labels A vector of variable labels to be used for the x-axis.
#'@param value_labels A vector of value labels to be used for the legend.
#'@param custom_palette A vector of custom colors to be used for the bars.
#'
#'@return The function saves the generated chart as a PNG file.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.6) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete() +
    scale_fill_manual(values = setNames(custom_palette[1:length(value_labels)], value_labels)) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D","#85714D", "#004F51", "#000000",  "#95174C","#DDE9F0")

generate_horizontal_bar_chart(
  sample_df,
  "sample_output.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)






library(ggplot2)
library(dplyr)

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.


generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object
  return(plot)
}


# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D", "#85714D","#004F51", "#000000",  "#95174C","#DDE9F0")

plot_object <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3","q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 1", "Variable 2", "Variable 3", "Variable 4", "Variable 5", "Variable 6", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)






generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

# Test the function
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")
result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output2.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 1", "Variable 2", "Variable 3", "Variable 4", "Variable 5", "Variable 6", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette
)

# Access the plot object and the data frame
plot_object <- result$plot
reduced_df_long_perc <- result$data




generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}


result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)



generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  reduced_df <- dplyr::select(df, response_id, all_of(question_names))
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order using forcats::fct_relevel()
  reduced_df_long$Variable <- forcats::fct_relevel(reduced_df_long$Variable, bar_order)
  
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = rev(value_labels))
  
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = rev(custom_palette[1:length(value_labels)])) +
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(
      axis.text.x = element_blank(),
      axis.title.x = element_blank(),
      panel.grid = element_blank(),
      text = element_text(size = 12, family = 'sans'),
      legend.position = "top"
    )
  
  ggsave(file_name, plot, height = 4.5, width = 10, dpi = 1800)
  
  return(list(plot = plot, data = reduced_df_long_perc))
}


result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)


##Newest version 20240516

#' Generate Horizontal Bar Chart
#'
#' This function generates a horizontal bar chart from a given dataframe. It allows the user to specify the variable names, variable labels, value labels, and a custom color palette.
#'
#' @param df The input dataframe.
#' @param file_name The name of the output file to be saved.
#' @param question_names A vector of column names to be used for the chart.
#' @param var_labels A vector of variable labels to be used for the x-axis.
#' @param value_labels A vector of value labels to be used for the legend.
#' @param custom_palette A vector of custom colors to be used for the bars.
#'
#' @return The generated horizontal bar chart plot object.

generate_horizontal_bar_chart <- function(df, file_name, question_names, var_labels, value_labels, custom_palette, bar_order) {
  # Select relevant columns
  reduced_df <- dplyr::select(df, response_id, !!!syms(question_names))
  
  # Reshape the data to long format
  reduced_df_long <- tidyr::pivot_longer(reduced_df, cols = -response_id, names_to = "Variable", values_to = "Value")
  
  # Remove NAs
  reduced_df_long <- na.omit(reduced_df_long)
  
  # Reorder the Variable column to match the desired order
  reduced_df_long$Variable <- factor(reduced_df_long$Variable, levels = bar_order)
  
  # Reorder the Value column to match the desired order
  reduced_df_long$Value <- factor(reduced_df_long$Value, levels = value_labels)
  
  # Calculate the percentage of respondents for each value
  reduced_df_long_perc <- reduced_df_long %>%
    group_by(Variable, Value) %>%
    summarize(Count = n()) %>%
    mutate(Proportion = Count / sum(Count),
           Percentage = scales::percent(Proportion, accuracy = 1)) %>%
    ungroup()
  
  # Create the horizontal bar chart
  plot <- ggplot(reduced_df_long_perc, aes(x = Variable, y = Proportion, fill = Value)) +
    geom_col(position = "fill", width = 0.9) +
    geom_text(aes(label = Percentage), position = position_fill(vjust = 0.5), size = 4, color = "white") +
    coord_flip() +
    scale_x_discrete(labels = var_labels) +
    scale_fill_manual(values = custom_palette[1:length(value_labels)], 
                      breaks = rev(levels(reduced_df_long_perc$Value))) +  # Reverse the order of labels in the legend
    labs(title = "", x = NULL, fill = NULL) +
    theme_minimal() +
    theme(axis.text.x = element_blank(),
          axis.title.x = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 12, family = 'sans'),
          legend.position = "top")
  
  # Save the plot as a PNG file
  ggsave(file_name, plot, height = 4.5, width = 12, dpi = 1800)
  
  # Return the plot object and the reduced_df_long_perc dataframe
  return(list(plot = plot, data = reduced_df_long_perc))
}

# Sample dataframe
set.seed(123)
sample_df <- data.frame(
  response_id = 1:100,
  q66_shared_1 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_2 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_3 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_4 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_5 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_6 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE),
  q66_shared_7 = sample(c("Yes", "No", "Maybe", "Unsure"), 100, replace = TRUE)
)

result <- generate_horizontal_bar_chart(
  sample_df,
  "sample_output3.png",
  question_names = c("q66_shared_1", "q66_shared_2", "q66_shared_3", "q66_shared_4", "q66_shared_5", "q66_shared_6", "q66_shared_7"),
  var_labels = c("Variable 2", "Variable 4", "Variable 1", "Variable 6", "Variable 3", "Variable 5", "Variable 7"),
  value_labels = c("Yes", "No", "Maybe", "Unsure"),
  custom_palette = custom_palette,
  bar_order = c("q66_shared_2", "q66_shared_4", "q66_shared_1", "q66_shared_6", "q66_shared_3", "q66_shared_5", "q66_shared_7")
)

```

# Brand Tracking Q4 2024

## **Summary**

The QSS team launched a brand-tracking survey in Q3.

Acrisure brand awareness has room for growth and remains consistent with previous quarters. Critically, brand sentiment toward Acrisure remains positive.

Moreover, respondents' perception of Acrisure's new brand ambassador, Lionel Richie, is positive. Respondents view Lionel as favorable and trustworthy.

Middle-aged adults have the most favorable views of Lionel Richie and report the strongest connection to him.

Acrisure's effort to be perceived as a fin-tech company is beginning to bare fruit among prospective CL customers.

From our questions on customer churn , we find CL respondents report churning from a provider for customer service centric reasons, whereas PL respondents are more price centric.

CL and PL respondents are similar across in their reasons for dropping policies. They are likely to drop policies when they no-longer need them or when they can find a competitor that offers better price for the same coverage.

Respondents who receive cross-sell attempts tend to appreciate their agent for bringing the product to their attention. This informs Acrisures Total Client focus, because it shows that when the cross-sell attempt is in the client's best interest then they will be appreciative.

## Methods

### Study Purpose

The primary purpose of this study was to continue to track brand awareness of Acrisure and its competitors. This will inform the decisions of the Innovation team and AGM. Secondary purposes of this study included:

1.  Tracking respondents future purchase consideration of insurance products, employee benefits (commercial lines only), and financial services products.

2.  Tracking respondents awareness of and sentiment towards Acrisure and other insurance providers.

3.  Tracking respondents awareness of and sentiment towards Acrisures new brand ambassdor, Lionel Richie, along with their awareness of and sentiment towards other insurance brand ambassadors.

4.  Determining what factors cause customers to churn from an insurance provider.

5.  Measuring respondents perception of their agent and how they feel when their agent tries to cross-sell to them.

### **Recruitment**

Participants were recruited via Qualtrics. Data collection occurred between April 25, 2024 to May 13, 2024.

### **Questions**

The survey was programmed in Qualtrics. For the Commercial Lines survey there were a total of X questions and the median completion time was 15 minutes. The IR for the personal lines sample was 9%.

For the Personal Lines survey there were a total of X questions and the median completion time was 15 minutes. The IR for the personal lines sample was 34%.

### **New Questions**

## **Sample**

The sample was a stratified sample. We collected a PL Sample and a CL Sample. A total of 616 PL and 404 CL respondents completed the survey. The IR for the CL sample was 6.7%. The IR for PL sample was XX%?

### **Screening**

For both samples all individuals were required to be US adults. For the Personal Lines sample individuals must represent Acrisures target customers, that is they must either have owned a home or a car and hold a home or auto policy, or both. For the Commercial Lines sample individuals were required to either be small business owners, equity partners in a business or individuals who are involved in insurance and/or employee benefit decision making. 

### Load Data Files

```{r}
BTQ2 <- read.csv("/Users/grahamalbert/git/Brand-Tracking-Q2-2025/BTQ2_DF_MERGED_DF_INCREASED.csv")
```

```{r}
BTQ2$RESPONDENT_TYPE<-factor(BTQ2$RESPONDENT_TYPE,
  levels = c(1,2),
  labels = c("PL","CL")
)
BTQ2
```

```{r}
# Define the breaks for age categories
breaks <- c(18, 30, 40, 50, 60, 70, 80)

# Create age categories using cut()
BTQ2$age_categories <- cut(BTQ2$q3_shared, breaks = breaks, labels = c("18-30", "30-40", "40-50", "50-60", "60-70", "70+"), include.lowest = TRUE, right = FALSE)
```

```{r}
#Lets create a staff size variable.

# Define the breaks
breaks <- seq(0, 500, by = 50)

# Define the labels for the bins
labels <- c('0-50', '51-100', '101-150', '151-200', '201-250', '251-300', '301-350', '351-400','401-450','451-500')

# Convert the numeric variable to a categorical variable
BTQ2_CL$company_size <- cut(BTQ2_CL$q25_cl, breaks = breaks, labels = labels, include.lowest = TRUE)

# Print the result_si
BTQ2_CL$company_size
require(vtable)
COMPANY_SIZE_TAB<-st(BTQ2_CL,vars = "company_size")
COMPANY_SIZE_TAB
```

Lets subset the data by company size and make this graph.

```{r}
BTQ2_CL_50_AND_UNDER<-subset(BTQ2_CL, BTQ2_CL$company_size == "0-50")
BTQ2_CL_50_AND_UNDER
BTQ2_CL_51_AND_OVER<-subset(BTQ2_CL,BTQ2_CL$company_size != "0-50")
BTQ2_CL_51_AND_OVER

```




### Commercial Lines

```{r}
BTQ2_CL<-subset(BTQ2,RESPONDENT_TYPE=="CL")
colnames(BTQ2_CL)
```

### Personal Lines

```{r}
BTQ2_PL<-subset(BTQ2,RESPONDENT_TYPE=="PL")
colnames(BTQ2_PL)
```

```{r}

replace_value <- 999
BTQ2 <- replace_na_in_factors(BTQ2, 999, 'q75_shared_1')
BTQ2$q75_shared_1
BTQ2$q75_shared_1<-factor(BTQ2$q75_shared_1,
                          labels=c("Aware of Acrisure","Not Aware of Acrisure"))

BTQ2$q75_shared_1
```

### Shared Demographics Questions

#### Business Solutions

#### Business Solution Product Ownership

Q33: Now we'd like to ask about the professional services and business solutions that your employer has recently purchased.\
\
For each of the following service areas, please indicate whether your employer currently has a third-party business solution (e.g., licensed software tool, contracted support).\
\
If your employer does not require a business solution for a given service area, you may leave that row blank.

```{r}
#| label: fig-Business-Solutions-Owned
#| fig-cap: Percentage of commercial lines respondents who own each type of business solutions
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of respondents who own each business solutions
require(dplyr)
BUSINESS_SOLUTION_OWN_DF<-dplyr::select(BTQ2_CL,response_id,q33_cl_1,q33_cl_2,q33_cl_3,q33_cl_5,q33_cl_6
,q33_cl_7,q33_cl_8,q33_cl_9,q33_cl_10,q33_cl_11,q33_cl_12,q33_cl_13,q33_cl_14,q33_cl_15,q33_cl_16,q33_cl_17,q33_cl_18)
BUSINESS_SOLUTION_OWN_DF_PERC <- process_data_pipeline_multiple_columns(BUSINESS_SOLUTION_OWN_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BUSINESS_SOLUTION_OWN_DF_PERC, "value", "new_perc", "value", "BUSINESS_SOLUTION_OWN_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```

@fig-Business-Solutions-Owned shows that 61% of commercial lines respondents own payroll services (55%), tax services (51%) and banking services (48%)

Lets subset the data by company size and make this graph.

```{r}
BTQ2_CL_50_AND_UNDER<-subset(BTQ2_CL, BTQ2_CL$company_size == "0-50")
BTQ2_CL_50_AND_UNDER
BTQ2_CL_51_AND_OVER<-subset(BTQ2_CL,BTQ2_CL$company_size != "0-50")
BTQ2_CL_51_AND_OVER

```

Product ownership for companies 50 and under

```{R}
#| fig-cap: Percentage-CL-under-50
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of respondents who own each business solutions for companies 50 and under
require(dplyr)
BUSINESS_SOLUTION_OWN_50_UNDER_DF<-dplyr::select(BTQ2_CL_50_AND_UNDER,response_id,q33_cl_1,q33_cl_2,q33_cl_3,q33_cl_5,q33_cl_6
,q33_cl_7,q33_cl_8,q33_cl_9,q33_cl_10,q33_cl_11,q33_cl_12,q33_cl_13,q33_cl_14,q33_cl_15,q33_cl_16,q33_cl_17,q33_cl_18)
BUSINESS_SOLUTION_OWN_50_UNDER_DF
BUSINESS_SOLUTION_OWN_50_UNDER_DF_PERC <- process_data_pipeline_multiple_columns(BUSINESS_SOLUTION_OWN_50_UNDER_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BUSINESS_SOLUTION_OWN_DF_PERC, "value", "new_perc", "value", "BUSINESS_SOLUTION_OWN_50_UNDER_DF.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```

@Percentage-CL-under-50 shows that of commercial lines respondents own payroll services (55%), tax services (51%) and banking services (48%)

Product ownership for companies with over 50 respondents

```{R}
#| fig-cap:  Percentage-CL-over-50
#| warning: false
#| fig-alt: Bar-chart depicting the percentage of respondents who own each business solutions for companies 50 and under
require(dplyr)
BUSINESS_SOLUTION_OWN_50_OVER_DF<-dplyr::select(BTQ2_CL_51_AND_OVER,response_id,q33_cl_1,q33_cl_2,q33_cl_3,q33_cl_5,q33_cl_6
,q33_cl_7,q33_cl_8,q33_cl_9,q33_cl_10,q33_cl_11,q33_cl_12,q33_cl_13,q33_cl_14,q33_cl_15,q33_cl_16,q33_cl_17,q33_cl_18)
BUSINESS_SOLUTION_OWN_50_OVER_DF
BUSINESS_SOLUTION_OWN_50_OVER_DF_PERC <- process_data_pipeline_multiple_columns(BUSINESS_SOLUTION_OWN_50_OVER_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BUSINESS_SOLUTION_OWN_DF_PERC, "value", "new_perc", "value", "BUSINESS_SOLUTION_OWN_50_OVER_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```
@Percentage-CL-over-50  shows that of commercial lines respondents own payroll services (55%), tax services (51%) and banking services (48%)



```{r}
require(vtable)
st(BTQ2_CL,vars = c("company_size"),group = c("q34_cl_4"))
```

Lets generate table showing the percentage of CL respondents who report owning each business solultion.

```{r}
#| label: tab-Business-Solutions-Owned
#| tab-cap: Percentage of commercial lines respondents who own each business solution
#| warning: false
BUSINESS_SOLUTION_OWN_DF_PERC<-mutate(BUSINESS_SOLUTION_OWN_DF_PERC,Percent=round(new_perc*100))
BUSINESS_SOLUTION_OWNERSHIP<-kable(BUSINESS_SOLUTION_OWN_DF_PERC[-c(3,4)])
BUSINESS_SOLUTION_OWNERSHIP
```

@tab-Business-Solutions-Owned shows that the most commonly owned business solution are payroll services and banking services.

#### Business Solution Future Purchase Intention

Q34: Below is a list of professional services that you indicated your employer does not have a business solution for. In the next year, how likely is your employer to purchase a software tool to provide each of the following services?

```{r}
#| label: fig-Business-Solution-Future-Likelihood
#| fig-cap: CL respondentes likelihood of purchasing business solutions  that they do not own.
#| warning: false


custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_Future_Purchase_Likelihood<- generate_horizontal_bar_chart(
  BTQ2_CL,
  "CL-Policy-Future-Purchase-Likelihood.png",
  question_names = c("q34_cl_1","q34_cl_2","q34_cl_3","q34_cl_5","q34_cl_6","q34_cl_7","q34_cl_8","q34_cl_9","q34_cl_10","q34_cl_11","q34_cl_12","q34_cl_13","q34_cl_14","q34_cl_15","q34_cl_16","q34_cl_17"),
  var_labels = c("Managed Cyber Security Services", "Vendor Management", "Lending Solutions", "On-Demand Pay Services","Retirement Planning",   "Professional Employer Organizations (PEO)",  "Bookkeeping Services", "Document Management", "Managed IT Services","Tax Services","Payment Processing","Staff Scheduling","Benefits Administration",  "Point-of-Sale (POS) Systems","Payroll Services", "Banking Services"),
  value_labels = c("Not at all likely", "A little likely", "Somewhat likely", "Very likely","Extremely likely"),
  custom_palette = custom_palette,
  bar_order = c( "q34_cl_17", "q34_cl_12","q34_cl_6", "q34_cl_7","q34_cl_1",   "q34_cl_9",  "q34_cl_15", "q34_cl_11",   "q34_cl_16","q34_cl_3","q34_cl_14","q34_cl_10","q34_cl_13","q34_cl_8","q34_cl_2", "q34_cl_5")
)

Business_Solutions_Future_Purchase_Likelihood

```

@fig-Business-Solution-Future-Likelihood indicates that 61% of commercial lines respondents who indicate that they do not own banking services report being extremely likely to purchase it in the next year.



Graphs future purchase consideration

#### Under 50

```{r}
#| label: fig-Business-Solution-Future-Likelihood-STAFF-UNDER-50
#| fig-cap: CL respondentes likelihood of purchasing business solutions  that they do not own - Staff size under 50
#| warning: false
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_Future_Purchase_Likelihood_STAFF_50_UNDER<- generate_horizontal_bar_chart(
  BTQ2_CL_50_AND_UNDER,
  "CL-Business-Solution-Future-Purchase-Likelihood-STAFF-UNDER-50.png",
question_names = c("q34_cl_1","q34_cl_2","q34_cl_3","q34_cl_5","q34_cl_6","q34_cl_7","q34_cl_8","q34_cl_9","q34_cl_10","q34_cl_11","q34_cl_12","q34_cl_13","q34_cl_14","q34_cl_15","q34_cl_16","q34_cl_17"),
var_labels = c("Managed Cyber Security Services", "Vendor Management", "Retirement Planning", "Lending Solutions", "Managed IT Services", "Bookkeeping Services", "Document Management",  "Benefits Administration",  "Point-of-Sale (POS) Systems","On-Demand Pay Services",  "Professional Employer Organizations (PEO)","Tax Services","Payment Processing","Staff Scheduling","Payroll Services", "Banking Services"),
value_labels = c("Not at all likely", "A little likely", "Somewhat likely", "Very likely","Extremely likely"),
custom_palette = custom_palette,
bar_order = c("q34_cl_17", "q34_cl_12","q34_cl_1","q34_cl_6",  "q34_cl_16",  "q34_cl_15", "q34_cl_11",    "q34_cl_13","q34_cl_8","q34_cl_3","q34_cl_7", "q34_cl_9","q34_cl_14","q34_cl_10","q34_cl_2", "q34_cl_5"))
Business_Solutions_Future_Purchase_Likelihood_STAFF_50_UNDER
```

#### Over 50

```{r}
#| label: fig-Business-Solution-Future-Likelihood-STAFF-OVER-5-
#| fig-cap: CL respondentes likelihood of purchasing business solutions  that they do not own. Staff size over 50
#| warning: false

custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_Future_Purchase_Likelihood_STAFF_OVER_50<- generate_horizontal_bar_chart(
  BTQ2_CL_51_AND_OVER,
  "CL-Business-Solution-Future-Purchase-Likelihood-STAFF-OVER-50.png",
   question_names = c("q34_cl_1","q34_cl_2","q34_cl_3","q34_cl_5","q34_cl_6","q34_cl_7","q34_cl_8","q34_cl_9","q34_cl_10","q34_cl_11","q34_cl_12","q34_cl_13","q34_cl_14","q34_cl_15","q34_cl_16","q34_cl_17"),
  var_labels = c("Vendor Management",  "On-Demand Pay Services", "Lending Solutions",  "Professional Employer Organizations (PEO)",  "Bookkeeping Services", "Managed Cyber Security Services", "Payment Processing","Staff Scheduling","Document Management", "Tax Services","Retirement Planning","Managed IT Services","Benefits Administration", "Payroll Services", "Point-of-Sale (POS) Systems", "Banking Services"),
  value_labels = c("Not at all likely", "A little likely", "Somewhat likely", "Very likely","Extremely likely"),
  custom_palette = custom_palette,
  bar_order = c(  "q34_cl_12","q34_cl_7",  "q34_cl_6",  "q34_cl_9",  "q34_cl_15","q34_cl_17","q34_cl_14","q34_cl_10", "q34_cl_11",  "q34_cl_3", "q34_cl_1","q34_cl_16","q34_cl_13","q34_cl_2", "q34_cl_8","q34_cl_5")
)
Business_Solutions_Future_Purchase_Likelihood_STAFF_OVER_50
```

#### Brokerage or D2C

```{r}

#| label: fig-Business-Solution-Brokerage-Vendor
#| fig-cap: CL business solution via brokerage or vendor
#| warning: false

custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")
Business_Solutions_Purchase_Method<- generate_horizontal_bar_chart(
  BTQ2_CL,
  "Business-Solutions-Purchase-Method.png",
  question_names = c("q35_cl_1","q35_cl_2","q35_cl_3","q35_cl_5","q35_cl_6","q35_cl_7","q35_cl_8","q35_cl_9","q35_cl_10","q35_cl_11","q35_cl_12","q35_cl_13","q35_cl_14","q35_cl_15","q35_cl_16","q35_cl_17","q35_cl_18"),
  var_labels = c(
"Staff Scheduling", "Banking Services", "Tax Services", "Vendor Management", "Document Management", "Payment Processing", "Bookkeeping Services", "Managed Cyber Security Services", "Lending Solutions", "On-Demand Pay Services", "Managed IT Services", "Point-of-Sale (POS) Systems", "Retirement Planning", "Professional Employer Organizations (PEO)", "Benefits Administration", "Payroll Services", "Surety Bonds"
),
  value_labels = c("Directly from vendor", "Through a broker"),
  bar_order = c("q35_cl_10", "q35_cl_5", "q35_cl_3", "q35_cl_12", "q35_cl_11", "q35_cl_14", "q35_cl_15", "q35_cl_17", "q35_cl_6", "q35_cl_7", "q35_cl_16", "q35_cl_8", "q35_cl_1", "q35_cl_9", "q35_cl_13", "q35_cl_2", "q35_cl_18"
),
  custom_palette = custom_palette
)
Business_Solutions_Purchase_Method
```

@fig-Business-Solution-Purchase-Method shows that 45% of respondents report preferring to purchase surety bonds via a broker


##### UNDER 50

```{r}

#| label: fig-Business-Solution-Brokerage-Vendor-UNDER-50
#| fig-cap: CL business solution via brokerage or vendor
#| warning: false

custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_BROKERAGE_VENDOR_UNDER_50<- generate_horizontal_bar_chart(
  BTQ2_CL_50_AND_UNDER,
  "CL-BUSINESS-SOLUTIONS-BROKERAGE-VENDOR-UNDER-50.png",
  question_names = c("q35_cl_1","q35_cl_2","q35_cl_3","q35_cl_5","q35_cl_6","q35_cl_7","q35_cl_8","q35_cl_9","q35_cl_10","q35_cl_11","q35_cl_12","q35_cl_13","q35_cl_14","q35_cl_15","q35_cl_16","q35_cl_17","q35_cl_18"),
  var_labels = c("Banking Services","Vendor Management","Bookkeeping Services","Payroll Services","Staff Scheduling","Tax Services","Managed IT Services","Document Management","Managed Cyber Security Services","On-Demand Pay Services","Point-of-Sale (POS) Systems","Benefits Administration","Payment Processing","Lending Solutions","Surety Bonds","Professional Employer Organizations (PEO)","Retirement Planning"),
  value_labels = c("Directly from vendor","Through a broker"),
  custom_palette = custom_palette,
  bar_order = c("q35_cl_5","q35_cl_12","q35_cl_15","q35_cl_2","q35_cl_10","q35_cl_3","q35_cl_16","q35_cl_11","q35_cl_17","q35_cl_7","q35_cl_8","q35_cl_13","q35_cl_14","q35_cl_6","q35_cl_18","q35_cl_9","q35_cl_1")
)
Business_Solutions_BROKERAGE_VENDOR_UNDER_50
```
@fig-Business-Solution-Brokerage-Vendor-UNDER-50 shows that companies want to purchae retirement planning and PEOs from a broker.

##### OVER 50

```{r}

#| label: fig-Business-Solution-Brokerage-Vendor-OVER-50
#| fig-cap: CL business solution via brokerage or vendor
#| warning: false

custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_BROKERAGE_VENDOR_OVER_50<- generate_horizontal_bar_chart(
  BTQ2_CL_51_AND_OVER,
  "CL-BUSINESS-SOLUTIONS-BROKERAGE-VENDOR-OVER-50.png",
  question_names = c("q35_cl_1","q35_cl_2","q35_cl_3","q35_cl_5","q35_cl_6","q35_cl_7","q35_cl_8","q35_cl_9","q35_cl_10","q35_cl_11","q35_cl_12","q35_cl_13","q35_cl_14","q35_cl_15","q35_cl_16","q35_cl_17","q35_cl_18"),
  var_labels = c("Staff Scheduling", "Tax Services", "Vendor Management", "Banking Services", "Retirement Planning", "Payment Processing", "Document Management", "Professional Employer Organizations (PEO)", "Lending Solutions", "Managed Cyber Security Services", "Point-of-Sale (POS) Systems", "On-Demand Pay Services", "Bookkeeping Services", "Benefits Administration", "Managed IT Services", "Surety Bonds", "Payroll Services"),
  value_labels = c("Directly from vendor","Through a broker"),
  custom_palette = custom_palette,
  bar_order = c('q35_cl_10', 'q35_cl_3', 'q35_cl_12', 'q35_cl_5', 'q35_cl_1', 'q35_cl_14', 'q35_cl_11', 'q35_cl_9', 'q35_cl_6', 'q35_cl_17', 'q35_cl_8', 'q35_cl_7', 'q35_cl_15', 'q35_cl_13', 'q35_cl_16', 'q35_cl_18', 'q35_cl_2'))
Business_Solutions_BROKERAGE_VENDOR_OVER_50_data<-Business_Solutions_BROKERAGE_VENDOR_OVER_50$data
write.csv(Business_Solutions_BROKERAGE_VENDOR_OVER_50_data,"Business_Solutions_BROKERAGE_VENDOR_OVER_50_data.csv")
Business_Solutions_BROKERAGE_VENDOR_OVER_50_data
```



Q308CL:Below is a list of professional services and business solutions. Please select all of the services that you think your employer would purchase together in a bundle.

Please create the first bundle of products that come to mind.

```{r}
#| label: fig-Business-Solutions-Bundling
#| fig-cap: Percentage of commercial lines respondents who would bundle each type of business solutions with others
#| warning: false
#| fig-alt: Bar-chart depicting percentage of respondents commercial lines respondents who would bundle each type of business solutions with others 
require(dplyr)
BUSINESS_SOLUTION_BUNDLE_DF<-dplyr::select(BTQ2_CL,response_id,q308_cl_1,q308_cl_2,q308_cl_3,q308_cl_5,q308_cl_6,q308_cl_8,q308_cl_9,q308_cl_10,q308_cl_11,q308_cl_12,q308_cl_13,q308_cl_14,q308_cl_14,q308_cl_15,q308_cl_16,q308_cl_17,q308_cl_18)
BUSINESS_SOLUTION_BUNDLE_DF_PERC <- process_data_pipeline_multiple_columns(BUSINESS_SOLUTION_BUNDLE_DF, id.var = c("response_id"), default_value = 0, group_column = c("value"))
bar_plot_percent_ordered(BUSINESS_SOLUTION_BUNDLE_DF_PERC, "value", "new_perc", "value", "BUSINESS_SOLUTION_BUNDLE_DF_PERC.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.5))
```



```{r}


# Define function to recode combinations
recode_combinations <- function(combo_string, mapping) {
  combo_vars <- unlist(strsplit(combo_string, ", "))
  mapped_vars <- sapply(combo_vars, function(var) mapping[var])
  paste(mapped_vars, collapse = ", ")
}

# Define variables
variables <- c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8",
               "q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14",
               "q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18")

# Create mapping
recode_mapping <- c(
  "q308_cl_1" = "Retirement Planning",
  "q308_cl_2" = "Payroll Services",
  "q308_cl_3" = "Tax Services",
  "q308_cl_5" = "Banking Services",
  "q308_cl_6" = "Lending Solutions",
  "q308_cl_8" = "Point-of-Sale (POS) Systems",
  "q308_cl_9" = "Professional Employer Organizations (PEO)",
  "q308_cl_10" = "Staff Scheduling",
  "q308_cl_11" = "Document Management",
  "q308_cl_12" = "Vendor Management",
  "q308_cl_13" = "Benefits Administration",
  "q308_cl_14" = "Payment Processing",
  "q308_cl_15" = "Bookkeeping Services",
  "q308_cl_16" = "Managed IT Services",
  "q308_cl_17" = "Managed Cyber Security Services",
  "q308_cl_18" = "Surety Bonds"
)

# Run the main analysis function to get the combinations list
combinations_list <- count_combinations(BUSINESS_SOLUTION_BUNDLE_DF, variables)

# Create a safer conversion of the combinations list to a dataframe
combinations_df <- data.frame(
  Combination = character(0),
  Count = numeric(0),
  stringsAsFactors = FALSE
)

# Handle the list to dataframe conversion manually to avoid warnings
if (length(combinations_list) > 0) {
  combo_names <- names(combinations_list)
  combo_counts <- numeric(length(combinations_list))
  
  for (i in 1:length(combinations_list)) {
    combo_counts[i] <- combinations_list[[i]]
  }
  
  combinations_df <- data.frame(
    Combination = combo_names,
    Count = combo_counts,
    stringsAsFactors = FALSE
  )
}

# Only proceed with further processing if we have data
if (nrow(combinations_df) > 0) {
  # Create a copy of the original combination column
  combinations_df$OriginalCombination <- combinations_df$Combination
  
  # Apply recoding to make combinations readable
  combinations_df$Combination <- sapply(combinations_df$OriginalCombination, recode_combinations, mapping = recode_mapping)
  
  # Add comma count for sorting
  combinations_df$comma_count <- str_count(combinations_df$OriginalCombination, ",") + 1
  
  # Sort by number of variables (descending) and then by count (descending)
  combinations_df_sorted <- combinations_df %>%
    arrange(desc(comma_count), desc(as.numeric(Count)))
  
  # Remove the temporary column used for sorting
  combinations_df_sorted$comma_count <- NULL
} else {
  # Create an empty sorted dataframe with the correct structure if there's no data
  combinations_df_sorted <- data.frame(
    Combination = character(0),
    Count = numeric(0),
    OriginalCombination = character(0),
    stringsAsFactors = FALSE
  )
}

# Write to CSV
write.csv(combinations_df_sorted, file = "business_solution_bundle_combinations.csv", row.names = FALSE)

# Print the final dataframe
print(combinations_df_sorted)

combinations_df_sorted$Percentage<-(combinations_df_sorted$Count/nrow(BUSINESS_SOLUTION_BUNDLE_DF))*100
combinations_df_sorted$Percentage<-round(combinations_df_sorted$Percentage,digits=1)
```




# Print the first few results


```{r}
#| label: fig-Business-Solution-Bundling-Preference
#| fig-cap: shows the percentage of respondents that prerfer to bundle each business solution
#| warning: false

# Subsetting the DataFrame to keep the top 5 rows
top_5_combinations <- head(combinations_df_sorted, 5)

# Displaying the sorted DataFrame and the top 5 rows
combinations_df_sorted
top_5_combinations$Percentage<-top_5_combinations$Percentage/100
bar_plot_percent_ordered(top_5_combinations, "Combination", "Percentage", "Combination", "Common-Combinations-Top-5.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.1))

```




Lets subset the data by company size and make this graph.

```{r}

BTQ2_CL_UNDER50<-subset(BTQ2_CL, BTQ2_CL$company_size == "0-50")
BTQ2_CL_UNDER50
BUSINESS_SOLUTION_BUNDLE_UNDER50_DF<-dplyr::select(BTQ2_CL_UNDER50,response_id,q308_cl_1,q308_cl_2,q308_cl_3,q308_cl_5,q308_cl_6,q308_cl_8,q308_cl_9,q308_cl_10,q308_cl_11,q308_cl_12,q308_cl_13,q308_cl_14,q308_cl_14,q308_cl_15,q308_cl_16,q308_cl_17,q308_cl_18)
BUSINESS_SOLUTION_BUNDLE_UNDER50_DF
BTQ2_CL_OVER50<-subset(BTQ2_CL,BTQ2_CL$company_size != "0-50")
BTQ2_CL_OVER50
BUSINESS_SOLUTION_BUNDLE_OVER50_DF<-dplyr::select(BTQ2_CL_OVER50,response_id,q308_cl_1,q308_cl_2,q308_cl_3,q308_cl_5,q308_cl_6,q308_cl_8,q308_cl_9,q308_cl_10,q308_cl_11,q308_cl_12,q308_cl_13,q308_cl_14,q308_cl_14,q308_cl_15,q308_cl_16,q308_cl_17,q308_cl_18)
BUSINESS_SOLUTION_BUNDLE_OVER50_DF
```

##### Under 50

```{R}

# Define function to recode combinations
recode_combinations <- function(combo_string, mapping) {
  combo_vars <- unlist(strsplit(combo_string, ", "))
  mapped_vars <- sapply(combo_vars, function(var) mapping[var])
  paste(mapped_vars, collapse = ", ")
}

# Define variables
variables <- c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8",
               "q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14",
               "q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18")

# Create mapping
recode_mapping <- c(
  "q308_cl_1" = "Retirement Planning",
  "q308_cl_2" = "Payroll Services",
  "q308_cl_3" = "Tax Services",
  "q308_cl_5" = "Banking Services",
  "q308_cl_6" = "Lending Solutions",
  "q308_cl_8" = "Point-of-Sale (POS) Systems",
  "q308_cl_9" = "Professional Employer Organizations (PEO)",
  "q308_cl_10" = "Staff Scheduling",
  "q308_cl_11" = "Document Management",
  "q308_cl_12" = "Vendor Management",
  "q308_cl_13" = "Benefits Administration",
  "q308_cl_14" = "Payment Processing",
  "q308_cl_15" = "Bookkeeping Services",
  "q308_cl_16" = "Managed IT Services",
  "q308_cl_17" = "Managed Cyber Security Services",
  "q308_cl_18" = "Surety Bonds"
)

# Run the main analysis function to get the combinations list
combinations_list_UNDER50 <- count_combinations(BUSINESS_SOLUTION_BUNDLE_UNDER50_DF, variables)

# Create a safer conversion of the combinations list to a dataframe
combinations_df <- data.frame(
  Combination = character(0),
  Count = numeric(0),
  stringsAsFactors = FALSE
)

# Handle the list to dataframe conversion manually to avoid warnings
if (length(combinations_list_UNDER50) > 0) {
  combo_names <- names(combinations_list_UNDER50)
  combo_counts <- numeric(length(combinations_list_UNDER50))
  
  for (i in 1:length(combinations_list_UNDER50)) {
    combo_counts[i] <- combinations_list_UNDER50[[i]]
  }
  
  combinations_df_UNDER50 <- data.frame(
    Combination = combo_names,
    Count = combo_counts,
    stringsAsFactors = FALSE
  )
}

# Only proceed with further processing if we have data
if (nrow(combinations_df_UNDER50) > 0) {
  # Create a copy of the original combination column
  combinations_df_UNDER50$OriginalCombination <- combinations_df_UNDER50$Combination
  
  # Apply recoding to make combinations readable
  combinations_df_UNDER50$Combination <- sapply(combinations_df_UNDER50$OriginalCombination, recode_combinations, mapping = recode_mapping)
  
  # Add comma count for sorting
  combinations_df_UNDER50$comma_count <- str_count(combinations_df_UNDER50$OriginalCombination, ",") + 1
  
  # Sort by number of variables (descending) and then by count (descending)
  combinations_df_UNDER50_sorted <- combinations_df_UNDER50 %>%
    arrange(desc(comma_count), desc(as.numeric(Count)))
  
  # Remove the temporary column used for sorting
  combinations_df_UNDER50_sorted$comma_count <- NULL
} else {
  # Create an empty sorted dataframe with the correct structure if there's no data
  combinations_df_UNDER50_sorted <- data.frame(
    Combination = character(0),
    Count = numeric(0),
    OriginalCombination = character(0),
    stringsAsFactors = FALSE
  )
}

# Write to CSV
write.csv(combinations_df_UNDER50_sorted, file = "business_solution_bundle_combinations_UNDER50.csv", row.names = FALSE)

# Print the final dataframe
print(combinations_df_UNDER50_sorted)

combinations_df_UNDER50_sorted$Percentage<-(combinations_df_UNDER50_sorted$Count/nrow(BUSINESS_SOLUTION_BUNDLE_UNDER50_DF))*100
combinations_df_UNDER50_sorted$Percentage<-round(combinations_df_UNDER50_sorted$Percentage,digits=1)



```

Now lets recode and graph it.

```{r}
#| label: fig-Business-Solution-Bundling-Preference-under-50
#| fig-cap: shows the percentage of respondents of companies with under 50 staff that prerfer to bundle each business solution
#| warning: false
# Subsetting the DataFrame to keep the top 5 rows
top_5_combinations_under_50 <- head(combinations_df_UNDER50_sorted)
top_5_combinations_under_50
# Displaying the sorted DataFrame and the top 5 rows
top_5_combinations_under_50
top_5_combinations_under_50$Percentage<-top_5_combinations_under_50$Percentage/100
bar_plot_percent_ordered(top_5_combinations_under_50, "Combination", "Percentage", "Combination", "Common-Combinations-Top-5-under-50.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.1))
```
@fig-Business-Solution-Bundling-Preference-under-50 shows that the most common bundle selected is baking services, POS, and Payment processing.


Over 50

```{R}

# Define function to recode combinations
recode_combinations <- function(combo_string, mapping) {
  combo_vars <- unlist(strsplit(combo_string, ", "))
  mapped_vars <- sapply(combo_vars, function(var) mapping[var])
  paste(mapped_vars, collapse = ", ")
}

# Define variables
variables <- c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8",
               "q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14",
               "q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18")

# Create mapping
recode_mapping <- c(
  "q308_cl_1" = "Retirement Planning",
  "q308_cl_2" = "Payroll Services",
  "q308_cl_3" = "Tax Services",
  "q308_cl_5" = "Banking Services",
  "q308_cl_6" = "Lending Solutions",
  "q308_cl_8" = "Point-of-Sale (POS) Systems",
  "q308_cl_9" = "Professional Employer Organizations (PEO)",
  "q308_cl_10" = "Staff Scheduling",
  "q308_cl_11" = "Document Management",
  "q308_cl_12" = "Vendor Management",
  "q308_cl_13" = "Benefits Administration",
  "q308_cl_14" = "Payment Processing",
  "q308_cl_15" = "Bookkeeping Services",
  "q308_cl_16" = "Managed IT Services",
  "q308_cl_17" = "Managed Cyber Security Services",
  "q308_cl_18" = "Surety Bonds"
)

# Run the main analysis function to get the combinations list
combinations_list_OVER50 <- count_combinations(BUSINESS_SOLUTION_BUNDLE_OVER50_DF, variables)

# Create a safer conversion of the combinations list to a dataframe
combinations_df <- data.frame(
  Combination = character(0),
  Count = numeric(0),
  stringsAsFactors = FALSE
)

# Handle the list to dataframe conversion manually to avoid warnings
if (length(combinations_list_OVER50) > 0) {
  combo_names <- names(combinations_list_OVER50)
  combo_counts <- numeric(length(combinations_list_OVER50))
  
  for (i in 1:length(combinations_list_OVER50)) {
    combo_counts[i] <- combinations_list_OVER50[[i]]
  }
  
  combinations_df_OVER50 <- data.frame(
    Combination = combo_names,
    Count = combo_counts,
    stringsAsFactors = FALSE
  )
}

# Only proceed with further processing if we have data
if (nrow(combinations_df_OVER50) > 0) {
  # Create a copy of the original combination column
  combinations_df_OVER50$OriginalCombination <- combinations_df_OVER50$Combination
  
  # Apply recoding to make combinations readable
  combinations_df_OVER50$Combination <- sapply(combinations_df_OVER50$OriginalCombination, recode_combinations, mapping = recode_mapping)
  
  # Add comma count for sorting
  combinations_df_OVER50$comma_count <- str_count(combinations_df_OVER50$OriginalCombination, ",") + 1
  
  # Sort by number of variables (descending) and then by count (descending)
  combinations_df_OVER50_sorted <- combinations_df_OVER50 %>%
    arrange(desc(comma_count), desc(as.numeric(Count)))
  
  # Remove the temporary column used for sorting
  combinations_df_OVER50_sorted$comma_count <- NULL
} else {
  # Create an empty sorted dataframe with the correct structure if there's no data
  combinations_df_OVER50_sorted <- data.frame(
    Combination = character(0),
    Count = numeric(0),
    OriginalCombination = character(0),
    stringsAsFactors = FALSE
  )
}

# Write to CSV
write.csv(combinations_df_OVER50_sorted, file = "business_solution_bundle_combinations_OVER50.csv", row.names = FALSE)

# Print the final dataframe
print(combinations_df_OVER50_sorted)

combinations_df_OVER50_sorted$Percentage<-(combinations_df_OVER50_sorted$Count/nrow(BUSINESS_SOLUTION_BUNDLE_OVER50_DF))*100
combinations_df_OVER50_sorted$Percentage<-round(combinations_df_OVER50_sorted$Percentage,digits=1)
```


```{r}
#| label: fig-Business-Solution-Bundling-Preference-over-50
#| fig-cap: shows the percentage of respondents of companies with over 50 staff that prerfer to bundle each business solution
#| warning: false
# Subsetting the DataFrame to keep the top 5 rows
top_5_combinations_over_50 <- head(combinations_df_OVER50_sorted)
# Displaying the sorted DataFrame and the top 5 rows
top_5_combinations_over_50
top_5_combinations_over_50$Percentage<-top_5_combinations_over_50$Percentage/100
bar_plot_percent_ordered(top_5_combinations_over_50, "Combination", "Percentage", "Combination", "Common-Combinations-Top-5-over-50.png", main_title = "", x_axis_label = " ", y_axis_label = "Pct. Selected",y_limits = c(0,0.1))
```
@fig-Business-Solution-Bundling-Preference-over-50 shows that the most common bundle selected is baking services, lendiong solutions, and Payment processing.



```{r}
require(vtable)
require(dplyr)
PL_PRODUCTS_BUNDLING_CL<-dplyr::select(BTQ2_CL,response_id,RESPONDENT_TYPE,company_size,q21_cl,q130_cl,q21_shared,q308_cl_1,q308_cl_2,q308_cl_3,q308_cl_5,q308_cl_6,q308_cl_8,q308_cl_9,q308_cl_10,q308_cl_11,q308_cl_12,q308_cl_13,q308_cl_14,q308_cl_14,q308_cl_15,q308_cl_16,q308_cl_17,q308_cl_18)

PL_PRODUCTS_BUNDLING_CL=replace_NA_with_value(PL_PRODUCTS_BUNDLING_CL,columns = c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8","q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14","q308_cl_14","q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18"),replace_value = 'NA')
PL_PRODUCTS_BUNDLING_CL
```

```{r}
require(vtable)
BUSINESS_PRODUCTS_BUNDLING_BY_BUSINESS_TYPE<-st(PL_PRODUCTS_BUNDLING_CL, vars = c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8","q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14","q308_cl_14","q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18"), group = "q130_cl", out="csv",file="BUSINESS_PRODUCTS_BUNDLING_BY_BUSINESS_TYPE.csv")
BUSINESS_PRODUCTS_BUNDLING_BY_BUSINESS_TYPE
```

Pay products for bundling - Company Size

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_BY_COMPANY_SIZE<-st(PL_PRODUCTS_BUNDLING_CL, vars = c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8","q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14","q308_cl_14","q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18"),group = "company_size",out="csv",file="PAY_PRODUCTS_BUNDLING_BY_COMPANY_SIZE.csv")
PAY_PRODUCTS_BUNDLING_BY_COMPANY_SIZE
```

#### Factoring and leveling covariates.

```{r}
PL_PRODUCTS_BUNDLING_CL$q21_cl<-as.factor(PL_PRODUCTS_BUNDLING_CL$q21_cl)
PL_PRODUCTS_BUNDLING_CL$q21_cl

PL_PRODUCTS_BUNDLING_CL$q21_cl<-factor(PL_PRODUCTS_BUNDLING_CL$q21_cl,
                       levels=c("$49,999 or less","$50,000–$99,999","$100,000–$249,999","$250,000–$499,999",
                                "$500,000-$999,999"," $1,000,000–$1,999,999","$2,000,000–$3,499,999","$3,500,000 or more","Don’t know","Prefer not to say"))

```

Pay products for bundling - By Revenue

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_BY_REVENUE<-st(PL_PRODUCTS_BUNDLING_CL, vars = c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8","q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14","q308_cl_14","q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18"),group = "q21_cl",out="csv", file="PAY_PRODUCTS_BUNDLING_BY_REVENUE.csv")
PAY_PRODUCTS_BUNDLING_BY_REVENUE
```

Pay products for bundling - By Industry

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_BY_INDUSTRY<-st(PL_PRODUCTS_BUNDLING_CL, vars = c("q308_cl_1","q308_cl_2","q308_cl_3","q308_cl_5","q308_cl_6","q308_cl_8","q308_cl_9","q308_cl_10","q308_cl_11","q308_cl_12","q308_cl_13","q308_cl_14","q308_cl_14","q308_cl_15","q308_cl_16","q308_cl_17","q308_cl_18"),group = "q21_shared",out="csv", file="PAY_PRODUCTS_BUNDLING_BY_INDUSTRY.csv")
PAY_PRODUCTS_BUNDLING_BY_INDUSTRY
```


```{r}
#| label: fig-Business-Solution-Next-Action
#| fig-cap: CL reported next action for owned products.
#| warning: false
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#004F51","#000000",  "#95174C","#DDE9F0")
Business_Solutions_Next_Action<- generate_horizontal_bar_chart(
  BTQ2_CL,
  "Business_Solutions_Next_Action.png",
  question_names = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),
var_labels = c("Managed Cyber Security Services", "Lending Solutions",
 "Professional Employer Organizations (PEO)", "Vendor Management", "Bookkeeping Services",  "On-Demand Pay Services",  "Document Management","Managed IT Services", "Point-of-Sale (POS) Systems","Tax Services",  "Retirement Planning",  "Payroll Services","Staff Scheduling", "Payment Processing", "Benefits Administration","Surety Bonds", "Banking Services"
),
  value_labels = c("Remain with the same provider", "Switch to a new provider", "Drop the service entirely", "Not applicable (one time purchase)"),
  custom_palette = custom_palette,
 bar_order = c("q307_cl_17", "q307_cl_6",  "q307_cl_9", "q307_cl_12",   "q307_cl_15", "q307_cl_7", "q307_cl_11", "q307_cl_16", "q307_cl_8","q307_cl_3", "q307_cl_1", "q307_cl_2","q307_cl_10", "q307_cl_14","q307_cl_13","q307_cl_18", "q307_cl_5")
)
Business_Solutions_Next_Action_data<-Business_Solutions_Next_Action$data
write.csv(Business_Solutions_Next_Action_data,"Business_Solutions_Next_Action_data.csv")
Business_Solutions_Next_Action_data
Business_Solutions_Next_Action


```

@fig-Business-Solution-Next-Action shows that 33% of respondents who own a managed cyber security solution intend to switch to a new provider. Similarly 30% of those who own a lending solution intend to switch to a new provider.


- Age group
```{r}
require(vtable)
BUSINESS_SOLUTION_NEXT_STEP_AGE_GROUP<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6"
,"q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17"), group=c("age_categories"),out="csv",file="BUSINESS_SOLUTION_NEXT_STEP_AGE_GROUP.csv")
BUSINESS_SOLUTION_NEXT_STEP_AGE_GROUP
```
- Compay Size
```{r} 
require(vtable)
BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6"
,"q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17"), group=c("company_size"),out="csv",file="BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE.csv")
BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE
```
- Compay Size
```{r}
require(vtable)
BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6"
,"q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17"), group=c("company_size"),out="csv",file="BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE.csv")
BUSINESS_SOLUTION_NEXT_STEP_COMPANY_SIZE
```
- States
```{r}
require(vtable)
BUSINESS_SOLUTION_NEXT_STEP_STATE<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6"
,"q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17"), group=c("q16_shared"),out="csv",file="BUSINESS_SOLUTION_NEXT_STEP_STATE.csv")
BUSINESS_SOLUTION_NEXT_STEP_STATE
```


@fig-Business-Solution-Importance-For-Bundling shows that vendor reputation, discounted pricing, streamlined operations - are the factors that SME owners report being 'Extremely important' to them.

```{r}
require(vtable)
require(dplyr)
PAY_PRODUCTS_IMPORTANCES_CL<-dplyr::select(BTQ2_CL,response_id,RESPONDENT_TYPE,company_size,q21_cl,q130_cl,q21_shared,q307_cl_1,q307_cl_2,q307_cl_3,q307_cl_5,q307_cl_6,q307_cl_8,q307_cl_9,q307_cl_10,q307_cl_11,q307_cl_12,q307_cl_13,q307_cl_14,q307_cl_14,q307_cl_15,q307_cl_16,q307_cl_17,q307_cl_18)
#PAY_PRODUCTS_IMPORTANCES_CL=replace_NA_with_value(PAY_PRODUCTS_IMPORTANCES_CL,columns = #c("q234_cl_1","q234_cl_2","q234_cl_3","q234_cl_4","q234_cl_5","q234_cl_6"),replace_value = 'NA')
```

Commercial Lines

Pay products bundling - Business Type

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_BUSINESS_TYPE<-st(PAY_PRODUCTS_IMPORTANCES_CL, vars = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"), group = "q130_cl", out="csv",file="PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_BUSINESS_TYPE.csv")
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_BUSINESS_TYPE
```

Pay products for bundling - Company Size

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_COMPANY_SIZE<-st(PAY_PRODUCTS_IMPORTANCES_CL, vars = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "company_size",out="csv",file="PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_COMPANY_SIZE.csv")
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_COMPANY_SIZE
```

Pay products for bundling - By Revenue

```{r}
require(vtable)

PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE<-st(PAY_PRODUCTS_IMPORTANCES_CL, vars = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q21_cl",out="csv", file="PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE.csv")
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE
```

Pay products for bundling - By Industry

```{r}
PAY_PRODUCTS_IMPORTANCES_CL$q21_cl<-as.factor(PAY_PRODUCTS_IMPORTANCES_CL$q21_cl)
PAY_PRODUCTS_IMPORTANCES_CL$q21_cl

PAY_PRODUCTS_IMPORTANCES_CL$q21_cl<-factor(PAY_PRODUCTS_IMPORTANCES_CL$q21_cl,
                       levels=c("$49,999 or less","$50,000–$99,999","$100,000–$249,999","$250,000–$499,999",
                                "$500,000-$999,999"," $1,000,000–$1,999,999","$2,000,000–$3,499,999","$3,500,000 or more","Don’t know","Prefer not to say"))

```

```{r}
require(vtable)
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE_INDUSTRY<-st(PAY_PRODUCTS_IMPORTANCES_CL, vars = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q21_shared",out="csv", file="PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE_INDUSTRY.csv")
PAY_PRODUCTS_BUNDLING_IMPORTANCE_BY_REVENUE_INDUSTRY
```



###Business Solutions

```{r}
BUSINESS_SOLUTIONS_DF<-dplyr::select(BTQ2_CL, response_id,
                                     q34_cl_1,q34_cl_2,q34_cl_3,q34_cl_5,q34_cl_6
,q34_cl_7,q34_cl_8,q34_cl_9,q34_cl_10,q34_cl_11,q34_cl_12,q34_cl_13,q34_cl_14,q34_cl_15,q34_cl_16,q34_cl_17,

q35_cl_1,q35_cl_2,q35_cl_3,q35_cl_5,q35_cl_6
,q35_cl_7,q35_cl_8,q35_cl_9,q35_cl_10,q35_cl_11,q35_cl_12,q35_cl_13,q35_cl_14,q35_cl_15,q35_cl_16,q35_cl_17,q35_cl_18)
BUSINESS_SOLUTIONS_DF


BUSINESS_SOLUTIONS_DF_data_survey_factorized <- lapply(BUSINESS_SOLUTIONS_DF, function(x) as.factor(as.character(x)))
BUSINESS_SOLUTIONS_DF_data_survey_factorized<-data.frame(BUSINESS_SOLUTIONS_DF_data_survey_factorized) 
str(BUSINESS_SOLUTIONS_DF_data_survey_factorized)

q34_correct_levels <- c('Not at all likely', 
                    'A little likely', 
                    'Somewhat likely', 
                    'Very likely', 
                    'Extremely likely')

# Use lapply to apply the same transformation to all q34_shared variables
q34_cols <- grep("^q34_shared_", colnames(BUSINESS_SOLUTIONS_DF_data_survey_factorized), value = TRUE)

BUSINESS_SOLUTIONS_DF_data_survey_factorized[q34_cols] <- lapply(BUSINESS_SOLUTIONS_DF_data_survey_factorized[q34_cols], function(x) {
  factor(x, levels = q34_correct_levels, labels = q34_correct_levels, ordered = TRUE)
})



BUSINESS_SOLUTIONS_DF_data_numeric<- lapply(BUSINESS_SOLUTIONS_DF_data_survey_factorized, function(x) as.numeric(as.factor(x)))
BUSINESS_SOLUTIONS_DF_data_numeric<-data.frame(BUSINESS_SOLUTIONS_DF_data_numeric) 
View(BUSINESS_SOLUTIONS_DF_data_numeric)

BUSINESS_SOLUTIONS_DF_data_numeric_replaced <- replace_NA_with_value(BUSINESS_SOLUTIONS_DF_data_numeric, columns = c("q34_cl_1","q34_cl_2","q34_cl_3","q34_cl_5","q34_cl_6","q34_cl_7","q34_cl_8","q34_cl_9","q34_cl_10","q34_cl_11","q34_cl_12","q34_cl_13","q34_cl_14","q34_cl_15","q34_cl_16","q34_cl_17","q34_cl_18"), replace_value = NA)
BUSINESS_SOLUTIONS_DF_data_numeric_replaced

# Replace response_id in df2 with response_id from df1
BUSINESS_SOLUTIONS_DF_data_numeric_replaced$response_id <- BUSINESS_SOLUTIONS_DF_data_survey_factorized$response_id

# View the updated df2
print(BUSINESS_SOLUTIONS_DF_data_numeric_replaced)
```

####Create reduced dataframe

```{r}
require(dplyr)
#Future Consideration
FUTURE_CONSIDERATION_NEW_PRODUCTS_DF<-dplyr::select(BUSINESS_SOLUTIONS_DF_data_numeric_replaced,response_id,q34_cl_1,q34_cl_2,q34_cl_3,q34_cl_5,q34_cl_6
,q34_cl_7,q34_cl_8,q34_cl_9,q34_cl_10,q34_cl_11,q34_cl_12,q34_cl_13,q34_cl_14,q34_cl_15,q34_cl_16,q34_cl_17)
FUTURE_CONSIDERATION_NEW_PRODUCTS_DF

#Purchase Method
Purchase_Method_NEW_PRODUCTS_DF<-dplyr::select(BUSINESS_SOLUTIONS_DF_data_numeric_replaced,response_id,q35_cl_1,q35_cl_2,q35_cl_3,q35_cl_5,q35_cl_6
,q35_cl_7,q35_cl_8,q35_cl_9,q35_cl_10,q35_cl_11,q35_cl_12,q35_cl_13,q35_cl_14,q35_cl_15,q35_cl_16,q35_cl_17)
Purchase_Method_NEW_PRODUCTS_DF
```

```{r}
require(reshape2)
require(dplyr)
# Product Future Consideration
df_long_future_condiseration_new_verticals <- reshape2::melt(FUTURE_CONSIDERATION_NEW_PRODUCTS_DF, id.vars = "response_id", variable.name = "Product_Type", value.name = "Future_Consideration")
df_long_future_condiseration_new_verticals

#favorability
df_long_purchsase_method_new_vert <- reshape2::melt(Purchase_Method_NEW_PRODUCTS_DF, id.vars = "response_id", variable.name = "Product_Type", value.name = "Purchase_Method")
df_long_future_condiseration_new_verticals
```

```{r}
#relabel cases
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_1", "Retirement Planning", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_2", "Payroll Services", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_3", "Tax Services", df_long_future_condiseration_new_verticals$Product_Type)

df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_5", "Banking", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_6", "Lending Solutions", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_7", "On-Demand Pay Services", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_8", "Point-of-Sale (POS) Services", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_9", "Professional Employer Organizations (PEO)", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_10", "Staff Scheduling", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_11", "Document Management", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_12", "Vendor Management", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_13", "Benefits Administration", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_14", "Payment Processing", df_long_future_condiseration_new_verticals$Product_Type)


df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_15", "Bookkeeping Services", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_16", "Managed IT Services", df_long_future_condiseration_new_verticals$Product_Type)
df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_17", "Managed Cyber Security Services", df_long_future_condiseration_new_verticals$Product_Type)

df_long_future_condiseration_new_verticals$Product_Type <- gsub("q34_cl_18", "Surety bonds", df_long_future_condiseration_new_verticals$Product_Type)
```

```{r}
#relabel cases
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_1", "Retirement Planning", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_2", "Payroll Services", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_3", "Tax Services", df_long_purchsase_method_new_vert$Product_Type)

df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_5", "Banking", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_6", "Lending Solutions", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_7", "On-Demand Pay Services", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_8", "Point-of-Sale (POS) Services", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_9", "Professional Employer Organizations (PEO)", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_11", "Document Management", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_12", "Vendor Management", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_13", "Benefits Administration", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_14", "Payment Processing", df_long_purchsase_method_new_vert$Product_Type)

df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_15", "Bookkeeping Services", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_16", "Managed IT Services", df_long_purchsase_method_new_vert$Product_Type)
df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_17", "Managed Cyber Security Services", df_long_purchsase_method_new_vert$Product_Type)

df_long_purchsase_method_new_vert$Product_Type <- gsub("q35_cl_18", "Suerty bonds", df_long_purchsase_method_new_vert$Product_Type)
```

#### Managed IT Service

##### Revenue

Revenue business by

```{r}
require(dplyr)
MANAGED_CYBERSECURITY_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q34_cl_16)
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_REVENUE_DF, MANAGED_CYBERSECURITY_BY_REVENUE_DF$q34_cl_16!='NA')
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED$q34_cl_16<-as.factor(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED$q34_cl_16)
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC


MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))





MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Don’t know')

new_rows <- data.frame(
q21_cl = "$49,999 or less",
value = "Extremely likely",
count = 0,
perc = 0,
new_perc =0)

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC <- bind_rows(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl<-as.factor(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl)


MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$value<-as.factor(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$value)

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))

# Custom color palette
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#DDE9F0","#95174C",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#DDE9F0","#95174C")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 60)  # Define y-axis limits, e.g., c(0, 80)



# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(MANAGED_CYBERSECURITY_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-it-likelihood-revenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

###### Industry

```{r}
require(dplyr)
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q34_cl_16)
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF, MANAGED_CYBERSECURITY_BY_INDUSTRY_DF$q34_cl_16!='NA')
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED,MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other"))
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED$q34_cl_16<-as.factor(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED$q34_cl_16)
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC


MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC,MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC$q21_shared != c("Other","Public administration","U.S. Military"))
# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,200),
  legend_position = c(0.95, 0.95),
  decimals = 0
)

```

###### Store front

```{r}
require(dplyr)
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q34_cl_16)
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_STOREFRONT_DF, MANAGED_CYBERSECURITY_BY_STOREFRONT_DF$q34_cl_16!='NA')
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED

MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED,MANAGED_CYBERSECURITY_BY_INDUSTRY_DF_REDUCED$q130_cl != c("Other (please specify)"))

MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED$q34_cl_16<-as.factor(MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED$q34_cl_16)
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC$new_perc<-MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC$new_perc*100
MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC


MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC<-MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_CYBERSECURITY_BY_STOREFRONT_DF_REDUCED_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,150),
  legend_position = c(0.95, 0.95),
  decimals = 0
)
```

###### Insurance Purchasing Preference

```{r}
require(dplyr)

MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q34_cl_16)
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF, MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF$q34_cl_16!='NA')
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED


MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_16<-as.factor(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_16)
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED

MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_16<-as.factor(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_16)
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc<-MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc*100
MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC



MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-  subset(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC,MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared !="I don't know")


MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                               
                               "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        'I generally purchase through an agent, but sometimes purchase using a digital self-service tool', 
                                        'I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent', 
                                        'I always purchase insurance using a digital self-service tool'),ordered = TRUE))




# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 60)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC, aes(x = factor(MANAGED_CYBERSECURITY_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-it-likelihood-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 14,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

#### Managed Cyber Security Service

##### Revenue

Revenue business by

```{r}
require(dplyr)
MANAGED_IT_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q34_cl_17)
MANAGED_IT_BY_REVENUE_DF_REDUCED<-subset(MANAGED_IT_BY_REVENUE_DF, MANAGED_IT_BY_REVENUE_DF$q34_cl_17!='NA')
MANAGED_IT_BY_REVENUE_DF_REDUCED
MANAGED_IT_BY_REVENUE_DF_REDUCED$q34_cl_17<-as.factor(MANAGED_IT_BY_REVENUE_DF_REDUCED$q34_cl_17)
MANAGED_IT_BY_REVENUE_DF_REDUCED<-MANAGED_IT_BY_REVENUE_DF_REDUCED

MANAGED_IT_BY_REVENUE_DF_REDUCED<-MANAGED_IT_BY_REVENUE_DF_REDUCED%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))





new_rows <- data.frame(
q21_cl = c("$49,999 or less", "$49,999 or less"),
value = c("Very likely", "Extremely likely"),
count = c(0,0),
perc = c(0,0),
new_perc = c(0,0))

# Add the new rows to the existing dataframe
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC <- rbind(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

                                                    
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')

MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Don’t know')

# Custom color palette
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 60)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-cyber-likelihood-revenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

###### Industry

```{r}
require(dplyr)
MANAGED_IT_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q34_cl_17)
MANAGED_IT_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_IT_BY_INDUSTRY_DF, MANAGED_IT_BY_INDUSTRY_DF$q34_cl_17!='NA')
MANAGED_IT_BY_INDUSTRY_DF_REDUCED
MANAGED_IT_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_IT_BY_INDUSTRY_DF_REDUCED,MANAGED_IT_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other"))
MANAGED_IT_BY_INDUSTRY_DF_REDUCED$q34_cl_17<-as.factor(MANAGED_IT_BY_INDUSTRY_DF_REDUCED$q34_cl_17)
MANAGED_IT_BY_INDUSTRY_DF_REDUCED<-MANAGED_IT_BY_INDUSTRY_DF_REDUCED
MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC


MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC,MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC$q21_shared != c("Other","Public administration","U.S. Military"))
# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_IT_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_CYBER_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,100),
  legend_position = c(0.95, 0.95),
  decimals = 0
)

```

###### Store front

```{r}
require(dplyr)
MANAGED_IT_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q34_cl_17)
MANAGED_IT_BY_STOREFRONT_DF_REDUCED<-subset(MANAGED_IT_BY_STOREFRONT_DF, MANAGED_IT_BY_STOREFRONT_DF$q34_cl_17!='NA')
MANAGED_IT_BY_STOREFRONT_DF_REDUCED

MANAGED_IT_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_IT_BY_INDUSTRY_DF_REDUCED,MANAGED_IT_BY_INDUSTRY_DF_REDUCED$q130_cl != c("Other (please specify)"))

MANAGED_IT_BY_STOREFRONT_DF_REDUCED$q34_cl_17<-as.factor(MANAGED_IT_BY_STOREFRONT_DF_REDUCED$q34_cl_17)
MANAGED_IT_BY_STOREFRONT_DF_REDUCED<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC$new_perc<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC$new_perc*100
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC


MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,75),
  legend_position = c(0.95, 0.95),
  decimals = 0
)
```

###### Insurance Purchasing Preference

```{r}
require(dplyr)

MANAGED_IT_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q34_cl_17)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF, MANAGED_IT_BY_PURCHASE_PREFERENCE_DF$q34_cl_17!='NA')
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED


MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_17<-as.factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_17)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED

MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_17<-as.factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q34_cl_17)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc*100
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC



MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Not at all likely', 
                                        'A little likely', 
                                        'Somewhat likely', 
                                        'Very likely', 
                                        'Extremely likely'),ordered = TRUE))

MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-  subset(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC,MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared !="I don't know")


MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                               
                               "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        'I generally purchase through an agent, but sometimes purchase using a digital self-service tool', 
                                        'I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent', 
                                        'I always purchase insurance using a digital self-service tool'),ordered = TRUE))




# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#DDE9F0",
                    "#002A4E", "#36749D", "#85714D", "#000000", "#004F51","#95174C", "#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 60)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC, aes(x = factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-CYBER-likelihood-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 14,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

Lets create interest in cyber preferedd purchase method by company size graph

```{r}
require(dplyr)
MANAGED_CYBERSECURITY_PURCHASE_DF<-dplyr::select(BTQ2_CL,response_id,company_size,q35_cl_16)
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_PURCHASE_DF, MANAGED_CYBERSECURITY_PURCHASE_DF$q35_cl_16!='NA')

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED%>%
                    mutate(company_size=factor(company_size, 
                             levels = c("0-50","51-100", "101-150", "151-200", "201-250", "251-300", "301-350", "351-400","401-450","451-500"),ordered = TRUE))

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED,MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED$company_size!="")

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED, id.var = c("response_id","company_size"), default_value = 0, group_column = c("company_size","value"))
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$new_perc<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$new_perc*100

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$company_size<-as.factor(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$company_size)

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC%>%mutate(company_size=factor(company_size, levels = c("0-50", "51-100", "101-150", "151-200", "201-250", "251-300", "301-350", "351-400","401-450","451-500"),ordered = TRUE))

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC%>%mutate(company_size_2=factor(company_size, levels = c("0-50", "51-100", "101-150", "151-200", "201-250", "251-300", "301-350", "351-400","401-450","451-500"),ordered = TRUE))

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC_2<-subset(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC,MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$company_size_2!="")
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC_2
# Call the function without specifying y_lim, legend_position
p<-create_grouped_bar_plot(
  data = MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC, 
  x_var = "company_size_2", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_IT_PURCHASE_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,150),
  legend_position = c(0.95, 0.95),
  decimals = 0
)
p













custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C", "#DDE9F0",
                    "#002A4E", "#36749D", "#85714D", "#000000", "#004F51","#95174C", "#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC_2, aes(x = factor(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC_2$company_size_2), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "MANAGED_IT_PURCHASE_DF_REDUCED_PERC_2.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

##### Revenue

Revenue by

```{r}
require(dplyr)
CYBER_PURCHASE_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q35_cl_16)
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED<-subset(CYBER_PURCHASE_BY_REVENUE_DF, CYBER_PURCHASE_BY_REVENUE_DF$q35_cl_16!='NA')
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED$q35_cl_16<-as.factor(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED$q35_cl_16)

CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC



CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC<-CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))





CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC,CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')


CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC <- CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC[-nrow(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC), ]
CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC


# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C",
                    "#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-it-purchase-preference-revenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

Managed Cyber Solution

###### Industry

```{r}
require(dplyr)
CYBER_PURCHASE_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q35_cl_17)
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED<-subset(CYBER_PURCHASE_BY_INDUSTRY_DF, CYBER_PURCHASE_BY_INDUSTRY_DF$q35_cl_17!='NA')
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED<-subset(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED,CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other"))
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,120),
  legend_position = c(1,1),
  decimals = 0
)


```

###### Store front

```{r}

require(dplyr)
CYBER_PURCHASE_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q35_cl_17)
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED<-subset(CYBER_PURCHASE_BY_STOREFRONT_DF, CYBER_PURCHASE_BY_STOREFRONT_DF$q35_cl_17!='NA')
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED<-subset(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED,CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q130_cl != c("Other (please specify)"))
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC

# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,100),
  legend_position = c(1,1),
  decimals = 0
)

```

###### Insurance Purchasing Preference

```{r}
require(dplyr)
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q35_cl_17)
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF, CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF$q35_cl_17!='NA')



CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED<-CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                                        "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        "I generally purchase through an agent, but sometimes purchase using a digital self-service tool", 
                                        "I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent", 
                                        "I always purchase insurance using a digital self-service tool",
                                        "I don't know"),ordered = TRUE))

CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC



CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC<-CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                                        "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        "I generally purchase through an agent, but sometimes purchase using a digital self-service tool", 
                                        "I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent", 
                                        "I always purchase insurance using a digital self-service tool",
                                        "I don't know"),ordered = TRUE))




# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C",
                    "#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC, aes(x = factor(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 0.9) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "cyber-method-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches
```

Lets create interest in cyber preferedd purchase mehtod by company size graph

```{r}
require(dplyr)
MANAGED_CYBERSECURITY_PURCHASE_DF<-dplyr::select(BTQ2_CL,response_id,company_size,q35_cl_17)
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED<-subset(MANAGED_CYBERSECURITY_PURCHASE_DF, MANAGED_CYBERSECURITY_PURCHASE_DF$q35_cl_17!='NA')
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED

MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED, id.var = c("response_id","company_size"), default_value = 0, group_column = c("company_size","value"))
MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$new_perc<-MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC$new_perc*100



# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_CYBERSECURITY_PURCHASE_DF_REDUCED_PERC, 
  x_var = "company_size", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_CYBERSECURITY__PURCHASE_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,100),
  legend_position = c(0.95, 0.95),
  decimals = 0
)
```

##### Revenue

Revenue by

```{r}
require(dplyr)
CYBER_PURCHASE_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q35_cl_17)
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED<-subset(CYBER_PURCHASE_BY_REVENUE_DF, CYBER_PURCHASE_BY_REVENUE_DF$q35_cl_17!='NA')
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC



CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC<-CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))





CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC,CYBER_PURCHASE_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')
# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C",
                    "#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "cyber-purchase-preference-revenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

###### Industry

```{r}
require(dplyr)
CYBER_PURCHASE_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q35_cl_17)
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED<-subset(CYBER_PURCHASE_BY_INDUSTRY_DF, CYBER_PURCHASE_BY_INDUSTRY_DF$q35_cl_17!='NA')
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED<-subset(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED,CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other"))
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "CYBER_PURCHASE_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,120),
  legend_position = c(1,1),
  decimals = 0
)


```

###### Store front

```{r}

require(dplyr)
CYBER_PURCHASE_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q35_cl_17)
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED<-subset(CYBER_PURCHASE_BY_STOREFRONT_DF, CYBER_PURCHASE_BY_STOREFRONT_DF$q35_cl_17!='NA')
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED<-subset(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED,CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q130_cl != c("Other (please specify)"))
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC

# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "CYBER_PURCHASE_BY_STOREFRONT_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,100),
  legend_position = c(1,1),
  decimals = 0
)

```

###### Insurance Purchasing Preference

```{r}
require(dplyr)
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q35_cl_17)
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF, CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF$q35_cl_17!='NA')



CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED<-CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                                        "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        "I generally purchase through an agent, but sometimes purchase using a digital self-service tool", 
                                        "I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent", 
                                        "I always purchase insurance using a digital self-service tool",
                                        "I don't know"),ordered = TRUE))

CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED$q35_cl_17<-as.factor(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED$q35_cl_17)

CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$new_perc<-  CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$new_perc*100
CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC



CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC<-CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                                        "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        "I generally purchase through an agent, but sometimes purchase using a digital self-service tool", 
                                        "I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent", 
                                        "I always purchase insurance using a digital self-service tool",
                                        "I don't know"),ordered = TRUE))




# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C",
                    "#002A4E", "#36749D", "#DDE9F0", "#85714D", "#000000", "#004F51", "#95174C")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC, aes(x = factor(CYBER_PURCHASE_BY_PURCHASE_PREFERENCE_DF_REDUCED_LONG_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 0.9) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "cyber-method-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches
```

##### Ranking Business Solutions

@fig-CL-Business-Solutions-Rank shows that 23.5% of select indicate that their employer is likely to purchase accounting services, cyber security services 22.75%, and benefit administrations 22%.





### Bundling - Commercial Lines Products

Q307CL:Below is a list of professional services and business solutions. Please select all of the services that you think your employer would purchase together in a bundle.

Please create the first bundle of products that come to mind.

```{r}
#| label: fig-Business-Solutions-Next-Decision
#| fig-cap: Respondents decision with each business decision
#| warning: false
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")
Business_Solutions_Next_Decision<- generate_horizontal_bar_chart(
  BTQ2_CL,
  "Business_Solutions_Next_Decision.png",
  question_names = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),
  var_labels = c("Payroll Services", "Payment Processing", "Managed Cyber Security Services", "Bookkeeping Services", "Banking Services", "Point-of-Sale (POS) Systems", "Tax Services", "Retirement Planning", "Document Management", "Benefits Administration", "Managed IT Services", "Surety", "Staff Scheduling", "Vendor Management", "Professional Employer Organizations (PEO)", "On-Demand Pay Services", "Lending Solutions"),
  value_labels = c("Remain with the same provider", "Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)"),
  bar_order = c("q307_cl_2", "q307_cl_14", "q307_cl_17", "q307_cl_15", "q307_cl_5", "q307_cl_8", "q307_cl_3", "q307_cl_1", "q307_cl_11", "q307_cl_13", "q307_cl_16", "q307_cl_18", "q307_cl_10", "q307_cl_12", "q307_cl_9", "q307_cl_7", "q307_cl_6"),
  custom_palette = custom_palette
)
Business_Solutions_Next_Decision
Business_Solutions_Next_Decision_data<-Business_Solutions_Next_Decision$data
Business_Solutions_Next_Decision_data
write.csv(Business_Solutions_Next_Decision_data,"Business_Solutions_Next_Decision_data.csv",row.names = TRUE)
```

### Next Action Under 50

```{r}
#| label: fig-Business-Solutions-Next-Decision-Under-50
#| fig-cap: Respondents decision with each business decision for comapnies with under 50 staff
#| warning: false
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")
Business_Solutions_Next_Decision_Under_50<- generate_horizontal_bar_chart(
  BTQ2_CL_50_AND_UNDER,
  "Business_Solutions_Next_Decision_under_50.png",
  question_names = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),
  var_labels = c("Payroll Services", "Surety", "Payment Processing", "Banking Services", "Professional Employer Organizations (PEO)", "Point-of-Sale (POS) Systems", "On-Demand Pay Services", "Managed IT Services", "Tax Services", "Benefits Administration", "Retirement Planning", "Staff Scheduling", "Bookkeeping Services", "Managed Cyber Security Services", "Vendor Management", "Document Management", "Lending Solutions"),
  value_labels = c("Remain with the same provider", "Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)"),
  bar_order = c("q307_cl_2", "q307_cl_18", "q307_cl_14", "q307_cl_5", "q307_cl_9", "q307_cl_8", "q307_cl_7", "q307_cl_16", "q307_cl_3", "q307_cl_13", "q307_cl_1", "q307_cl_10", "q307_cl_15", "q307_cl_17", "q307_cl_12", "q307_cl_11", "q307_cl_6"),
  custom_palette = custom_palette
)
Business_Solutions_Next_Decision_Under_50
Business_Solutions_Next_Decision_Under_50<-Business_Solutions_Next_Decision_Under_50$data
Business_Solutions_Next_Decision_Under_50
write.csv(Business_Solutions_Next_Decision_Under_50,"Business_Solutions_Next_Decision_Under_50.csv",row.names = TRUE)
```

### Next Action Over 50

```{r}
#| label: fig-Business-Solutions-Next-Decision-Over-50
#| fig-cap: Respondents decision with each business decision over 50
#| warning: false
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")
Business_Solutions_Next_Decision_Over_50<- generate_horizontal_bar_chart(
  BTQ2_CL_51_AND_OVER,
  "Business_Solutions_Next_Decision.png",
  question_names = c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),
  var_labels = c("Payroll Services", "Managed Cyber Security Services", "Payment Processing", "Retirement Planning", "Banking Services", "Point-of-Sale (POS) Systems", "Tax Services", "Benefits Administration", "Document Management", "Bookkeeping Services", "Professional Employer Organizations (PEO)", "On-Demand Pay Services", "Vendor Management", "Staff Scheduling", "Surety", "Managed IT Services", "Lending Solutions"),
  value_labels = c("Remain with the same provider", "Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)"),
  bar_order = c("q307_cl_2", "q307_cl_17", "q307_cl_14", "q307_cl_1", "q307_cl_5", "q307_cl_8", "q307_cl_3", "q307_cl_13", "q307_cl_15", "q307_cl_10", "q307_cl_18", "q307_cl_12", "q307_cl_11", "q307_cl_7", "q307_cl_9", "q307_cl_16", "q307_cl_6"),
  custom_palette = custom_palette
)
Business_Solutions_Next_Decision_Over_50
Business_Solutions_Next_Decision_Over_50<-Business_Solutions_Next_Decision_Over_50$data
Business_Solutions_Next_Decision_Over_50
write.csv(Business_Solutions_Next_Decision_Over_50,"Business_Solutions_Next_Decision_Over_50.csv",row.names = TRUE)
```

Create tables of :

Next action by revenue

```{r}
require(vtable)

BTQ2_CL<-BTQ2_CL%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))

NEXT_ACTION_REVENUE<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q21_cl",out="csv",file="NEXT_ACTION_REVENUE.csv")
NEXT_ACTION_REVENUE
```

Next action by industry

```{r}
require(vtable)
NEXT_ACTION_INDUSTRY<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q21_shared",out="csv",file="NEXT_ACTION_INDUSTRY.csv")
NEXT_ACTION_INDUSTRY
```

Next action by store front

```{r}
require(vtable)
NEXT_ACTION_STOREFRONT<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q130_cl",out="csv",file="NEXT_ACTION_STOREFRONT.csv")
NEXT_ACTION_STOREFRONT
```

Next action by

```{r}
require(vtable)
NEXT_ACTION_PURCHASE_PREFERENCE<-st(BTQ2_CL,vars=c("q307_cl_1","q307_cl_2","q307_cl_3","q307_cl_5","q307_cl_6","q307_cl_7","q307_cl_8","q307_cl_9","q307_cl_10","q307_cl_11","q307_cl_12","q307_cl_13","q307_cl_14","q307_cl_15","q307_cl_16","q307_cl_17","q307_cl_18"),group = "q94_shared",out="csv",file="NEXT_ACTION_PURCHASE_PREFERENCE.csv")
NEXT_ACTION_PURCHASE_PREFERENCE
```

#### Managed IT Service

##### Revenue

Managed IT Next

```{r}
require(dplyr)
MANAGED_IT_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q307_cl_16)
MANAGED_IT_BY_REVENUE_DF_REDUCED<-subset(MANAGED_IT_BY_REVENUE_DF, MANAGED_IT_BY_REVENUE_DF$q307_cl_16!='NA')
MANAGED_IT_BY_REVENUE_DF_REDUCED
MANAGED_IT_BY_REVENUE_DF_REDUCED$q307_cl_16<-as.factor(MANAGED_IT_BY_REVENUE_DF_REDUCED$q307_cl_16)
MANAGED_IT_BY_REVENUE_DF_REDUCED<-MANAGED_IT_BY_REVENUE_DF_REDUCED

MANAGED_IT_BY_REVENUE_DF_REDUCED<-MANAGED_IT_BY_REVENUE_DF_REDUCED%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))

# New rows to be added

new_rows <- data.frame(
  q21_cl = c("$49,999 or less","$49,999 or less","$49,999 or less","$50,000–$99,999","$50,000–$99,999","$50,000–$99,999",
  "$100,000–$249,999","$100,000–$249,999",
  "$250,000–$499,999","$250,000–$499,999",
"$500,000-$999,999","$1,000,000–$1,999,999"),
  value = c("Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)",
  "Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)",
  "Switch to a new provider","Not applicable (one time purchase)",
  "Drop the service entirely","Not applicable (one time purchase)",
  "Not applicable (one time purchase)","Not applicable (one time purchase)"),
  count = c(0,0,0,0,0,0,0,0,0,0,0,0),
  perc = c(0,0,0,0,0,0,0,0,0,0,0,0),
  new_perc = c(0,0,0,0,0,0,0,0,0,0,0,0))
new_rows
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-as.data.frame(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC)
MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC <- bind_rows(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!="Don’t know")



MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')
# Custom color palette
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")



MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC

# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 120)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 4) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-IT-next-taskrevenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```


# New rows to be added

new_rows \<- data.frame( q21_cl = c("\$49,999 or less","\$50,000--\$99,999","\$50,000--\$99,999","100,000--\$249,999","\$250,000--\$499,999","\$250,000--\$499,999","\$500,000-\$999,999","\$500,000-\$999,999"), value = c("Drop the service entirely","Drop the service entirely","Not applicable (one time purchase","Not applicable (one time purchase","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)"), count = c(0,0,0,0,0,0,0,0), perc = c(0,0,0,0,0,0,0,0), new_perc = c(0,0,0,0,0,0,0,0) )

# Append new rows to the original dataframe

CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC \<- rbind(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC\<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%\>% mutate(value=factor(value, levels = c('Remain with the same provider', 'Switch to a new provider', 'Drop the service entirely', 'Not applicable (one time purchase)'),ordered = TRUE))

# New rows to be added

new_rows \<- data.frame( q21_cl = c("\$49,999 or less","\$50,000--\$99,999","\$50,000--\$99,999","100,000--\$249,999","\$250,000--\$499,999","\$250,000--\$499,999","\$500,000-\$999,999","\$500,000-\$999,999"), value = c("Drop the service entirely","Drop the service entirely","Not applicable (one time purchase","Not applicable (one time purchase","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)"), count = c(0,0,0,0,0,0,0,0), perc = c(0,0,0,0,0,0,0,0), new_perc = c(0,0,0,0,0,0,0,0)

###### Industry

```{r}
require(dplyr)
MANAGED_IT_SERVICE_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q307_cl_16)
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_IT_SERVICE_BY_INDUSTRY_DF, MANAGED_IT_SERVICE_BY_INDUSTRY_DF$q307_cl_16!='NA')
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED,MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other","Public administration"))
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED$q307_cl_16<-as.factor(MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED$q307_cl_16)
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED<-MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC


MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))

MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-subset(MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC,MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$q21_shared != c("Other","Public administration","U.S. Military"))
# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_IT_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_IT_SERVICES_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,200),
  legend_position = c(1,1),
  decimals = 0
)

```

###### Store front

```{r}
require(dplyr)
MANAGED_IT_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q307_cl_16)
MANAGED_IT_BY_STOREFRONT_DF_REDUCED<-subset(MANAGED_IT_BY_STOREFRONT_DF, MANAGED_IT_BY_STOREFRONT_DF$q307_cl_16!='NA')


MANAGED_IT_BY_STOREFRONT_DF_REDUCED$q307_cl_16<-as.factor(MANAGED_IT_BY_STOREFRONT_DF_REDUCED$q307_cl_16)
MANAGED_IT_BY_STOREFRONT_DF_REDUCED<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC$new_perc<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC$new_perc*100
MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC


MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC<-MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_IT_BY_STOREFRONT_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,130),
  legend_position = c(0.95, 0.95),
  decimals = 0
)
```

###### Insurance Purchasing Preference

```{r}
require(dplyr)

MANAGED_IT_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q307_cl_16)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF, MANAGED_IT_BY_PURCHASE_PREFERENCE_DF$q307_cl_16!='NA')
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED


MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_16<-as.factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_16)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED

MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_16<-as.factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_16)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc*100
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC




MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))



MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-  subset(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC,MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared !="I don't know")


# New rows to be added
new_rows <- data.frame(
    q94_shared = c("I always purchase my insurance through an agent", 
                                       
                                        'I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent', 
                                        'I always purchase insurance using a digital self-service tool'),
  value = c("Not applicable (one time purchase)","Not applicable (one time purchase)","Not applicable (one time purchase)"),
  count = c(0,0,0),
  perc = c(0,0,0),
  new_perc = c(0,0,0)
)
MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC <- rbind(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC, new_rows)


MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                               
                               "I always purchase my insurance through an agent", 
                                        'I generally purchase through an agent, but sometimes purchase using a digital self-service tool', 
                                        'I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent', 
                                        'I always purchase insurance using a digital self-service tool'),ordered = TRUE))




# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC, aes(x = factor(MANAGED_IT_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-it-next-choice-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```

#### Managed Cyber Security Services

##### Revenue
```{r}
write.csv(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC,"MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC.csv")
```

Managed IT Next

```{r}
require(dplyr)
MANAGED_CYBER_BY_REVENUE_DF<-dplyr::select(BTQ2_CL,response_id,q21_cl,q307_cl_17)
MANAGED_CYBER_BY_REVENUE_DF_REDUCED<-subset(MANAGED_CYBER_BY_REVENUE_DF, MANAGED_CYBER_BY_REVENUE_DF$q307_cl_17!='NA')
MANAGED_CYBER_BY_REVENUE_DF_REDUCED
MANAGED_CYBER_BY_REVENUE_DF_REDUCED$q307_cl_17<-as.factor(MANAGED_CYBER_BY_REVENUE_DF_REDUCED$q307_cl_17)
MANAGED_CYBER_BY_REVENUE_DF_REDUCED<-MANAGED_CYBER_BY_REVENUE_DF_REDUCED

MANAGED_CYBER_BY_REVENUE_DF_REDUCED<-MANAGED_CYBER_BY_REVENUE_DF_REDUCED%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBER_BY_REVENUE_DF_REDUCED, id.var = c("response_id","q21_cl"), default_value = 0, group_column = c("q21_cl","value"))
MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC


MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                             levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))




MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC%>%
                    mutate(q21_cl=factor(q21_cl, 
                             levels = c('$49,999 or less', 
                                        '$50,000–$99,999', 
                                        '$100,000–$249,999', 
                                        '$250,000–$499,999', 
                                        '$500,000-$999,999',
                                        '$1,000,000–$1,999,999', 
                                        '$2,000,000–$3,499,999', 
                                        '$3,500,000 or more', 
                                        'Don’t know', 
                                        'Prefer not to say'),ordered = TRUE))


MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!="Don’t know")


MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC,MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl!='Prefer not to say')
# Custom color palette
custom_palette <- c("#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")

MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC


# New rows to be added
# New rows to be added
new_rows <- data.frame(
  q21_cl = c("$49,999 or less","$49,999 or less",
  "$50,000–$99,999","$50,000–$99,999","$50,000–$99,999",
  
  
  "$100,000–$249,999", "$100,000–$249,999",
  "$250,000–$499,999","$250,000–$499,999",
  
  
  "$500,000-$999,999",
  "$1,000,000–$1,999,999",
  "$3,500,000 or more"),
  value = c("Switch to a new provider", "Not applicable (one time purchase)",
            
  "Switch to a new provider","Drop the service entirely", "Not applicable (one time purchase)",
  
  "Drop the service entirely", "Not applicable (one time purchase)",
  
  "Drop the service entirely", "Not applicable (one time purchase)",
  
  "Drop the service entirely",
  "Not applicable (one time purchase)",
  "Drop the service entirely"
  ),
  count = c(0,0,0,0,0,0,0,0,0,0,0,0),
  perc = c(0,0,0,0,0,0,0,0,0,0,0,0),
  new_perc = c(0,0,0,0,0,0,0,0,0,0,0,0)
)


MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC <- rbind(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 120)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, aes(x = factor(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC$q21_cl), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 4) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 8, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-cyber-next-taskrevenue.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```


# New rows to be added
new_rows <- data.frame(
  q21_cl = c("$49,999 or less","$49,999 or less",
  "$50,000–$99,999","$50,000–$99,999",$50,000–$99,999",
  
  
  "$100,000–$249,999", "$100,000–$249,999","$100,000–$249,999",
  "$250,000–$499,999","$250,000–$499,999",$250,000–$499,999",
  
  
  "$500,000-$999,999",
  "$1,000,000–$1,999,999","$3,500,000 or more"	),
  value = c("Swith to a new provider", "Not applicable (one time purchase)",
  "Swith to a new provider","Drop the service entirely", "Not applicable (one time purchase)",
  "Drop the service entirely", "Not applicable (one time purchase)",
  "Drop the service entirely","Not applicable (one time purchase)",,"Not applicable (one time purchase)"),
  count = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0),
  perc = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0),
  new_perc = c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
)


# New rows to be added

new_rows \<- data.frame( q21_cl = c("\$49,999 or less","\$49,999 or less", "\$50,000--\$99,999","\$50,000--\$99,999", "100,000--\$249,999", "100,000--\$249,999", "\$250,000--\$499,999","\$250,000--\$499,999", "\$500,000-\$999,999","\$1,000,000--\$1,999,999","\$2,000,000--\$3,499,999"), value = c("Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)","Switch to a new provider","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely") count = c(0,0,0,0,0,0,0,0,0,0,0) perc = c(0,0,0,0,0,0,0,0,0,0,0), new_perc = c(0,0,0,0,0,0,0,0,0,0,0) ) MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC \<- rbind(MANAGED_CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

# New rows to be added

new_rows \<- data.frame( q21_cl = c("\$49,999 or less","\$50,000--\$99,999","\$50,000--\$99,999","100,000--\$249,999","\$250,000--\$499,999","\$250,000--\$499,999","\$500,000-\$999,999","\$500,000-\$999,999"), value = c("Drop the service entirely","Drop the service entirely","Not applicable (one time purchase","Not applicable (one time purchase","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)"), count = c(0,0,0,0,0,0,0,0), perc = c(0,0,0,0,0,0,0,0), new_perc = c(0,0,0,0,0,0,0,0) )

# Append new rows to the original dataframe

CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC \<- rbind(CYBER_BY_REVENUE_DF_REDUCED_LONG_PERC, new_rows)

MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC\<-MANAGED_IT_BY_REVENUE_DF_REDUCED_LONG_PERC%\>% mutate(value=factor(value, levels = c('Remain with the same provider', 'Switch to a new provider', 'Drop the service entirely', 'Not applicable (one time purchase)'),ordered = TRUE))

# New rows to be added

new_rows \<- data.frame( q21_cl = c("\$49,999 or less","\$50,000--\$99,999","\$50,000--\$99,999","100,000--\$249,999","\$250,000--\$499,999","\$250,000--\$499,999","\$500,000-\$999,999","\$500,000-\$999,999"), value = c("Drop the service entirely","Drop the service entirely","Not applicable (one time purchase","Not applicable (one time purchase","Drop the service entirely","Not applicable (one time purchase)","Drop the service entirely","Not applicable (one time purchase)"), count = c(0,0,0,0,0,0,0,0), perc = c(0,0,0,0,0,0,0,0), new_perc = c(0,0,0,0,0,0,0,0)

###### Industry

```{r}
require(dplyr)
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF<-dplyr::select(BTQ2_CL,response_id,q21_shared,q307_cl_17)
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF, MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF$q307_cl_17!='NA')
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED<-subset(MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED,MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED$q21_shared != c("Other","Public administration"))
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED$q307_cl_17<-as.factor(MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED$q307_cl_17)
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED<-MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED, id.var = c("response_id","q21_shared"), default_value = 0, group_column = c("q21_shared","value"))
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc<-MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$new_perc*100
MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC


MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))

MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC<-subset(MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC,MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC$q21_shared != c("Other","Public administration","U.S. Military"))
# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_CYBER_SERVICE_BY_INDUSTRY_DF_REDUCED_LONG_PERC, 
  x_var = "q21_shared", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_CYBER_SERVICES_BY_INDUSTRY_DF_REDUCED_LONG_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,120),
  legend_position = c(1,1),
  decimals = 0
)

```

###### Store front

```{r}
require(dplyr)
MANAGED_CYBER_BY_STOREFRONT_DF<-dplyr::select(BTQ2_CL,response_id,q130_cl,q307_cl_17)
MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED<-subset(MANAGED_CYBER_BY_STOREFRONT_DF, MANAGED_CYBER_BY_STOREFRONT_DF$q307_cl_17!='NA')


MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED$q307_cl_17<-as.factor(MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED$q307_cl_17)
MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED<-MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED
MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED, id.var = c("response_id","q130_cl"), default_value = 0, group_column = c("q130_cl","value"))
MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC$new_perc<-MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC$new_perc*100
MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC


MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC<-MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))


# Call the function without specifying y_lim, legend_position
create_grouped_bar_plot(
  data = MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC, 
  x_var = "q130_cl", 
  y_var = "new_perc", 
  fill_var = "value", 
  plot_name = "MANAGED_CYBER_BY_STOREFRONT_DF_REDUCED_PERC_2", 
  plot_title = "", 
  x_label = "", 
  y_label = "Pct. Selected (%)",
  y_lim = c(0,150),
  legend_position = c(1,1),
  decimals = 0
)
```

###### Insurance Purchasing Preference

```{r}
require(dplyr)

MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF<-dplyr::select(BTQ2_CL,response_id,q94_shared,q307_cl_17)
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED<-subset(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF, MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF$q307_cl_17!='NA')
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED


MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_17<-as.factor(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_17)
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED

MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_17<-as.factor(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED$q307_cl_17)
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED<-MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC <- process_data_pipeline_multiple_columns(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED, id.var = c("response_id","q94_shared"), default_value = 0, group_column = c("q94_shared","value"))
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc<-MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$new_perc*100
MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC




MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(value=factor(value, 
                        levels = c('Remain with the same provider', 
                                        'Switch to a new provider', 
                                        'Drop the service entirely', 
                                        'Not applicable (one time purchase)'),ordered = TRUE))



MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-  subset(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC,MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared !="I don't know")




MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC<-MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC%>%
                    mutate(q94_shared=factor(q94_shared, 
                             levels = c(
                               
                               "I always purchase my insurance through an agent", 
                                        "A little likely", 
                                        'I generally purchase through an agent, but sometimes purchase using a digital self-service tool', 
                                        'I generally purchase insurance using a digital self-service tool, but sometimes purchase through an agent', 
                                        'I always purchase insurance using a digital self-service tool'),ordered = TRUE))







# Custom color palette
custom_palette <- c("#002A4E", "#36749D", "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0",
                    "#002A4E", "#36749D",  "#85714D", "#000000", "#004F51", "#95174C","#DDE9F0")


# Arguments for axis limits
x_lim <- NULL  # Define x-axis limits, e.g., c(0, 10) or NULL for default
y_lim <- c(0, 100)  # Define y-axis limits, e.g., c(0, 80)

# Create the bar plot with specified parameters
plot <- ggplot(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC, aes(x = factor(MANAGED_CYBER_BY_PURCHASE_PREFERENCE_DF_REDUCED_PERC$q94_shared), y = new_perc, fill = value)) +
  geom_bar(position = position_dodge(width = 0.9), stat = "identity", width = 1) +  # Set bar width
  scale_fill_manual(values = custom_palette) +
  
  # Add text labels above each bar with specified decimals, ignoring zeros for text labels
  geom_text(aes(label = ifelse(new_perc > 0, formatC(new_perc, format = 'f', digits = 0), '')),
            position = position_dodge(width = 0.9),  # Adjust to match bar width
            vjust = 1,  # Adjust to place text above the bars
            hjust = 0.5,   # Center the text horizontally
            color = "white", # Set text color to white
            size = 3) +    # Adjust text size
  
  # Add axis labels and title
  labs(title = "", 
       x = "", 
       y = "Pct. Selected (%)") +
  
  # Apply custom theme settings
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.line = element_line(),
    text = element_text(size = 6, family = 'sans'),
    legend.position = c(1,1), # Position legend inside the plot area
    legend.justification = c("right", "top"), # Anchor to the top right
    legend.box.margin = margin(10, 10, 10, 10), # Add margin around the legend
    legend.background = element_rect(fill = "transparent", color = NA), # Transparent legend background
    axis.text.x = element_text(angle = 0, vjust = 1, hjust = 0.5) # x-axis labels settings
  ) +
  labs(fill = NULL) # Remove legend title




# Add x and y limits if specified
if (!is.null(x_lim)) {
  plot <- plot + xlim(x_lim)
}

if (!is.null(y_lim)) {
  plot <- plot + ylim(y_lim)
}


# Display the plot
print(plot)


# Save the plot as a high-resolution image
ggsave(filename = "managed-cyber-next-choice-insurance-purchasing-preference.png", 
       plot = plot, 
       dpi = 1800,        # Set the resolution to 1800 DPI
       width = 12,       # Set the width to 12 inches
       height = 4.5)     # Set the height to 4.5 inches

```




```{r}
 library(readr)
Cross_sell_xtab <- read_csv("Cross-sell-xtab.csv")
Cross_sell_xtab
```

```{r}
Cross_sell_xtab$Q101_SHARED<-as.factor(Cross_sell_xtab$Q101_SHARED)
Cross_sell_xtab$Q104_SHARED<-as.factor(Cross_sell_xtab$Q104_SHARED)
```


Compute vtable
```{r}
require(vtable)

Cross_sell_xtab_101<-st(Cross_sell_xtab,vars = "Q101_SHARED",out = "csv",file="Cross_sell_xtab_101.csv")
Cross_sell_xtab_101
```

```{r}
require(vtable)

Cross_sell_xtab_104<-st(Cross_sell_xtab,vars = "Q104_SHARED",out = "csv",file="Cross_sell_xtab_104.csv")
Cross_sell_xtab_104
```